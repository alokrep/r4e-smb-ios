/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "MobileCommon.h"

@implementation ValidationError

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithField: (NSString *) field code: (NSString *) code message: (NSString *) message soft: (BOOL) soft
{
  self = [super init];
  __field = [field retain_stub];
  __field_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __soft = soft;
  __soft_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"field"])
  {
    __field = [[decoder decodeObjectForKey: @"field"] retain_stub];
    __field_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"soft"])
  {
    __soft = [decoder decodeBoolForKey: @"soft"];
    __soft_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__field_isset)
  {
    [encoder encodeObject: __field forKey: @"field"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__soft_isset)
  {
    [encoder encodeBool: __soft forKey: @"soft"];
  }
}

- (void) dealloc
{
  [__field release_stub];
  [__code release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) field {
  return [[__field retain_stub] autorelease_stub];
}

- (void) setField: (NSString *) field {
  [field retain_stub];
  [__field release_stub];
  __field = field;
  __field_isset = YES;
}

- (BOOL) fieldIsSet {
  return __field_isset;
}

- (void) unsetField {
  [__field release_stub];
  __field = nil;
  __field_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BOOL) soft {
  return __soft;
}

- (void) setSoft: (BOOL) soft {
  __soft = soft;
  __soft_isset = YES;
}

- (BOOL) softIsSet {
  return __soft_isset;
}

- (void) unsetSoft {
  __soft_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setField: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSoft: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ValidationError"];
  if (__field_isset) {
    if (__field != nil) {
      [outProtocol writeFieldBeginWithName: @"field" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __field];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__soft_isset) {
    [outProtocol writeFieldBeginWithName: @"soft" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __soft];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ValidationError("];
  [ms appendString: @"field:"];
  [ms appendFormat: @"\"%@\"", __field];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",soft:"];
  [ms appendFormat: @"%i", __soft];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Error

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (int32_t) code message: (NSString *) message
{
  self = [super init];
  __code = code;
  __code_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt32ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeInt32: __code forKey: @"code"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) code {
  return __code;
}

- (void) setCode: (int32_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Error"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __code];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Error("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%i", __code];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Response

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponseCode: (int) responseCode id: (NSString *) id validationErrors: (NSMutableArray *) validationErrors error: (Error *) error
{
  self = [super init];
  __responseCode = responseCode;
  __responseCode_isset = YES;
  __id = [id retain_stub];
  __id_isset = YES;
  __validationErrors = [validationErrors retain_stub];
  __validationErrors_isset = YES;
  __error = [error retain_stub];
  __error_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"responseCode"])
  {
    __responseCode = [decoder decodeIntForKey: @"responseCode"];
    __responseCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"validationErrors"])
  {
    __validationErrors = [[decoder decodeObjectForKey: @"validationErrors"] retain_stub];
    __validationErrors_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [[decoder decodeObjectForKey: @"error"] retain_stub];
    __error_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__responseCode_isset)
  {
    [encoder encodeInt: __responseCode forKey: @"responseCode"];
  }
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__validationErrors_isset)
  {
    [encoder encodeObject: __validationErrors forKey: @"validationErrors"];
  }
  if (__error_isset)
  {
    [encoder encodeObject: __error forKey: @"error"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__validationErrors release_stub];
  [__error release_stub];
  [super dealloc_stub];
}

- (int) responseCode {
  return __responseCode;
}

- (void) setResponseCode: (int) responseCode {
  __responseCode = responseCode;
  __responseCode_isset = YES;
}

- (BOOL) responseCodeIsSet {
  return __responseCode_isset;
}

- (void) unsetResponseCode {
  __responseCode_isset = NO;
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSMutableArray *) validationErrors {
  return [[__validationErrors retain_stub] autorelease_stub];
}

- (void) setValidationErrors: (NSMutableArray *) validationErrors {
  [validationErrors retain_stub];
  [__validationErrors release_stub];
  __validationErrors = validationErrors;
  __validationErrors_isset = YES;
}

- (BOOL) validationErrorsIsSet {
  return __validationErrors_isset;
}

- (void) unsetValidationErrors {
  [__validationErrors release_stub];
  __validationErrors = nil;
  __validationErrors_isset = NO;
}

- (Error *) error {
  return [[__error retain_stub] autorelease_stub];
}

- (void) setError: (Error *) error {
  [error retain_stub];
  [__error release_stub];
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  [__error release_stub];
  __error = nil;
  __error_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResponseCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ValidationError *_elem2 = [[ValidationError alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setValidationErrors: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Error *fieldValue = [[Error alloc] init];
          [fieldValue read: inProtocol];
          [self setError: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Response"];
  if (__responseCode_isset) {
    [outProtocol writeFieldBeginWithName: @"responseCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __responseCode];
    [outProtocol writeFieldEnd];
  }
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__validationErrors_isset) {
    if (__validationErrors != nil) {
      [outProtocol writeFieldBeginWithName: @"validationErrors" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__validationErrors count]];
        int i4;
        for (i4 = 0; i4 < [__validationErrors count]; i4++)
        {
          [[__validationErrors objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__error_isset) {
    if (__error != nil) {
      [outProtocol writeFieldBeginWithName: @"error" type: TType_STRUCT fieldID: 4];
      [__error write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Response("];
  [ms appendString: @"responseCode:"];
  [ms appendFormat: @"%i", __responseCode];
  [ms appendString: @",id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",validationErrors:"];
  [ms appendFormat: @"%@", __validationErrors];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%@", __error];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Attribute

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name value: (NSString *) value
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Attribute"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Attribute("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TwitterSearchConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id query: (NSString *) query radius: (NSString *) radius labels: (NSMutableArray *) labels userDefined: (BOOL) userDefined
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __query = [query retain_stub];
  __query_isset = YES;
  __radius = [radius retain_stub];
  __radius_isset = YES;
  __labels = [labels retain_stub];
  __labels_isset = YES;
  __userDefined = userDefined;
  __userDefined_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"query"])
  {
    __query = [[decoder decodeObjectForKey: @"query"] retain_stub];
    __query_isset = YES;
  }
  if ([decoder containsValueForKey: @"radius"])
  {
    __radius = [[decoder decodeObjectForKey: @"radius"] retain_stub];
    __radius_isset = YES;
  }
  if ([decoder containsValueForKey: @"labels"])
  {
    __labels = [[decoder decodeObjectForKey: @"labels"] retain_stub];
    __labels_isset = YES;
  }
  if ([decoder containsValueForKey: @"userDefined"])
  {
    __userDefined = [decoder decodeBoolForKey: @"userDefined"];
    __userDefined_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__query_isset)
  {
    [encoder encodeObject: __query forKey: @"query"];
  }
  if (__radius_isset)
  {
    [encoder encodeObject: __radius forKey: @"radius"];
  }
  if (__labels_isset)
  {
    [encoder encodeObject: __labels forKey: @"labels"];
  }
  if (__userDefined_isset)
  {
    [encoder encodeBool: __userDefined forKey: @"userDefined"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__query release_stub];
  [__radius release_stub];
  [__labels release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) query {
  return [[__query retain_stub] autorelease_stub];
}

- (void) setQuery: (NSString *) query {
  [query retain_stub];
  [__query release_stub];
  __query = query;
  __query_isset = YES;
}

- (BOOL) queryIsSet {
  return __query_isset;
}

- (void) unsetQuery {
  [__query release_stub];
  __query = nil;
  __query_isset = NO;
}

- (NSString *) radius {
  return [[__radius retain_stub] autorelease_stub];
}

- (void) setRadius: (NSString *) radius {
  [radius retain_stub];
  [__radius release_stub];
  __radius = radius;
  __radius_isset = YES;
}

- (BOOL) radiusIsSet {
  return __radius_isset;
}

- (void) unsetRadius {
  [__radius release_stub];
  __radius = nil;
  __radius_isset = NO;
}

- (NSMutableArray *) labels {
  return [[__labels retain_stub] autorelease_stub];
}

- (void) setLabels: (NSMutableArray *) labels {
  [labels retain_stub];
  [__labels release_stub];
  __labels = labels;
  __labels_isset = YES;
}

- (BOOL) labelsIsSet {
  return __labels_isset;
}

- (void) unsetLabels {
  [__labels release_stub];
  __labels = nil;
  __labels_isset = NO;
}

- (BOOL) userDefined {
  return __userDefined;
}

- (void) setUserDefined: (BOOL) userDefined {
  __userDefined = userDefined;
  __userDefined_isset = YES;
}

- (BOOL) userDefinedIsSet {
  return __userDefined_isset;
}

- (void) unsetUserDefined {
  __userDefined_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRadius: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setLabels: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUserDefined: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TwitterSearchConfig"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__query_isset) {
    if (__query != nil) {
      [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __query];
      [outProtocol writeFieldEnd];
    }
  }
  if (__radius_isset) {
    if (__radius != nil) {
      [outProtocol writeFieldBeginWithName: @"radius" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __radius];
      [outProtocol writeFieldEnd];
    }
  }
  if (__labels_isset) {
    if (__labels != nil) {
      [outProtocol writeFieldBeginWithName: @"labels" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__labels count]];
        int i9;
        for (i9 = 0; i9 < [__labels count]; i9++)
        {
          [outProtocol writeString: [__labels objectAtIndex: i9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__userDefined_isset) {
    [outProtocol writeFieldBeginWithName: @"userDefined" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __userDefined];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TwitterSearchConfig("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",query:"];
  [ms appendFormat: @"\"%@\"", __query];
  [ms appendString: @",radius:"];
  [ms appendFormat: @"\"%@\"", __radius];
  [ms appendString: @",labels:"];
  [ms appendFormat: @"%@", __labels];
  [ms appendString: @",userDefined:"];
  [ms appendFormat: @"%i", __userDefined];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TwitterConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username fetchUserTimeline: (BOOL) fetchUserTimeline searches: (NSMutableArray *) searches
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  __fetchUserTimeline = fetchUserTimeline;
  __fetchUserTimeline_isset = YES;
  __searches = [searches retain_stub];
  __searches_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"fetchUserTimeline"])
  {
    __fetchUserTimeline = [decoder decodeBoolForKey: @"fetchUserTimeline"];
    __fetchUserTimeline_isset = YES;
  }
  if ([decoder containsValueForKey: @"searches"])
  {
    __searches = [[decoder decodeObjectForKey: @"searches"] retain_stub];
    __searches_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__fetchUserTimeline_isset)
  {
    [encoder encodeBool: __fetchUserTimeline forKey: @"fetchUserTimeline"];
  }
  if (__searches_isset)
  {
    [encoder encodeObject: __searches forKey: @"searches"];
  }
}

- (void) dealloc
{
  [__username release_stub];
  [__searches release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (BOOL) fetchUserTimeline {
  return __fetchUserTimeline;
}

- (void) setFetchUserTimeline: (BOOL) fetchUserTimeline {
  __fetchUserTimeline = fetchUserTimeline;
  __fetchUserTimeline_isset = YES;
}

- (BOOL) fetchUserTimelineIsSet {
  return __fetchUserTimeline_isset;
}

- (void) unsetFetchUserTimeline {
  __fetchUserTimeline_isset = NO;
}

- (NSMutableArray *) searches {
  return [[__searches retain_stub] autorelease_stub];
}

- (void) setSearches: (NSMutableArray *) searches {
  [searches retain_stub];
  [__searches release_stub];
  __searches = searches;
  __searches_isset = YES;
}

- (BOOL) searchesIsSet {
  return __searches_isset;
}

- (void) unsetSearches {
  [__searches release_stub];
  __searches = nil;
  __searches_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFetchUserTimeline: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            TwitterSearchConfig *_elem12 = [[TwitterSearchConfig alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setSearches: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TwitterConfig"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fetchUserTimeline_isset) {
    [outProtocol writeFieldBeginWithName: @"fetchUserTimeline" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __fetchUserTimeline];
    [outProtocol writeFieldEnd];
  }
  if (__searches_isset) {
    if (__searches != nil) {
      [outProtocol writeFieldBeginWithName: @"searches" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__searches count]];
        int i14;
        for (i14 = 0; i14 < [__searches count]; i14++)
        {
          [[__searches objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TwitterConfig("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",fetchUserTimeline:"];
  [ms appendFormat: @"%i", __fetchUserTimeline];
  [ms appendString: @",searches:"];
  [ms appendFormat: @"%@", __searches];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SourceUrl

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSourceUrl: (NSString *) sourceUrl source: (NSString *) source isCompetitor: (BOOL) isCompetitor twitterConfig: (TwitterConfig *) twitterConfig
{
  self = [super init];
  __sourceUrl = [sourceUrl retain_stub];
  __sourceUrl_isset = YES;
  __source = [source retain_stub];
  __source_isset = YES;
  __isCompetitor = isCompetitor;
  __isCompetitor_isset = YES;
  __twitterConfig = [twitterConfig retain_stub];
  __twitterConfig_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sourceUrl"])
  {
    __sourceUrl = [[decoder decodeObjectForKey: @"sourceUrl"] retain_stub];
    __sourceUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"isCompetitor"])
  {
    __isCompetitor = [decoder decodeBoolForKey: @"isCompetitor"];
    __isCompetitor_isset = YES;
  }
  if ([decoder containsValueForKey: @"twitterConfig"])
  {
    __twitterConfig = [[decoder decodeObjectForKey: @"twitterConfig"] retain_stub];
    __twitterConfig_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sourceUrl_isset)
  {
    [encoder encodeObject: __sourceUrl forKey: @"sourceUrl"];
  }
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__isCompetitor_isset)
  {
    [encoder encodeBool: __isCompetitor forKey: @"isCompetitor"];
  }
  if (__twitterConfig_isset)
  {
    [encoder encodeObject: __twitterConfig forKey: @"twitterConfig"];
  }
}

- (void) dealloc
{
  [__sourceUrl release_stub];
  [__source release_stub];
  [__twitterConfig release_stub];
  [super dealloc_stub];
}

- (NSString *) sourceUrl {
  return [[__sourceUrl retain_stub] autorelease_stub];
}

- (void) setSourceUrl: (NSString *) sourceUrl {
  [sourceUrl retain_stub];
  [__sourceUrl release_stub];
  __sourceUrl = sourceUrl;
  __sourceUrl_isset = YES;
}

- (BOOL) sourceUrlIsSet {
  return __sourceUrl_isset;
}

- (void) unsetSourceUrl {
  [__sourceUrl release_stub];
  __sourceUrl = nil;
  __sourceUrl_isset = NO;
}

- (NSString *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (NSString *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (BOOL) isCompetitor {
  return __isCompetitor;
}

- (void) setIsCompetitor: (BOOL) isCompetitor {
  __isCompetitor = isCompetitor;
  __isCompetitor_isset = YES;
}

- (BOOL) isCompetitorIsSet {
  return __isCompetitor_isset;
}

- (void) unsetIsCompetitor {
  __isCompetitor_isset = NO;
}

- (TwitterConfig *) twitterConfig {
  return [[__twitterConfig retain_stub] autorelease_stub];
}

- (void) setTwitterConfig: (TwitterConfig *) twitterConfig {
  [twitterConfig retain_stub];
  [__twitterConfig release_stub];
  __twitterConfig = twitterConfig;
  __twitterConfig_isset = YES;
}

- (BOOL) twitterConfigIsSet {
  return __twitterConfig_isset;
}

- (void) unsetTwitterConfig {
  [__twitterConfig release_stub];
  __twitterConfig = nil;
  __twitterConfig_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsCompetitor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          TwitterConfig *fieldValue = [[TwitterConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setTwitterConfig: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SourceUrl"];
  if (__sourceUrl_isset) {
    if (__sourceUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceUrl" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sourceUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __source];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isCompetitor_isset) {
    [outProtocol writeFieldBeginWithName: @"isCompetitor" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __isCompetitor];
    [outProtocol writeFieldEnd];
  }
  if (__twitterConfig_isset) {
    if (__twitterConfig != nil) {
      [outProtocol writeFieldBeginWithName: @"twitterConfig" type: TType_STRUCT fieldID: 4];
      [__twitterConfig write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SourceUrl("];
  [ms appendString: @"sourceUrl:"];
  [ms appendFormat: @"\"%@\"", __sourceUrl];
  [ms appendString: @",source:"];
  [ms appendFormat: @"\"%@\"", __source];
  [ms appendString: @",isCompetitor:"];
  [ms appendFormat: @"%i", __isCompetitor];
  [ms appendString: @",twitterConfig:"];
  [ms appendFormat: @"%@", __twitterConfig];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LatLng

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLat: (double) lat lng: (double) lng
{
  self = [super init];
  __lat = lat;
  __lat_isset = YES;
  __lng = lng;
  __lng_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"lat"])
  {
    __lat = [decoder decodeDoubleForKey: @"lat"];
    __lat_isset = YES;
  }
  if ([decoder containsValueForKey: @"lng"])
  {
    __lng = [decoder decodeDoubleForKey: @"lng"];
    __lng_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__lat_isset)
  {
    [encoder encodeDouble: __lat forKey: @"lat"];
  }
  if (__lng_isset)
  {
    [encoder encodeDouble: __lng forKey: @"lng"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) lat {
  return __lat;
}

- (void) setLat: (double) lat {
  __lat = lat;
  __lat_isset = YES;
}

- (BOOL) latIsSet {
  return __lat_isset;
}

- (void) unsetLat {
  __lat_isset = NO;
}

- (double) lng {
  return __lng;
}

- (void) setLng: (double) lng {
  __lng = lng;
  __lng_isset = YES;
}

- (BOOL) lngIsSet {
  return __lng_isset;
}

- (void) unsetLng {
  __lng_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLng: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LatLng"];
  if (__lat_isset) {
    [outProtocol writeFieldBeginWithName: @"lat" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __lat];
    [outProtocol writeFieldEnd];
  }
  if (__lng_isset) {
    [outProtocol writeFieldBeginWithName: @"lng" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __lng];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LatLng("];
  [ms appendString: @"lat:"];
  [ms appendFormat: @"%f", __lat];
  [ms appendString: @",lng:"];
  [ms appendFormat: @"%f", __lng];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Kiosk

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSerialNum: (NSString *) serialNum unlockKey: (NSString *) unlockKey
{
  self = [super init];
  __serialNum = [serialNum retain_stub];
  __serialNum_isset = YES;
  __unlockKey = [unlockKey retain_stub];
  __unlockKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"serialNum"])
  {
    __serialNum = [[decoder decodeObjectForKey: @"serialNum"] retain_stub];
    __serialNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"unlockKey"])
  {
    __unlockKey = [[decoder decodeObjectForKey: @"unlockKey"] retain_stub];
    __unlockKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__serialNum_isset)
  {
    [encoder encodeObject: __serialNum forKey: @"serialNum"];
  }
  if (__unlockKey_isset)
  {
    [encoder encodeObject: __unlockKey forKey: @"unlockKey"];
  }
}

- (void) dealloc
{
  [__serialNum release_stub];
  [__unlockKey release_stub];
  [super dealloc_stub];
}

- (NSString *) serialNum {
  return [[__serialNum retain_stub] autorelease_stub];
}

- (void) setSerialNum: (NSString *) serialNum {
  [serialNum retain_stub];
  [__serialNum release_stub];
  __serialNum = serialNum;
  __serialNum_isset = YES;
}

- (BOOL) serialNumIsSet {
  return __serialNum_isset;
}

- (void) unsetSerialNum {
  [__serialNum release_stub];
  __serialNum = nil;
  __serialNum_isset = NO;
}

- (NSString *) unlockKey {
  return [[__unlockKey retain_stub] autorelease_stub];
}

- (void) setUnlockKey: (NSString *) unlockKey {
  [unlockKey retain_stub];
  [__unlockKey release_stub];
  __unlockKey = unlockKey;
  __unlockKey_isset = YES;
}

- (BOOL) unlockKeyIsSet {
  return __unlockKey_isset;
}

- (void) unsetUnlockKey {
  [__unlockKey release_stub];
  __unlockKey = nil;
  __unlockKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUnlockKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Kiosk"];
  if (__serialNum_isset) {
    if (__serialNum != nil) {
      [outProtocol writeFieldBeginWithName: @"serialNum" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __serialNum];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unlockKey_isset) {
    if (__unlockKey != nil) {
      [outProtocol writeFieldBeginWithName: @"unlockKey" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __unlockKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Kiosk("];
  [ms appendString: @"serialNum:"];
  [ms appendFormat: @"\"%@\"", __serialNum];
  [ms appendString: @",unlockKey:"];
  [ms appendFormat: @"\"%@\"", __unlockKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Link

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithText: (NSString *) text linkUrl: (NSString *) linkUrl
{
  self = [super init];
  __text = [text retain_stub];
  __text_isset = YES;
  __linkUrl = [linkUrl retain_stub];
  __linkUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"linkUrl"])
  {
    __linkUrl = [[decoder decodeObjectForKey: @"linkUrl"] retain_stub];
    __linkUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__linkUrl_isset)
  {
    [encoder encodeObject: __linkUrl forKey: @"linkUrl"];
  }
}

- (void) dealloc
{
  [__text release_stub];
  [__linkUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (NSString *) linkUrl {
  return [[__linkUrl retain_stub] autorelease_stub];
}

- (void) setLinkUrl: (NSString *) linkUrl {
  [linkUrl retain_stub];
  [__linkUrl release_stub];
  __linkUrl = linkUrl;
  __linkUrl_isset = YES;
}

- (BOOL) linkUrlIsSet {
  return __linkUrl_isset;
}

- (void) unsetLinkUrl {
  [__linkUrl release_stub];
  __linkUrl = nil;
  __linkUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLinkUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Link"];
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__linkUrl_isset) {
    if (__linkUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"linkUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __linkUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Link("];
  [ms appendString: @"text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",linkUrl:"];
  [ms appendFormat: @"\"%@\"", __linkUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Photo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSource: (NSString *) source ext: (NSString *) ext
{
  self = [super init];
  __source = [source retain_stub];
  __source_isset = YES;
  __ext = [ext retain_stub];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain_stub];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__source release_stub];
  [__ext release_stub];
  [super dealloc_stub];
}

- (NSString *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (NSString *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain_stub] autorelease_stub];
}

- (void) setExt: (NSString *) ext {
  [ext retain_stub];
  [__ext release_stub];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release_stub];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Photo"];
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __source];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Photo("];
  [ms appendString: @"source:"];
  [ms appendFormat: @"\"%@\"", __source];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Publish

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEnabled: (BOOL) enabled publishDescription: (NSString *) publishDescription photos: (NSMutableArray *) photos links: (NSMutableArray *) links inheritPublish: (BOOL) inheritPublish
{
  self = [super init];
  __enabled = enabled;
  __enabled_isset = YES;
  __publishDescription = [publishDescription retain_stub];
  __publishDescription_isset = YES;
  __photos = [photos retain_stub];
  __photos_isset = YES;
  __links = [links retain_stub];
  __links_isset = YES;
  __inheritPublish = inheritPublish;
  __inheritPublish_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"enabled"])
  {
    __enabled = [decoder decodeBoolForKey: @"enabled"];
    __enabled_isset = YES;
  }
  if ([decoder containsValueForKey: @"publishDescription"])
  {
    __publishDescription = [[decoder decodeObjectForKey: @"publishDescription"] retain_stub];
    __publishDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"photos"])
  {
    __photos = [[decoder decodeObjectForKey: @"photos"] retain_stub];
    __photos_isset = YES;
  }
  if ([decoder containsValueForKey: @"links"])
  {
    __links = [[decoder decodeObjectForKey: @"links"] retain_stub];
    __links_isset = YES;
  }
  if ([decoder containsValueForKey: @"inheritPublish"])
  {
    __inheritPublish = [decoder decodeBoolForKey: @"inheritPublish"];
    __inheritPublish_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__enabled_isset)
  {
    [encoder encodeBool: __enabled forKey: @"enabled"];
  }
  if (__publishDescription_isset)
  {
    [encoder encodeObject: __publishDescription forKey: @"publishDescription"];
  }
  if (__photos_isset)
  {
    [encoder encodeObject: __photos forKey: @"photos"];
  }
  if (__links_isset)
  {
    [encoder encodeObject: __links forKey: @"links"];
  }
  if (__inheritPublish_isset)
  {
    [encoder encodeBool: __inheritPublish forKey: @"inheritPublish"];
  }
}

- (void) dealloc
{
  [__publishDescription release_stub];
  [__photos release_stub];
  [__links release_stub];
  [super dealloc_stub];
}

- (BOOL) enabled {
  return __enabled;
}

- (void) setEnabled: (BOOL) enabled {
  __enabled = enabled;
  __enabled_isset = YES;
}

- (BOOL) enabledIsSet {
  return __enabled_isset;
}

- (void) unsetEnabled {
  __enabled_isset = NO;
}

- (NSString *) publishDescription {
  return [[__publishDescription retain_stub] autorelease_stub];
}

- (void) setPublishDescription: (NSString *) publishDescription {
  [publishDescription retain_stub];
  [__publishDescription release_stub];
  __publishDescription = publishDescription;
  __publishDescription_isset = YES;
}

- (BOOL) publishDescriptionIsSet {
  return __publishDescription_isset;
}

- (void) unsetPublishDescription {
  [__publishDescription release_stub];
  __publishDescription = nil;
  __publishDescription_isset = NO;
}

- (NSMutableArray *) photos {
  return [[__photos retain_stub] autorelease_stub];
}

- (void) setPhotos: (NSMutableArray *) photos {
  [photos retain_stub];
  [__photos release_stub];
  __photos = photos;
  __photos_isset = YES;
}

- (BOOL) photosIsSet {
  return __photos_isset;
}

- (void) unsetPhotos {
  [__photos release_stub];
  __photos = nil;
  __photos_isset = NO;
}

- (NSMutableArray *) links {
  return [[__links retain_stub] autorelease_stub];
}

- (void) setLinks: (NSMutableArray *) links {
  [links retain_stub];
  [__links release_stub];
  __links = links;
  __links_isset = YES;
}

- (BOOL) linksIsSet {
  return __links_isset;
}

- (void) unsetLinks {
  [__links release_stub];
  __links = nil;
  __links_isset = NO;
}

- (BOOL) inheritPublish {
  return __inheritPublish;
}

- (void) setInheritPublish: (BOOL) inheritPublish {
  __inheritPublish = inheritPublish;
  __inheritPublish_isset = YES;
}

- (BOOL) inheritPublishIsSet {
  return __inheritPublish_isset;
}

- (void) unsetInheritPublish {
  __inheritPublish_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPublishDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Photo *_elem17 = [[Photo alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhotos: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            Link *_elem20 = [[Link alloc] init];
            [_elem20 read: inProtocol];
            [fieldValue addObject: _elem20];
            [_elem20 release_stub];
          }
          [inProtocol readListEnd];
          [self setLinks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setInheritPublish: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Publish"];
  if (__enabled_isset) {
    [outProtocol writeFieldBeginWithName: @"enabled" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __enabled];
    [outProtocol writeFieldEnd];
  }
  if (__publishDescription_isset) {
    if (__publishDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"publishDescription" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __publishDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photos_isset) {
    if (__photos != nil) {
      [outProtocol writeFieldBeginWithName: @"photos" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photos count]];
        int i22;
        for (i22 = 0; i22 < [__photos count]; i22++)
        {
          [[__photos objectAtIndex: i22] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__links_isset) {
    if (__links != nil) {
      [outProtocol writeFieldBeginWithName: @"links" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__links count]];
        int i24;
        for (i24 = 0; i24 < [__links count]; i24++)
        {
          [[__links objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__inheritPublish_isset) {
    [outProtocol writeFieldBeginWithName: @"inheritPublish" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __inheritPublish];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Publish("];
  [ms appendString: @"enabled:"];
  [ms appendFormat: @"%i", __enabled];
  [ms appendString: @",publishDescription:"];
  [ms appendFormat: @"\"%@\"", __publishDescription];
  [ms appendString: @",photos:"];
  [ms appendFormat: @"%@", __photos];
  [ms appendString: @",links:"];
  [ms appendFormat: @"%@", __links];
  [ms appendString: @",inheritPublish:"];
  [ms appendFormat: @"%i", __inheritPublish];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Question

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCategory: (NSString *) category name: (NSString *) name label: (NSString *) label
{
  self = [super init];
  __category = [category retain_stub];
  __category_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __label = [label retain_stub];
  __label_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [[decoder decodeObjectForKey: @"category"] retain_stub];
    __category_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain_stub];
    __label_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__category_isset)
  {
    [encoder encodeObject: __category forKey: @"category"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
}

- (void) dealloc
{
  [__category release_stub];
  [__name release_stub];
  [__label release_stub];
  [super dealloc_stub];
}

- (NSString *) category {
  return [[__category retain_stub] autorelease_stub];
}

- (void) setCategory: (NSString *) category {
  [category retain_stub];
  [__category release_stub];
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  [__category release_stub];
  __category = nil;
  __category_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) label {
  return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (NSString *) label {
  [label retain_stub];
  [__label release_stub];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release_stub];
  __label = nil;
  __label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCategory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Question"];
  if (__category_isset) {
    if (__category != nil) {
      [outProtocol writeFieldBeginWithName: @"category" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __category];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Question("];
  [ms appendString: @"category:"];
  [ms appendFormat: @"\"%@\"", __category];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReviewTemplate

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithQuestions: (NSMutableArray *) questions inheritReviewTemplate: (BOOL) inheritReviewTemplate requireAck: (BOOL) requireAck
{
  self = [super init];
  __questions = [questions retain_stub];
  __questions_isset = YES;
  __inheritReviewTemplate = inheritReviewTemplate;
  __inheritReviewTemplate_isset = YES;
  __requireAck = requireAck;
  __requireAck_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"questions"])
  {
    __questions = [[decoder decodeObjectForKey: @"questions"] retain_stub];
    __questions_isset = YES;
  }
  if ([decoder containsValueForKey: @"inheritReviewTemplate"])
  {
    __inheritReviewTemplate = [decoder decodeBoolForKey: @"inheritReviewTemplate"];
    __inheritReviewTemplate_isset = YES;
  }
  if ([decoder containsValueForKey: @"requireAck"])
  {
    __requireAck = [decoder decodeBoolForKey: @"requireAck"];
    __requireAck_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__questions_isset)
  {
    [encoder encodeObject: __questions forKey: @"questions"];
  }
  if (__inheritReviewTemplate_isset)
  {
    [encoder encodeBool: __inheritReviewTemplate forKey: @"inheritReviewTemplate"];
  }
  if (__requireAck_isset)
  {
    [encoder encodeBool: __requireAck forKey: @"requireAck"];
  }
}

- (void) dealloc
{
  [__questions release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) questions {
  return [[__questions retain_stub] autorelease_stub];
}

- (void) setQuestions: (NSMutableArray *) questions {
  [questions retain_stub];
  [__questions release_stub];
  __questions = questions;
  __questions_isset = YES;
}

- (BOOL) questionsIsSet {
  return __questions_isset;
}

- (void) unsetQuestions {
  [__questions release_stub];
  __questions = nil;
  __questions_isset = NO;
}

- (BOOL) inheritReviewTemplate {
  return __inheritReviewTemplate;
}

- (void) setInheritReviewTemplate: (BOOL) inheritReviewTemplate {
  __inheritReviewTemplate = inheritReviewTemplate;
  __inheritReviewTemplate_isset = YES;
}

- (BOOL) inheritReviewTemplateIsSet {
  return __inheritReviewTemplate_isset;
}

- (void) unsetInheritReviewTemplate {
  __inheritReviewTemplate_isset = NO;
}

- (BOOL) requireAck {
  return __requireAck;
}

- (void) setRequireAck: (BOOL) requireAck {
  __requireAck = requireAck;
  __requireAck_isset = YES;
}

- (BOOL) requireAckIsSet {
  return __requireAck_isset;
}

- (void) unsetRequireAck {
  __requireAck_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            Question *_elem27 = [[Question alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setQuestions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setInheritReviewTemplate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRequireAck: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReviewTemplate"];
  if (__questions_isset) {
    if (__questions != nil) {
      [outProtocol writeFieldBeginWithName: @"questions" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__questions count]];
        int i29;
        for (i29 = 0; i29 < [__questions count]; i29++)
        {
          [[__questions objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__inheritReviewTemplate_isset) {
    [outProtocol writeFieldBeginWithName: @"inheritReviewTemplate" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __inheritReviewTemplate];
    [outProtocol writeFieldEnd];
  }
  if (__requireAck_isset) {
    [outProtocol writeFieldBeginWithName: @"requireAck" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __requireAck];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReviewTemplate("];
  [ms appendString: @"questions:"];
  [ms appendFormat: @"%@", __questions];
  [ms appendString: @",inheritReviewTemplate:"];
  [ms appendFormat: @"%i", __inheritReviewTemplate];
  [ms appendString: @",requireAck:"];
  [ms appendFormat: @"%i", __requireAck];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EmailUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name email: (NSString *) email
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__email release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmailUser"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EmailUser("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Address

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLine1: (NSString *) line1 line2: (NSString *) line2 state: (NSString *) state city: (NSString *) city zipcode: (NSString *) zipcode country: (NSString *) country
{
  self = [super init];
  __line1 = [line1 retain_stub];
  __line1_isset = YES;
  __line2 = [line2 retain_stub];
  __line2_isset = YES;
  __state = [state retain_stub];
  __state_isset = YES;
  __city = [city retain_stub];
  __city_isset = YES;
  __zipcode = [zipcode retain_stub];
  __zipcode_isset = YES;
  __country = [country retain_stub];
  __country_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"line1"])
  {
    __line1 = [[decoder decodeObjectForKey: @"line1"] retain_stub];
    __line1_isset = YES;
  }
  if ([decoder containsValueForKey: @"line2"])
  {
    __line2 = [[decoder decodeObjectForKey: @"line2"] retain_stub];
    __line2_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [[decoder decodeObjectForKey: @"state"] retain_stub];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [[decoder decodeObjectForKey: @"city"] retain_stub];
    __city_isset = YES;
  }
  if ([decoder containsValueForKey: @"zipcode"])
  {
    __zipcode = [[decoder decodeObjectForKey: @"zipcode"] retain_stub];
    __zipcode_isset = YES;
  }
  if ([decoder containsValueForKey: @"country"])
  {
    __country = [[decoder decodeObjectForKey: @"country"] retain_stub];
    __country_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__line1_isset)
  {
    [encoder encodeObject: __line1 forKey: @"line1"];
  }
  if (__line2_isset)
  {
    [encoder encodeObject: __line2 forKey: @"line2"];
  }
  if (__state_isset)
  {
    [encoder encodeObject: __state forKey: @"state"];
  }
  if (__city_isset)
  {
    [encoder encodeObject: __city forKey: @"city"];
  }
  if (__zipcode_isset)
  {
    [encoder encodeObject: __zipcode forKey: @"zipcode"];
  }
  if (__country_isset)
  {
    [encoder encodeObject: __country forKey: @"country"];
  }
}

- (void) dealloc
{
  [__line1 release_stub];
  [__line2 release_stub];
  [__state release_stub];
  [__city release_stub];
  [__zipcode release_stub];
  [__country release_stub];
  [super dealloc_stub];
}

- (NSString *) line1 {
  return [[__line1 retain_stub] autorelease_stub];
}

- (void) setLine1: (NSString *) line1 {
  [line1 retain_stub];
  [__line1 release_stub];
  __line1 = line1;
  __line1_isset = YES;
}

- (BOOL) line1IsSet {
  return __line1_isset;
}

- (void) unsetLine1 {
  [__line1 release_stub];
  __line1 = nil;
  __line1_isset = NO;
}

- (NSString *) line2 {
  return [[__line2 retain_stub] autorelease_stub];
}

- (void) setLine2: (NSString *) line2 {
  [line2 retain_stub];
  [__line2 release_stub];
  __line2 = line2;
  __line2_isset = YES;
}

- (BOOL) line2IsSet {
  return __line2_isset;
}

- (void) unsetLine2 {
  [__line2 release_stub];
  __line2 = nil;
  __line2_isset = NO;
}

- (NSString *) state {
  return [[__state retain_stub] autorelease_stub];
}

- (void) setState: (NSString *) state {
  [state retain_stub];
  [__state release_stub];
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  [__state release_stub];
  __state = nil;
  __state_isset = NO;
}

- (NSString *) city {
  return [[__city retain_stub] autorelease_stub];
}

- (void) setCity: (NSString *) city {
  [city retain_stub];
  [__city release_stub];
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  [__city release_stub];
  __city = nil;
  __city_isset = NO;
}

- (NSString *) zipcode {
  return [[__zipcode retain_stub] autorelease_stub];
}

- (void) setZipcode: (NSString *) zipcode {
  [zipcode retain_stub];
  [__zipcode release_stub];
  __zipcode = zipcode;
  __zipcode_isset = YES;
}

- (BOOL) zipcodeIsSet {
  return __zipcode_isset;
}

- (void) unsetZipcode {
  [__zipcode release_stub];
  __zipcode = nil;
  __zipcode_isset = NO;
}

- (NSString *) country {
  return [[__country retain_stub] autorelease_stub];
}

- (void) setCountry: (NSString *) country {
  [country retain_stub];
  [__country release_stub];
  __country = country;
  __country_isset = YES;
}

- (BOOL) countryIsSet {
  return __country_isset;
}

- (void) unsetCountry {
  [__country release_stub];
  __country = nil;
  __country_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLine1: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLine2: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setZipcode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Address"];
  if (__line1_isset) {
    if (__line1 != nil) {
      [outProtocol writeFieldBeginWithName: @"line1" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __line1];
      [outProtocol writeFieldEnd];
    }
  }
  if (__line2_isset) {
    if (__line2 != nil) {
      [outProtocol writeFieldBeginWithName: @"line2" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __line2];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    if (__state != nil) {
      [outProtocol writeFieldBeginWithName: @"state" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __state];
      [outProtocol writeFieldEnd];
    }
  }
  if (__city_isset) {
    if (__city != nil) {
      [outProtocol writeFieldBeginWithName: @"city" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __city];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zipcode_isset) {
    if (__zipcode != nil) {
      [outProtocol writeFieldBeginWithName: @"zipcode" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __zipcode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__country_isset) {
    if (__country != nil) {
      [outProtocol writeFieldBeginWithName: @"country" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __country];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Address("];
  [ms appendString: @"line1:"];
  [ms appendFormat: @"\"%@\"", __line1];
  [ms appendString: @",line2:"];
  [ms appendFormat: @"\"%@\"", __line2];
  [ms appendString: @",state:"];
  [ms appendFormat: @"\"%@\"", __state];
  [ms appendString: @",city:"];
  [ms appendFormat: @"\"%@\"", __city];
  [ms appendString: @",zipcode:"];
  [ms appendFormat: @"\"%@\"", __zipcode];
  [ms appendString: @",country:"];
  [ms appendFormat: @"\"%@\"", __country];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Alternatives

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNames: (NSMutableArray *) names addresses: (NSMutableArray *) addresses phones: (NSMutableArray *) phones webUrls: (NSMutableArray *) webUrls
{
  self = [super init];
  __names = [names retain_stub];
  __names_isset = YES;
  __addresses = [addresses retain_stub];
  __addresses_isset = YES;
  __phones = [phones retain_stub];
  __phones_isset = YES;
  __webUrls = [webUrls retain_stub];
  __webUrls_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"names"])
  {
    __names = [[decoder decodeObjectForKey: @"names"] retain_stub];
    __names_isset = YES;
  }
  if ([decoder containsValueForKey: @"addresses"])
  {
    __addresses = [[decoder decodeObjectForKey: @"addresses"] retain_stub];
    __addresses_isset = YES;
  }
  if ([decoder containsValueForKey: @"phones"])
  {
    __phones = [[decoder decodeObjectForKey: @"phones"] retain_stub];
    __phones_isset = YES;
  }
  if ([decoder containsValueForKey: @"webUrls"])
  {
    __webUrls = [[decoder decodeObjectForKey: @"webUrls"] retain_stub];
    __webUrls_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__names_isset)
  {
    [encoder encodeObject: __names forKey: @"names"];
  }
  if (__addresses_isset)
  {
    [encoder encodeObject: __addresses forKey: @"addresses"];
  }
  if (__phones_isset)
  {
    [encoder encodeObject: __phones forKey: @"phones"];
  }
  if (__webUrls_isset)
  {
    [encoder encodeObject: __webUrls forKey: @"webUrls"];
  }
}

- (void) dealloc
{
  [__names release_stub];
  [__addresses release_stub];
  [__phones release_stub];
  [__webUrls release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) names {
  return [[__names retain_stub] autorelease_stub];
}

- (void) setNames: (NSMutableArray *) names {
  [names retain_stub];
  [__names release_stub];
  __names = names;
  __names_isset = YES;
}

- (BOOL) namesIsSet {
  return __names_isset;
}

- (void) unsetNames {
  [__names release_stub];
  __names = nil;
  __names_isset = NO;
}

- (NSMutableArray *) addresses {
  return [[__addresses retain_stub] autorelease_stub];
}

- (void) setAddresses: (NSMutableArray *) addresses {
  [addresses retain_stub];
  [__addresses release_stub];
  __addresses = addresses;
  __addresses_isset = YES;
}

- (BOOL) addressesIsSet {
  return __addresses_isset;
}

- (void) unsetAddresses {
  [__addresses release_stub];
  __addresses = nil;
  __addresses_isset = NO;
}

- (NSMutableArray *) phones {
  return [[__phones retain_stub] autorelease_stub];
}

- (void) setPhones: (NSMutableArray *) phones {
  [phones retain_stub];
  [__phones release_stub];
  __phones = phones;
  __phones_isset = YES;
}

- (BOOL) phonesIsSet {
  return __phones_isset;
}

- (void) unsetPhones {
  [__phones release_stub];
  __phones = nil;
  __phones_isset = NO;
}

- (NSMutableArray *) webUrls {
  return [[__webUrls retain_stub] autorelease_stub];
}

- (void) setWebUrls: (NSMutableArray *) webUrls {
  [webUrls retain_stub];
  [__webUrls release_stub];
  __webUrls = webUrls;
  __webUrls_isset = YES;
}

- (BOOL) webUrlsIsSet {
  return __webUrls_isset;
}

- (void) unsetWebUrls {
  [__webUrls release_stub];
  __webUrls = nil;
  __webUrls_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32 = [inProtocol readString];
            [fieldValue addObject: _elem32];
          }
          [inProtocol readListEnd];
          [self setNames: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size33;
          [inProtocol readListBeginReturningElementType: NULL size: &_size33];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size33];
          int _i34;
          for (_i34 = 0; _i34 < _size33; ++_i34)
          {
            Address *_elem35 = [[Address alloc] init];
            [_elem35 read: inProtocol];
            [fieldValue addObject: _elem35];
            [_elem35 release_stub];
          }
          [inProtocol readListEnd];
          [self setAddresses: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size36;
          [inProtocol readListBeginReturningElementType: NULL size: &_size36];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size36];
          int _i37;
          for (_i37 = 0; _i37 < _size36; ++_i37)
          {
            NSString * _elem38 = [inProtocol readString];
            [fieldValue addObject: _elem38];
          }
          [inProtocol readListEnd];
          [self setPhones: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size39;
          [inProtocol readListBeginReturningElementType: NULL size: &_size39];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size39];
          int _i40;
          for (_i40 = 0; _i40 < _size39; ++_i40)
          {
            NSString * _elem41 = [inProtocol readString];
            [fieldValue addObject: _elem41];
          }
          [inProtocol readListEnd];
          [self setWebUrls: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Alternatives"];
  if (__names_isset) {
    if (__names != nil) {
      [outProtocol writeFieldBeginWithName: @"names" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__names count]];
        int i43;
        for (i43 = 0; i43 < [__names count]; i43++)
        {
          [outProtocol writeString: [__names objectAtIndex: i43]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__addresses_isset) {
    if (__addresses != nil) {
      [outProtocol writeFieldBeginWithName: @"addresses" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__addresses count]];
        int i45;
        for (i45 = 0; i45 < [__addresses count]; i45++)
        {
          [[__addresses objectAtIndex: i45] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__phones_isset) {
    if (__phones != nil) {
      [outProtocol writeFieldBeginWithName: @"phones" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__phones count]];
        int i47;
        for (i47 = 0; i47 < [__phones count]; i47++)
        {
          [outProtocol writeString: [__phones objectAtIndex: i47]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__webUrls_isset) {
    if (__webUrls != nil) {
      [outProtocol writeFieldBeginWithName: @"webUrls" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__webUrls count]];
        int i49;
        for (i49 = 0; i49 < [__webUrls count]; i49++)
        {
          [outProtocol writeString: [__webUrls objectAtIndex: i49]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Alternatives("];
  [ms appendString: @"names:"];
  [ms appendFormat: @"%@", __names];
  [ms appendString: @",addresses:"];
  [ms appendFormat: @"%@", __addresses];
  [ms appendString: @",phones:"];
  [ms appendFormat: @"%@", __phones];
  [ms appendString: @",webUrls:"];
  [ms appendFormat: @"%@", __webUrls];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Location

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id code: (NSString *) code name: (NSString *) name longName: (NSString *) longName tenantID: (TenantID) tenantID address: (Address *) address phone: (NSString *) phone web: (NSString *) web manager: (NSString *) manager managerEmail: (NSString *) managerEmail emails: (NSMutableArray *) emails attributes: (NSMutableArray *) attributes sourceUrls: (NSMutableArray *) sourceUrls nextExpressions: (NSMutableDictionary *) nextExpressions latlng: (LatLng *) latlng kiosk: (Kiosk *) kiosk locationKey: (NSString *) locationKey publishUrl: (NSString *) publishUrl publish: (Publish *) publish reviewTemplate: (ReviewTemplate *) reviewTemplate emailFrom: (EmailUser *) emailFrom alternatives: (Alternatives *) alternatives
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __longName = [longName retain_stub];
  __longName_isset = YES;
  __tenantID = tenantID;
  __tenantID_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __web = [web retain_stub];
  __web_isset = YES;
  __manager = [manager retain_stub];
  __manager_isset = YES;
  __managerEmail = [managerEmail retain_stub];
  __managerEmail_isset = YES;
  __emails = [emails retain_stub];
  __emails_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __sourceUrls = [sourceUrls retain_stub];
  __sourceUrls_isset = YES;
  __nextExpressions = [nextExpressions retain_stub];
  __nextExpressions_isset = YES;
  __latlng = [latlng retain_stub];
  __latlng_isset = YES;
  __kiosk = [kiosk retain_stub];
  __kiosk_isset = YES;
  __locationKey = [locationKey retain_stub];
  __locationKey_isset = YES;
  __publishUrl = [publishUrl retain_stub];
  __publishUrl_isset = YES;
  __publish = [publish retain_stub];
  __publish_isset = YES;
  __reviewTemplate = [reviewTemplate retain_stub];
  __reviewTemplate_isset = YES;
  __emailFrom = [emailFrom retain_stub];
  __emailFrom_isset = YES;
  __alternatives = [alternatives retain_stub];
  __alternatives_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"longName"])
  {
    __longName = [[decoder decodeObjectForKey: @"longName"] retain_stub];
    __longName_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantID"])
  {
    __tenantID = [decoder decodeInt64ForKey: @"tenantID"];
    __tenantID_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"web"])
  {
    __web = [[decoder decodeObjectForKey: @"web"] retain_stub];
    __web_isset = YES;
  }
  if ([decoder containsValueForKey: @"manager"])
  {
    __manager = [[decoder decodeObjectForKey: @"manager"] retain_stub];
    __manager_isset = YES;
  }
  if ([decoder containsValueForKey: @"managerEmail"])
  {
    __managerEmail = [[decoder decodeObjectForKey: @"managerEmail"] retain_stub];
    __managerEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"emails"])
  {
    __emails = [[decoder decodeObjectForKey: @"emails"] retain_stub];
    __emails_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceUrls"])
  {
    __sourceUrls = [[decoder decodeObjectForKey: @"sourceUrls"] retain_stub];
    __sourceUrls_isset = YES;
  }
  if ([decoder containsValueForKey: @"nextExpressions"])
  {
    __nextExpressions = [[decoder decodeObjectForKey: @"nextExpressions"] retain_stub];
    __nextExpressions_isset = YES;
  }
  if ([decoder containsValueForKey: @"latlng"])
  {
    __latlng = [[decoder decodeObjectForKey: @"latlng"] retain_stub];
    __latlng_isset = YES;
  }
  if ([decoder containsValueForKey: @"kiosk"])
  {
    __kiosk = [[decoder decodeObjectForKey: @"kiosk"] retain_stub];
    __kiosk_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationKey"])
  {
    __locationKey = [[decoder decodeObjectForKey: @"locationKey"] retain_stub];
    __locationKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"publishUrl"])
  {
    __publishUrl = [[decoder decodeObjectForKey: @"publishUrl"] retain_stub];
    __publishUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"publish"])
  {
    __publish = [[decoder decodeObjectForKey: @"publish"] retain_stub];
    __publish_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewTemplate"])
  {
    __reviewTemplate = [[decoder decodeObjectForKey: @"reviewTemplate"] retain_stub];
    __reviewTemplate_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailFrom"])
  {
    __emailFrom = [[decoder decodeObjectForKey: @"emailFrom"] retain_stub];
    __emailFrom_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternatives"])
  {
    __alternatives = [[decoder decodeObjectForKey: @"alternatives"] retain_stub];
    __alternatives_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__longName_isset)
  {
    [encoder encodeObject: __longName forKey: @"longName"];
  }
  if (__tenantID_isset)
  {
    [encoder encodeInt64: __tenantID forKey: @"tenantID"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__web_isset)
  {
    [encoder encodeObject: __web forKey: @"web"];
  }
  if (__manager_isset)
  {
    [encoder encodeObject: __manager forKey: @"manager"];
  }
  if (__managerEmail_isset)
  {
    [encoder encodeObject: __managerEmail forKey: @"managerEmail"];
  }
  if (__emails_isset)
  {
    [encoder encodeObject: __emails forKey: @"emails"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__sourceUrls_isset)
  {
    [encoder encodeObject: __sourceUrls forKey: @"sourceUrls"];
  }
  if (__nextExpressions_isset)
  {
    [encoder encodeObject: __nextExpressions forKey: @"nextExpressions"];
  }
  if (__latlng_isset)
  {
    [encoder encodeObject: __latlng forKey: @"latlng"];
  }
  if (__kiosk_isset)
  {
    [encoder encodeObject: __kiosk forKey: @"kiosk"];
  }
  if (__locationKey_isset)
  {
    [encoder encodeObject: __locationKey forKey: @"locationKey"];
  }
  if (__publishUrl_isset)
  {
    [encoder encodeObject: __publishUrl forKey: @"publishUrl"];
  }
  if (__publish_isset)
  {
    [encoder encodeObject: __publish forKey: @"publish"];
  }
  if (__reviewTemplate_isset)
  {
    [encoder encodeObject: __reviewTemplate forKey: @"reviewTemplate"];
  }
  if (__emailFrom_isset)
  {
    [encoder encodeObject: __emailFrom forKey: @"emailFrom"];
  }
  if (__alternatives_isset)
  {
    [encoder encodeObject: __alternatives forKey: @"alternatives"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__code release_stub];
  [__name release_stub];
  [__longName release_stub];
  [__address release_stub];
  [__phone release_stub];
  [__web release_stub];
  [__manager release_stub];
  [__managerEmail release_stub];
  [__emails release_stub];
  [__attributes release_stub];
  [__sourceUrls release_stub];
  [__nextExpressions release_stub];
  [__latlng release_stub];
  [__kiosk release_stub];
  [__locationKey release_stub];
  [__publishUrl release_stub];
  [__publish release_stub];
  [__reviewTemplate release_stub];
  [__emailFrom release_stub];
  [__alternatives release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) longName {
  return [[__longName retain_stub] autorelease_stub];
}

- (void) setLongName: (NSString *) longName {
  [longName retain_stub];
  [__longName release_stub];
  __longName = longName;
  __longName_isset = YES;
}

- (BOOL) longNameIsSet {
  return __longName_isset;
}

- (void) unsetLongName {
  [__longName release_stub];
  __longName = nil;
  __longName_isset = NO;
}

- (int64_t) tenantID {
  return __tenantID;
}

- (void) setTenantID: (int64_t) tenantID {
  __tenantID = tenantID;
  __tenantID_isset = YES;
}

- (BOOL) tenantIDIsSet {
  return __tenantID_isset;
}

- (void) unsetTenantID {
  __tenantID_isset = NO;
}

- (Address *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (Address *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) web {
  return [[__web retain_stub] autorelease_stub];
}

- (void) setWeb: (NSString *) web {
  [web retain_stub];
  [__web release_stub];
  __web = web;
  __web_isset = YES;
}

- (BOOL) webIsSet {
  return __web_isset;
}

- (void) unsetWeb {
  [__web release_stub];
  __web = nil;
  __web_isset = NO;
}

- (NSString *) manager {
  return [[__manager retain_stub] autorelease_stub];
}

- (void) setManager: (NSString *) manager {
  [manager retain_stub];
  [__manager release_stub];
  __manager = manager;
  __manager_isset = YES;
}

- (BOOL) managerIsSet {
  return __manager_isset;
}

- (void) unsetManager {
  [__manager release_stub];
  __manager = nil;
  __manager_isset = NO;
}

- (NSString *) managerEmail {
  return [[__managerEmail retain_stub] autorelease_stub];
}

- (void) setManagerEmail: (NSString *) managerEmail {
  [managerEmail retain_stub];
  [__managerEmail release_stub];
  __managerEmail = managerEmail;
  __managerEmail_isset = YES;
}

- (BOOL) managerEmailIsSet {
  return __managerEmail_isset;
}

- (void) unsetManagerEmail {
  [__managerEmail release_stub];
  __managerEmail = nil;
  __managerEmail_isset = NO;
}

- (NSMutableArray *) emails {
  return [[__emails retain_stub] autorelease_stub];
}

- (void) setEmails: (NSMutableArray *) emails {
  [emails retain_stub];
  [__emails release_stub];
  __emails = emails;
  __emails_isset = YES;
}

- (BOOL) emailsIsSet {
  return __emails_isset;
}

- (void) unsetEmails {
  [__emails release_stub];
  __emails = nil;
  __emails_isset = NO;
}

- (NSMutableArray *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (NSMutableArray *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (NSMutableArray *) sourceUrls {
  return [[__sourceUrls retain_stub] autorelease_stub];
}

- (void) setSourceUrls: (NSMutableArray *) sourceUrls {
  [sourceUrls retain_stub];
  [__sourceUrls release_stub];
  __sourceUrls = sourceUrls;
  __sourceUrls_isset = YES;
}

- (BOOL) sourceUrlsIsSet {
  return __sourceUrls_isset;
}

- (void) unsetSourceUrls {
  [__sourceUrls release_stub];
  __sourceUrls = nil;
  __sourceUrls_isset = NO;
}

- (NSMutableDictionary *) nextExpressions {
  return [[__nextExpressions retain_stub] autorelease_stub];
}

- (void) setNextExpressions: (NSMutableDictionary *) nextExpressions {
  [nextExpressions retain_stub];
  [__nextExpressions release_stub];
  __nextExpressions = nextExpressions;
  __nextExpressions_isset = YES;
}

- (BOOL) nextExpressionsIsSet {
  return __nextExpressions_isset;
}

- (void) unsetNextExpressions {
  [__nextExpressions release_stub];
  __nextExpressions = nil;
  __nextExpressions_isset = NO;
}

- (LatLng *) latlng {
  return [[__latlng retain_stub] autorelease_stub];
}

- (void) setLatlng: (LatLng *) latlng {
  [latlng retain_stub];
  [__latlng release_stub];
  __latlng = latlng;
  __latlng_isset = YES;
}

- (BOOL) latlngIsSet {
  return __latlng_isset;
}

- (void) unsetLatlng {
  [__latlng release_stub];
  __latlng = nil;
  __latlng_isset = NO;
}

- (Kiosk *) kiosk {
  return [[__kiosk retain_stub] autorelease_stub];
}

- (void) setKiosk: (Kiosk *) kiosk {
  [kiosk retain_stub];
  [__kiosk release_stub];
  __kiosk = kiosk;
  __kiosk_isset = YES;
}

- (BOOL) kioskIsSet {
  return __kiosk_isset;
}

- (void) unsetKiosk {
  [__kiosk release_stub];
  __kiosk = nil;
  __kiosk_isset = NO;
}

- (NSString *) locationKey {
  return [[__locationKey retain_stub] autorelease_stub];
}

- (void) setLocationKey: (NSString *) locationKey {
  [locationKey retain_stub];
  [__locationKey release_stub];
  __locationKey = locationKey;
  __locationKey_isset = YES;
}

- (BOOL) locationKeyIsSet {
  return __locationKey_isset;
}

- (void) unsetLocationKey {
  [__locationKey release_stub];
  __locationKey = nil;
  __locationKey_isset = NO;
}

- (NSString *) publishUrl {
  return [[__publishUrl retain_stub] autorelease_stub];
}

- (void) setPublishUrl: (NSString *) publishUrl {
  [publishUrl retain_stub];
  [__publishUrl release_stub];
  __publishUrl = publishUrl;
  __publishUrl_isset = YES;
}

- (BOOL) publishUrlIsSet {
  return __publishUrl_isset;
}

- (void) unsetPublishUrl {
  [__publishUrl release_stub];
  __publishUrl = nil;
  __publishUrl_isset = NO;
}

- (Publish *) publish {
  return [[__publish retain_stub] autorelease_stub];
}

- (void) setPublish: (Publish *) publish {
  [publish retain_stub];
  [__publish release_stub];
  __publish = publish;
  __publish_isset = YES;
}

- (BOOL) publishIsSet {
  return __publish_isset;
}

- (void) unsetPublish {
  [__publish release_stub];
  __publish = nil;
  __publish_isset = NO;
}

- (ReviewTemplate *) reviewTemplate {
  return [[__reviewTemplate retain_stub] autorelease_stub];
}

- (void) setReviewTemplate: (ReviewTemplate *) reviewTemplate {
  [reviewTemplate retain_stub];
  [__reviewTemplate release_stub];
  __reviewTemplate = reviewTemplate;
  __reviewTemplate_isset = YES;
}

- (BOOL) reviewTemplateIsSet {
  return __reviewTemplate_isset;
}

- (void) unsetReviewTemplate {
  [__reviewTemplate release_stub];
  __reviewTemplate = nil;
  __reviewTemplate_isset = NO;
}

- (EmailUser *) emailFrom {
  return [[__emailFrom retain_stub] autorelease_stub];
}

- (void) setEmailFrom: (EmailUser *) emailFrom {
  [emailFrom retain_stub];
  [__emailFrom release_stub];
  __emailFrom = emailFrom;
  __emailFrom_isset = YES;
}

- (BOOL) emailFromIsSet {
  return __emailFrom_isset;
}

- (void) unsetEmailFrom {
  [__emailFrom release_stub];
  __emailFrom = nil;
  __emailFrom_isset = NO;
}

- (Alternatives *) alternatives {
  return [[__alternatives retain_stub] autorelease_stub];
}

- (void) setAlternatives: (Alternatives *) alternatives {
  [alternatives retain_stub];
  [__alternatives release_stub];
  __alternatives = alternatives;
  __alternatives_isset = YES;
}

- (BOOL) alternativesIsSet {
  return __alternatives_isset;
}

- (void) unsetAlternatives {
  [__alternatives release_stub];
  __alternatives = nil;
  __alternatives_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLongName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTenantID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          Address *fieldValue = [[Address alloc] init];
          [fieldValue read: inProtocol];
          [self setAddress: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeb: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManager: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setManagerEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            NSString * _elem52 = [inProtocol readString];
            [fieldValue addObject: _elem52];
          }
          [inProtocol readListEnd];
          [self setEmails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size53;
          [inProtocol readListBeginReturningElementType: NULL size: &_size53];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size53];
          int _i54;
          for (_i54 = 0; _i54 < _size53; ++_i54)
          {
            Attribute *_elem55 = [[Attribute alloc] init];
            [_elem55 read: inProtocol];
            [fieldValue addObject: _elem55];
            [_elem55 release_stub];
          }
          [inProtocol readListEnd];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size56;
          [inProtocol readListBeginReturningElementType: NULL size: &_size56];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size56];
          int _i57;
          for (_i57 = 0; _i57 < _size56; ++_i57)
          {
            SourceUrl *_elem58 = [[SourceUrl alloc] init];
            [_elem58 read: inProtocol];
            [fieldValue addObject: _elem58];
            [_elem58 release_stub];
          }
          [inProtocol readListEnd];
          [self setSourceUrls: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_MAP) {
          int _size59;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size59];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size59];
          int _i60;
          for (_i60 = 0; _i60 < _size59; ++_i60)
          {
            NSString * _key61 = [inProtocol readString];
            NSString * _val62 = [inProtocol readString];
            [fieldValue setObject: _val62 forKey: _key61];
          }
          [inProtocol readMapEnd];
          [self setNextExpressions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          LatLng *fieldValue = [[LatLng alloc] init];
          [fieldValue read: inProtocol];
          [self setLatlng: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRUCT) {
          Kiosk *fieldValue = [[Kiosk alloc] init];
          [fieldValue read: inProtocol];
          [self setKiosk: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPublishUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRUCT) {
          Publish *fieldValue = [[Publish alloc] init];
          [fieldValue read: inProtocol];
          [self setPublish: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRUCT) {
          ReviewTemplate *fieldValue = [[ReviewTemplate alloc] init];
          [fieldValue read: inProtocol];
          [self setReviewTemplate: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRUCT) {
          EmailUser *fieldValue = [[EmailUser alloc] init];
          [fieldValue read: inProtocol];
          [self setEmailFrom: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRUCT) {
          Alternatives *fieldValue = [[Alternatives alloc] init];
          [fieldValue read: inProtocol];
          [self setAlternatives: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Location"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__longName_isset) {
    if (__longName != nil) {
      [outProtocol writeFieldBeginWithName: @"longName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __longName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tenantID_isset) {
    [outProtocol writeFieldBeginWithName: @"tenantID" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __tenantID];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRUCT fieldID: 6];
      [__address write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__web_isset) {
    if (__web != nil) {
      [outProtocol writeFieldBeginWithName: @"web" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __web];
      [outProtocol writeFieldEnd];
    }
  }
  if (__manager_isset) {
    if (__manager != nil) {
      [outProtocol writeFieldBeginWithName: @"manager" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __manager];
      [outProtocol writeFieldEnd];
    }
  }
  if (__managerEmail_isset) {
    if (__managerEmail != nil) {
      [outProtocol writeFieldBeginWithName: @"managerEmail" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __managerEmail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__emails_isset) {
    if (__emails != nil) {
      [outProtocol writeFieldBeginWithName: @"emails" type: TType_LIST fieldID: 11];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__emails count]];
        int i64;
        for (i64 = 0; i64 < [__emails count]; i64++)
        {
          [outProtocol writeString: [__emails objectAtIndex: i64]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__attributes count]];
        int i66;
        for (i66 = 0; i66 < [__attributes count]; i66++)
        {
          [[__attributes objectAtIndex: i66] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceUrls_isset) {
    if (__sourceUrls != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceUrls" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__sourceUrls count]];
        int i68;
        for (i68 = 0; i68 < [__sourceUrls count]; i68++)
        {
          [[__sourceUrls objectAtIndex: i68] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__nextExpressions_isset) {
    if (__nextExpressions != nil) {
      [outProtocol writeFieldBeginWithName: @"nextExpressions" type: TType_MAP fieldID: 14];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__nextExpressions count]];
        NSEnumerator * _iter69 = [__nextExpressions keyEnumerator];
        id key70;
        while ((key70 = [_iter69 nextObject]))
        {
          [outProtocol writeString: key70];
          [outProtocol writeString: [__nextExpressions objectForKey: key70]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__latlng_isset) {
    if (__latlng != nil) {
      [outProtocol writeFieldBeginWithName: @"latlng" type: TType_STRUCT fieldID: 15];
      [__latlng write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__kiosk_isset) {
    if (__kiosk != nil) {
      [outProtocol writeFieldBeginWithName: @"kiosk" type: TType_STRUCT fieldID: 16];
      [__kiosk write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationKey_isset) {
    if (__locationKey != nil) {
      [outProtocol writeFieldBeginWithName: @"locationKey" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __locationKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publishUrl_isset) {
    if (__publishUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"publishUrl" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __publishUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publish_isset) {
    if (__publish != nil) {
      [outProtocol writeFieldBeginWithName: @"publish" type: TType_STRUCT fieldID: 19];
      [__publish write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewTemplate_isset) {
    if (__reviewTemplate != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewTemplate" type: TType_STRUCT fieldID: 20];
      [__reviewTemplate write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__emailFrom_isset) {
    if (__emailFrom != nil) {
      [outProtocol writeFieldBeginWithName: @"emailFrom" type: TType_STRUCT fieldID: 21];
      [__emailFrom write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__alternatives_isset) {
    if (__alternatives != nil) {
      [outProtocol writeFieldBeginWithName: @"alternatives" type: TType_STRUCT fieldID: 22];
      [__alternatives write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Location("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",longName:"];
  [ms appendFormat: @"\"%@\"", __longName];
  [ms appendString: @",tenantID:"];
  [ms appendFormat: @"%qi", __tenantID];
  [ms appendString: @",address:"];
  [ms appendFormat: @"%@", __address];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",web:"];
  [ms appendFormat: @"\"%@\"", __web];
  [ms appendString: @",manager:"];
  [ms appendFormat: @"\"%@\"", __manager];
  [ms appendString: @",managerEmail:"];
  [ms appendFormat: @"\"%@\"", __managerEmail];
  [ms appendString: @",emails:"];
  [ms appendFormat: @"%@", __emails];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",sourceUrls:"];
  [ms appendFormat: @"%@", __sourceUrls];
  [ms appendString: @",nextExpressions:"];
  [ms appendFormat: @"%@", __nextExpressions];
  [ms appendString: @",latlng:"];
  [ms appendFormat: @"%@", __latlng];
  [ms appendString: @",kiosk:"];
  [ms appendFormat: @"%@", __kiosk];
  [ms appendString: @",locationKey:"];
  [ms appendFormat: @"\"%@\"", __locationKey];
  [ms appendString: @",publishUrl:"];
  [ms appendFormat: @"\"%@\"", __publishUrl];
  [ms appendString: @",publish:"];
  [ms appendFormat: @"%@", __publish];
  [ms appendString: @",reviewTemplate:"];
  [ms appendFormat: @"%@", __reviewTemplate];
  [ms appendString: @",emailFrom:"];
  [ms appendFormat: @"%@", __emailFrom];
  [ms appendString: @",alternatives:"];
  [ms appendFormat: @"%@", __alternatives];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RatingScale

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMin: (double) min max: (double) max overallMin: (double) overallMin overallMax: (double) overallMax bucketUpperBounds: (NSMutableDictionary *) bucketUpperBounds
{
  self = [super init];
  __min = min;
  __min_isset = YES;
  __max = max;
  __max_isset = YES;
  __overallMin = overallMin;
  __overallMin_isset = YES;
  __overallMax = overallMax;
  __overallMax_isset = YES;
  __bucketUpperBounds = [bucketUpperBounds retain_stub];
  __bucketUpperBounds_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"min"])
  {
    __min = [decoder decodeDoubleForKey: @"min"];
    __min_isset = YES;
  }
  if ([decoder containsValueForKey: @"max"])
  {
    __max = [decoder decodeDoubleForKey: @"max"];
    __max_isset = YES;
  }
  if ([decoder containsValueForKey: @"overallMin"])
  {
    __overallMin = [decoder decodeDoubleForKey: @"overallMin"];
    __overallMin_isset = YES;
  }
  if ([decoder containsValueForKey: @"overallMax"])
  {
    __overallMax = [decoder decodeDoubleForKey: @"overallMax"];
    __overallMax_isset = YES;
  }
  if ([decoder containsValueForKey: @"bucketUpperBounds"])
  {
    __bucketUpperBounds = [[decoder decodeObjectForKey: @"bucketUpperBounds"] retain_stub];
    __bucketUpperBounds_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__min_isset)
  {
    [encoder encodeDouble: __min forKey: @"min"];
  }
  if (__max_isset)
  {
    [encoder encodeDouble: __max forKey: @"max"];
  }
  if (__overallMin_isset)
  {
    [encoder encodeDouble: __overallMin forKey: @"overallMin"];
  }
  if (__overallMax_isset)
  {
    [encoder encodeDouble: __overallMax forKey: @"overallMax"];
  }
  if (__bucketUpperBounds_isset)
  {
    [encoder encodeObject: __bucketUpperBounds forKey: @"bucketUpperBounds"];
  }
}

- (void) dealloc
{
  [__bucketUpperBounds release_stub];
  [super dealloc_stub];
}

- (double) min {
  return __min;
}

- (void) setMin: (double) min {
  __min = min;
  __min_isset = YES;
}

- (BOOL) minIsSet {
  return __min_isset;
}

- (void) unsetMin {
  __min_isset = NO;
}

- (double) max {
  return __max;
}

- (void) setMax: (double) max {
  __max = max;
  __max_isset = YES;
}

- (BOOL) maxIsSet {
  return __max_isset;
}

- (void) unsetMax {
  __max_isset = NO;
}

- (double) overallMin {
  return __overallMin;
}

- (void) setOverallMin: (double) overallMin {
  __overallMin = overallMin;
  __overallMin_isset = YES;
}

- (BOOL) overallMinIsSet {
  return __overallMin_isset;
}

- (void) unsetOverallMin {
  __overallMin_isset = NO;
}

- (double) overallMax {
  return __overallMax;
}

- (void) setOverallMax: (double) overallMax {
  __overallMax = overallMax;
  __overallMax_isset = YES;
}

- (BOOL) overallMaxIsSet {
  return __overallMax_isset;
}

- (void) unsetOverallMax {
  __overallMax_isset = NO;
}

- (NSMutableDictionary *) bucketUpperBounds {
  return [[__bucketUpperBounds retain_stub] autorelease_stub];
}

- (void) setBucketUpperBounds: (NSMutableDictionary *) bucketUpperBounds {
  [bucketUpperBounds retain_stub];
  [__bucketUpperBounds release_stub];
  __bucketUpperBounds = bucketUpperBounds;
  __bucketUpperBounds_isset = YES;
}

- (BOOL) bucketUpperBoundsIsSet {
  return __bucketUpperBounds_isset;
}

- (void) unsetBucketUpperBounds {
  [__bucketUpperBounds release_stub];
  __bucketUpperBounds = nil;
  __bucketUpperBounds_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMax: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setOverallMin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setOverallMax: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_MAP) {
          int _size71;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size71];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size71];
          int _i72;
          for (_i72 = 0; _i72 < _size71; ++_i72)
          {
            int _key73 = [inProtocol readI32];
            double _val74 = [inProtocol readDouble];
            [fieldValue setObject: [NSNumber numberWithDouble: _val74] forKey: [NSNumber numberWithInt: _key73]];
          }
          [inProtocol readMapEnd];
          [self setBucketUpperBounds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RatingScale"];
  if (__min_isset) {
    [outProtocol writeFieldBeginWithName: @"min" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __min];
    [outProtocol writeFieldEnd];
  }
  if (__max_isset) {
    [outProtocol writeFieldBeginWithName: @"max" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __max];
    [outProtocol writeFieldEnd];
  }
  if (__overallMin_isset) {
    [outProtocol writeFieldBeginWithName: @"overallMin" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __overallMin];
    [outProtocol writeFieldEnd];
  }
  if (__overallMax_isset) {
    [outProtocol writeFieldBeginWithName: @"overallMax" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __overallMax];
    [outProtocol writeFieldEnd];
  }
  if (__bucketUpperBounds_isset) {
    if (__bucketUpperBounds != nil) {
      [outProtocol writeFieldBeginWithName: @"bucketUpperBounds" type: TType_MAP fieldID: 5];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_DOUBLE size: [__bucketUpperBounds count]];
        NSEnumerator * _iter75 = [__bucketUpperBounds keyEnumerator];
        id key76;
        while ((key76 = [_iter75 nextObject]))
        {
          [outProtocol writeI32: [key76 intValue]];
          [outProtocol writeDouble: [[__bucketUpperBounds objectForKey: key76] doubleValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RatingScale("];
  [ms appendString: @"min:"];
  [ms appendFormat: @"%f", __min];
  [ms appendString: @",max:"];
  [ms appendFormat: @"%f", __max];
  [ms appendString: @",overallMin:"];
  [ms appendFormat: @"%f", __overallMin];
  [ms appendString: @",overallMax:"];
  [ms appendFormat: @"%f", __overallMax];
  [ms appendString: @",bucketUpperBounds:"];
  [ms appendFormat: @"%@", __bucketUpperBounds];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CollectorDefaults

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHighMaxRefreshDelay: (int32_t) highMaxRefreshDelay highMinRefreshDelay: (int32_t) highMinRefreshDelay highFailRefreshDelay: (int32_t) highFailRefreshDelay lowMaxRefreshDelay: (int32_t) lowMaxRefreshDelay lowMinRefreshDelay: (int32_t) lowMinRefreshDelay lowFailRefreshDelay: (int32_t) lowFailRefreshDelay maxNumFailures: (int32_t) maxNumFailures
{
  self = [super init];
  __highMaxRefreshDelay = highMaxRefreshDelay;
  __highMaxRefreshDelay_isset = YES;
  __highMinRefreshDelay = highMinRefreshDelay;
  __highMinRefreshDelay_isset = YES;
  __highFailRefreshDelay = highFailRefreshDelay;
  __highFailRefreshDelay_isset = YES;
  __lowMaxRefreshDelay = lowMaxRefreshDelay;
  __lowMaxRefreshDelay_isset = YES;
  __lowMinRefreshDelay = lowMinRefreshDelay;
  __lowMinRefreshDelay_isset = YES;
  __lowFailRefreshDelay = lowFailRefreshDelay;
  __lowFailRefreshDelay_isset = YES;
  __maxNumFailures = maxNumFailures;
  __maxNumFailures_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"highMaxRefreshDelay"])
  {
    __highMaxRefreshDelay = [decoder decodeInt32ForKey: @"highMaxRefreshDelay"];
    __highMaxRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"highMinRefreshDelay"])
  {
    __highMinRefreshDelay = [decoder decodeInt32ForKey: @"highMinRefreshDelay"];
    __highMinRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"highFailRefreshDelay"])
  {
    __highFailRefreshDelay = [decoder decodeInt32ForKey: @"highFailRefreshDelay"];
    __highFailRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"lowMaxRefreshDelay"])
  {
    __lowMaxRefreshDelay = [decoder decodeInt32ForKey: @"lowMaxRefreshDelay"];
    __lowMaxRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"lowMinRefreshDelay"])
  {
    __lowMinRefreshDelay = [decoder decodeInt32ForKey: @"lowMinRefreshDelay"];
    __lowMinRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"lowFailRefreshDelay"])
  {
    __lowFailRefreshDelay = [decoder decodeInt32ForKey: @"lowFailRefreshDelay"];
    __lowFailRefreshDelay_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxNumFailures"])
  {
    __maxNumFailures = [decoder decodeInt32ForKey: @"maxNumFailures"];
    __maxNumFailures_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__highMaxRefreshDelay_isset)
  {
    [encoder encodeInt32: __highMaxRefreshDelay forKey: @"highMaxRefreshDelay"];
  }
  if (__highMinRefreshDelay_isset)
  {
    [encoder encodeInt32: __highMinRefreshDelay forKey: @"highMinRefreshDelay"];
  }
  if (__highFailRefreshDelay_isset)
  {
    [encoder encodeInt32: __highFailRefreshDelay forKey: @"highFailRefreshDelay"];
  }
  if (__lowMaxRefreshDelay_isset)
  {
    [encoder encodeInt32: __lowMaxRefreshDelay forKey: @"lowMaxRefreshDelay"];
  }
  if (__lowMinRefreshDelay_isset)
  {
    [encoder encodeInt32: __lowMinRefreshDelay forKey: @"lowMinRefreshDelay"];
  }
  if (__lowFailRefreshDelay_isset)
  {
    [encoder encodeInt32: __lowFailRefreshDelay forKey: @"lowFailRefreshDelay"];
  }
  if (__maxNumFailures_isset)
  {
    [encoder encodeInt32: __maxNumFailures forKey: @"maxNumFailures"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) highMaxRefreshDelay {
  return __highMaxRefreshDelay;
}

- (void) setHighMaxRefreshDelay: (int32_t) highMaxRefreshDelay {
  __highMaxRefreshDelay = highMaxRefreshDelay;
  __highMaxRefreshDelay_isset = YES;
}

- (BOOL) highMaxRefreshDelayIsSet {
  return __highMaxRefreshDelay_isset;
}

- (void) unsetHighMaxRefreshDelay {
  __highMaxRefreshDelay_isset = NO;
}

- (int32_t) highMinRefreshDelay {
  return __highMinRefreshDelay;
}

- (void) setHighMinRefreshDelay: (int32_t) highMinRefreshDelay {
  __highMinRefreshDelay = highMinRefreshDelay;
  __highMinRefreshDelay_isset = YES;
}

- (BOOL) highMinRefreshDelayIsSet {
  return __highMinRefreshDelay_isset;
}

- (void) unsetHighMinRefreshDelay {
  __highMinRefreshDelay_isset = NO;
}

- (int32_t) highFailRefreshDelay {
  return __highFailRefreshDelay;
}

- (void) setHighFailRefreshDelay: (int32_t) highFailRefreshDelay {
  __highFailRefreshDelay = highFailRefreshDelay;
  __highFailRefreshDelay_isset = YES;
}

- (BOOL) highFailRefreshDelayIsSet {
  return __highFailRefreshDelay_isset;
}

- (void) unsetHighFailRefreshDelay {
  __highFailRefreshDelay_isset = NO;
}

- (int32_t) lowMaxRefreshDelay {
  return __lowMaxRefreshDelay;
}

- (void) setLowMaxRefreshDelay: (int32_t) lowMaxRefreshDelay {
  __lowMaxRefreshDelay = lowMaxRefreshDelay;
  __lowMaxRefreshDelay_isset = YES;
}

- (BOOL) lowMaxRefreshDelayIsSet {
  return __lowMaxRefreshDelay_isset;
}

- (void) unsetLowMaxRefreshDelay {
  __lowMaxRefreshDelay_isset = NO;
}

- (int32_t) lowMinRefreshDelay {
  return __lowMinRefreshDelay;
}

- (void) setLowMinRefreshDelay: (int32_t) lowMinRefreshDelay {
  __lowMinRefreshDelay = lowMinRefreshDelay;
  __lowMinRefreshDelay_isset = YES;
}

- (BOOL) lowMinRefreshDelayIsSet {
  return __lowMinRefreshDelay_isset;
}

- (void) unsetLowMinRefreshDelay {
  __lowMinRefreshDelay_isset = NO;
}

- (int32_t) lowFailRefreshDelay {
  return __lowFailRefreshDelay;
}

- (void) setLowFailRefreshDelay: (int32_t) lowFailRefreshDelay {
  __lowFailRefreshDelay = lowFailRefreshDelay;
  __lowFailRefreshDelay_isset = YES;
}

- (BOOL) lowFailRefreshDelayIsSet {
  return __lowFailRefreshDelay_isset;
}

- (void) unsetLowFailRefreshDelay {
  __lowFailRefreshDelay_isset = NO;
}

- (int32_t) maxNumFailures {
  return __maxNumFailures;
}

- (void) setMaxNumFailures: (int32_t) maxNumFailures {
  __maxNumFailures = maxNumFailures;
  __maxNumFailures_isset = YES;
}

- (BOOL) maxNumFailuresIsSet {
  return __maxNumFailures_isset;
}

- (void) unsetMaxNumFailures {
  __maxNumFailures_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHighMaxRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHighMinRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHighFailRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLowMaxRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLowMinRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLowFailRefreshDelay: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxNumFailures: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CollectorDefaults"];
  if (__highMaxRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"highMaxRefreshDelay" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __highMaxRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__highMinRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"highMinRefreshDelay" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __highMinRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__highFailRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"highFailRefreshDelay" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __highFailRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__lowMaxRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"lowMaxRefreshDelay" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __lowMaxRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__lowMinRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"lowMinRefreshDelay" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __lowMinRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__lowFailRefreshDelay_isset) {
    [outProtocol writeFieldBeginWithName: @"lowFailRefreshDelay" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __lowFailRefreshDelay];
    [outProtocol writeFieldEnd];
  }
  if (__maxNumFailures_isset) {
    [outProtocol writeFieldBeginWithName: @"maxNumFailures" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __maxNumFailures];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CollectorDefaults("];
  [ms appendString: @"highMaxRefreshDelay:"];
  [ms appendFormat: @"%i", __highMaxRefreshDelay];
  [ms appendString: @",highMinRefreshDelay:"];
  [ms appendFormat: @"%i", __highMinRefreshDelay];
  [ms appendString: @",highFailRefreshDelay:"];
  [ms appendFormat: @"%i", __highFailRefreshDelay];
  [ms appendString: @",lowMaxRefreshDelay:"];
  [ms appendFormat: @"%i", __lowMaxRefreshDelay];
  [ms appendString: @",lowMinRefreshDelay:"];
  [ms appendFormat: @"%i", __lowMinRefreshDelay];
  [ms appendString: @",lowFailRefreshDelay:"];
  [ms appendFormat: @"%i", __lowFailRefreshDelay];
  [ms appendString: @",maxNumFailures:"];
  [ms appendFormat: @"%i", __maxNumFailures];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Colors

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBgColor: (NSString *) bgColor bgColorStart: (NSString *) bgColorStart bgColorEnd: (NSString *) bgColorEnd borderColor: (NSString *) borderColor
{
  self = [super init];
  __bgColor = [bgColor retain_stub];
  __bgColor_isset = YES;
  __bgColorStart = [bgColorStart retain_stub];
  __bgColorStart_isset = YES;
  __bgColorEnd = [bgColorEnd retain_stub];
  __bgColorEnd_isset = YES;
  __borderColor = [borderColor retain_stub];
  __borderColor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bgColor"])
  {
    __bgColor = [[decoder decodeObjectForKey: @"bgColor"] retain_stub];
    __bgColor_isset = YES;
  }
  if ([decoder containsValueForKey: @"bgColorStart"])
  {
    __bgColorStart = [[decoder decodeObjectForKey: @"bgColorStart"] retain_stub];
    __bgColorStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"bgColorEnd"])
  {
    __bgColorEnd = [[decoder decodeObjectForKey: @"bgColorEnd"] retain_stub];
    __bgColorEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"borderColor"])
  {
    __borderColor = [[decoder decodeObjectForKey: @"borderColor"] retain_stub];
    __borderColor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bgColor_isset)
  {
    [encoder encodeObject: __bgColor forKey: @"bgColor"];
  }
  if (__bgColorStart_isset)
  {
    [encoder encodeObject: __bgColorStart forKey: @"bgColorStart"];
  }
  if (__bgColorEnd_isset)
  {
    [encoder encodeObject: __bgColorEnd forKey: @"bgColorEnd"];
  }
  if (__borderColor_isset)
  {
    [encoder encodeObject: __borderColor forKey: @"borderColor"];
  }
}

- (void) dealloc
{
  [__bgColor release_stub];
  [__bgColorStart release_stub];
  [__bgColorEnd release_stub];
  [__borderColor release_stub];
  [super dealloc_stub];
}

- (NSString *) bgColor {
  return [[__bgColor retain_stub] autorelease_stub];
}

- (void) setBgColor: (NSString *) bgColor {
  [bgColor retain_stub];
  [__bgColor release_stub];
  __bgColor = bgColor;
  __bgColor_isset = YES;
}

- (BOOL) bgColorIsSet {
  return __bgColor_isset;
}

- (void) unsetBgColor {
  [__bgColor release_stub];
  __bgColor = nil;
  __bgColor_isset = NO;
}

- (NSString *) bgColorStart {
  return [[__bgColorStart retain_stub] autorelease_stub];
}

- (void) setBgColorStart: (NSString *) bgColorStart {
  [bgColorStart retain_stub];
  [__bgColorStart release_stub];
  __bgColorStart = bgColorStart;
  __bgColorStart_isset = YES;
}

- (BOOL) bgColorStartIsSet {
  return __bgColorStart_isset;
}

- (void) unsetBgColorStart {
  [__bgColorStart release_stub];
  __bgColorStart = nil;
  __bgColorStart_isset = NO;
}

- (NSString *) bgColorEnd {
  return [[__bgColorEnd retain_stub] autorelease_stub];
}

- (void) setBgColorEnd: (NSString *) bgColorEnd {
  [bgColorEnd retain_stub];
  [__bgColorEnd release_stub];
  __bgColorEnd = bgColorEnd;
  __bgColorEnd_isset = YES;
}

- (BOOL) bgColorEndIsSet {
  return __bgColorEnd_isset;
}

- (void) unsetBgColorEnd {
  [__bgColorEnd release_stub];
  __bgColorEnd = nil;
  __bgColorEnd_isset = NO;
}

- (NSString *) borderColor {
  return [[__borderColor retain_stub] autorelease_stub];
}

- (void) setBorderColor: (NSString *) borderColor {
  [borderColor retain_stub];
  [__borderColor release_stub];
  __borderColor = borderColor;
  __borderColor_isset = YES;
}

- (BOOL) borderColorIsSet {
  return __borderColor_isset;
}

- (void) unsetBorderColor {
  [__borderColor release_stub];
  __borderColor = nil;
  __borderColor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgColor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgColorStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBgColorEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBorderColor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Colors"];
  if (__bgColor_isset) {
    if (__bgColor != nil) {
      [outProtocol writeFieldBeginWithName: @"bgColor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __bgColor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bgColorStart_isset) {
    if (__bgColorStart != nil) {
      [outProtocol writeFieldBeginWithName: @"bgColorStart" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __bgColorStart];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bgColorEnd_isset) {
    if (__bgColorEnd != nil) {
      [outProtocol writeFieldBeginWithName: @"bgColorEnd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __bgColorEnd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__borderColor_isset) {
    if (__borderColor != nil) {
      [outProtocol writeFieldBeginWithName: @"borderColor" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __borderColor];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Colors("];
  [ms appendString: @"bgColor:"];
  [ms appendFormat: @"\"%@\"", __bgColor];
  [ms appendString: @",bgColorStart:"];
  [ms appendFormat: @"\"%@\"", __bgColorStart];
  [ms appendString: @",bgColorEnd:"];
  [ms appendFormat: @"\"%@\"", __bgColorEnd];
  [ms appendString: @",borderColor:"];
  [ms appendFormat: @"\"%@\"", __borderColor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Source

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (SourceCode) id name: (NSString *) name urls: (NSMutableArray *) urls smallIconPath: (NSString *) smallIconPath largeIconPath: (NSString *) largeIconPath overallRS: (RatingScale *) overallRS subRatingRS: (NSMutableDictionary *) subRatingRS isAggregator: (BOOL) isAggregator doAggregatedImpactRating: (BOOL) doAggregatedImpactRating hasItemizedRatings: (BOOL) hasItemizedRatings allowsComments: (BOOL) allowsComments status: (int) status sourceGroup: (SourceGroup) sourceGroup collectorDefaults: (CollectorDefaults *) collectorDefaults urlRegexp: (NSString *) urlRegexp sendAlerts: (BOOL) sendAlerts hasRating: (BOOL) hasRating scoreable: (BOOL) scoreable publishable: (BOOL) publishable schedulable: (BOOL) schedulable autofindable: (BOOL) autofindable viewable: (BOOL) viewable requestReviewable: (BOOL) requestReviewable collectable: (BOOL) collectable industryWeights: (NSMutableDictionary *) industryWeights domain: (NSString *) domain colors: (Colors *) colors listingUrl: (NSString *) listingUrl attributes: (NSMutableArray *) attributes idFields: (NSMutableArray *) idFields createUrl: (NSString *) createUrl claimUrl: (NSString *) claimUrl isListing: (BOOL) isListing preserveDate: (BOOL) preserveDate
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __urls = [urls retain_stub];
  __urls_isset = YES;
  __smallIconPath = [smallIconPath retain_stub];
  __smallIconPath_isset = YES;
  __largeIconPath = [largeIconPath retain_stub];
  __largeIconPath_isset = YES;
  __overallRS = [overallRS retain_stub];
  __overallRS_isset = YES;
  __subRatingRS = [subRatingRS retain_stub];
  __subRatingRS_isset = YES;
  __isAggregator = isAggregator;
  __isAggregator_isset = YES;
  __doAggregatedImpactRating = doAggregatedImpactRating;
  __doAggregatedImpactRating_isset = YES;
  __hasItemizedRatings = hasItemizedRatings;
  __hasItemizedRatings_isset = YES;
  __allowsComments = allowsComments;
  __allowsComments_isset = YES;
  __status = status;
  __status_isset = YES;
  __sourceGroup = [sourceGroup retain_stub];
  __sourceGroup_isset = YES;
  __collectorDefaults = [collectorDefaults retain_stub];
  __collectorDefaults_isset = YES;
  __urlRegexp = [urlRegexp retain_stub];
  __urlRegexp_isset = YES;
  __sendAlerts = sendAlerts;
  __sendAlerts_isset = YES;
  __hasRating = hasRating;
  __hasRating_isset = YES;
  __scoreable = scoreable;
  __scoreable_isset = YES;
  __publishable = publishable;
  __publishable_isset = YES;
  __schedulable = schedulable;
  __schedulable_isset = YES;
  __autofindable = autofindable;
  __autofindable_isset = YES;
  __viewable = viewable;
  __viewable_isset = YES;
  __requestReviewable = requestReviewable;
  __requestReviewable_isset = YES;
  __collectable = collectable;
  __collectable_isset = YES;
  __industryWeights = [industryWeights retain_stub];
  __industryWeights_isset = YES;
  __domain = [domain retain_stub];
  __domain_isset = YES;
  __colors = [colors retain_stub];
  __colors_isset = YES;
  __listingUrl = [listingUrl retain_stub];
  __listingUrl_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __idFields = [idFields retain_stub];
  __idFields_isset = YES;
  __createUrl = [createUrl retain_stub];
  __createUrl_isset = YES;
  __claimUrl = [claimUrl retain_stub];
  __claimUrl_isset = YES;
  __isListing = isListing;
  __isListing_isset = YES;
  __preserveDate = preserveDate;
  __preserveDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"urls"])
  {
    __urls = [[decoder decodeObjectForKey: @"urls"] retain_stub];
    __urls_isset = YES;
  }
  if ([decoder containsValueForKey: @"smallIconPath"])
  {
    __smallIconPath = [[decoder decodeObjectForKey: @"smallIconPath"] retain_stub];
    __smallIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"largeIconPath"])
  {
    __largeIconPath = [[decoder decodeObjectForKey: @"largeIconPath"] retain_stub];
    __largeIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"overallRS"])
  {
    __overallRS = [[decoder decodeObjectForKey: @"overallRS"] retain_stub];
    __overallRS_isset = YES;
  }
  if ([decoder containsValueForKey: @"subRatingRS"])
  {
    __subRatingRS = [[decoder decodeObjectForKey: @"subRatingRS"] retain_stub];
    __subRatingRS_isset = YES;
  }
  if ([decoder containsValueForKey: @"isAggregator"])
  {
    __isAggregator = [decoder decodeBoolForKey: @"isAggregator"];
    __isAggregator_isset = YES;
  }
  if ([decoder containsValueForKey: @"doAggregatedImpactRating"])
  {
    __doAggregatedImpactRating = [decoder decodeBoolForKey: @"doAggregatedImpactRating"];
    __doAggregatedImpactRating_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasItemizedRatings"])
  {
    __hasItemizedRatings = [decoder decodeBoolForKey: @"hasItemizedRatings"];
    __hasItemizedRatings_isset = YES;
  }
  if ([decoder containsValueForKey: @"allowsComments"])
  {
    __allowsComments = [decoder decodeBoolForKey: @"allowsComments"];
    __allowsComments_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceGroup"])
  {
    __sourceGroup = [[decoder decodeObjectForKey: @"sourceGroup"] retain_stub];
    __sourceGroup_isset = YES;
  }
  if ([decoder containsValueForKey: @"collectorDefaults"])
  {
    __collectorDefaults = [[decoder decodeObjectForKey: @"collectorDefaults"] retain_stub];
    __collectorDefaults_isset = YES;
  }
  if ([decoder containsValueForKey: @"urlRegexp"])
  {
    __urlRegexp = [[decoder decodeObjectForKey: @"urlRegexp"] retain_stub];
    __urlRegexp_isset = YES;
  }
  if ([decoder containsValueForKey: @"sendAlerts"])
  {
    __sendAlerts = [decoder decodeBoolForKey: @"sendAlerts"];
    __sendAlerts_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasRating"])
  {
    __hasRating = [decoder decodeBoolForKey: @"hasRating"];
    __hasRating_isset = YES;
  }
  if ([decoder containsValueForKey: @"scoreable"])
  {
    __scoreable = [decoder decodeBoolForKey: @"scoreable"];
    __scoreable_isset = YES;
  }
  if ([decoder containsValueForKey: @"publishable"])
  {
    __publishable = [decoder decodeBoolForKey: @"publishable"];
    __publishable_isset = YES;
  }
  if ([decoder containsValueForKey: @"schedulable"])
  {
    __schedulable = [decoder decodeBoolForKey: @"schedulable"];
    __schedulable_isset = YES;
  }
  if ([decoder containsValueForKey: @"autofindable"])
  {
    __autofindable = [decoder decodeBoolForKey: @"autofindable"];
    __autofindable_isset = YES;
  }
  if ([decoder containsValueForKey: @"viewable"])
  {
    __viewable = [decoder decodeBoolForKey: @"viewable"];
    __viewable_isset = YES;
  }
  if ([decoder containsValueForKey: @"requestReviewable"])
  {
    __requestReviewable = [decoder decodeBoolForKey: @"requestReviewable"];
    __requestReviewable_isset = YES;
  }
  if ([decoder containsValueForKey: @"collectable"])
  {
    __collectable = [decoder decodeBoolForKey: @"collectable"];
    __collectable_isset = YES;
  }
  if ([decoder containsValueForKey: @"industryWeights"])
  {
    __industryWeights = [[decoder decodeObjectForKey: @"industryWeights"] retain_stub];
    __industryWeights_isset = YES;
  }
  if ([decoder containsValueForKey: @"domain"])
  {
    __domain = [[decoder decodeObjectForKey: @"domain"] retain_stub];
    __domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"colors"])
  {
    __colors = [[decoder decodeObjectForKey: @"colors"] retain_stub];
    __colors_isset = YES;
  }
  if ([decoder containsValueForKey: @"listingUrl"])
  {
    __listingUrl = [[decoder decodeObjectForKey: @"listingUrl"] retain_stub];
    __listingUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"idFields"])
  {
    __idFields = [[decoder decodeObjectForKey: @"idFields"] retain_stub];
    __idFields_isset = YES;
  }
  if ([decoder containsValueForKey: @"createUrl"])
  {
    __createUrl = [[decoder decodeObjectForKey: @"createUrl"] retain_stub];
    __createUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"claimUrl"])
  {
    __claimUrl = [[decoder decodeObjectForKey: @"claimUrl"] retain_stub];
    __claimUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"isListing"])
  {
    __isListing = [decoder decodeBoolForKey: @"isListing"];
    __isListing_isset = YES;
  }
  if ([decoder containsValueForKey: @"preserveDate"])
  {
    __preserveDate = [decoder decodeBoolForKey: @"preserveDate"];
    __preserveDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__urls_isset)
  {
    [encoder encodeObject: __urls forKey: @"urls"];
  }
  if (__smallIconPath_isset)
  {
    [encoder encodeObject: __smallIconPath forKey: @"smallIconPath"];
  }
  if (__largeIconPath_isset)
  {
    [encoder encodeObject: __largeIconPath forKey: @"largeIconPath"];
  }
  if (__overallRS_isset)
  {
    [encoder encodeObject: __overallRS forKey: @"overallRS"];
  }
  if (__subRatingRS_isset)
  {
    [encoder encodeObject: __subRatingRS forKey: @"subRatingRS"];
  }
  if (__isAggregator_isset)
  {
    [encoder encodeBool: __isAggregator forKey: @"isAggregator"];
  }
  if (__doAggregatedImpactRating_isset)
  {
    [encoder encodeBool: __doAggregatedImpactRating forKey: @"doAggregatedImpactRating"];
  }
  if (__hasItemizedRatings_isset)
  {
    [encoder encodeBool: __hasItemizedRatings forKey: @"hasItemizedRatings"];
  }
  if (__allowsComments_isset)
  {
    [encoder encodeBool: __allowsComments forKey: @"allowsComments"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__sourceGroup_isset)
  {
    [encoder encodeObject: __sourceGroup forKey: @"sourceGroup"];
  }
  if (__collectorDefaults_isset)
  {
    [encoder encodeObject: __collectorDefaults forKey: @"collectorDefaults"];
  }
  if (__urlRegexp_isset)
  {
    [encoder encodeObject: __urlRegexp forKey: @"urlRegexp"];
  }
  if (__sendAlerts_isset)
  {
    [encoder encodeBool: __sendAlerts forKey: @"sendAlerts"];
  }
  if (__hasRating_isset)
  {
    [encoder encodeBool: __hasRating forKey: @"hasRating"];
  }
  if (__scoreable_isset)
  {
    [encoder encodeBool: __scoreable forKey: @"scoreable"];
  }
  if (__publishable_isset)
  {
    [encoder encodeBool: __publishable forKey: @"publishable"];
  }
  if (__schedulable_isset)
  {
    [encoder encodeBool: __schedulable forKey: @"schedulable"];
  }
  if (__autofindable_isset)
  {
    [encoder encodeBool: __autofindable forKey: @"autofindable"];
  }
  if (__viewable_isset)
  {
    [encoder encodeBool: __viewable forKey: @"viewable"];
  }
  if (__requestReviewable_isset)
  {
    [encoder encodeBool: __requestReviewable forKey: @"requestReviewable"];
  }
  if (__collectable_isset)
  {
    [encoder encodeBool: __collectable forKey: @"collectable"];
  }
  if (__industryWeights_isset)
  {
    [encoder encodeObject: __industryWeights forKey: @"industryWeights"];
  }
  if (__domain_isset)
  {
    [encoder encodeObject: __domain forKey: @"domain"];
  }
  if (__colors_isset)
  {
    [encoder encodeObject: __colors forKey: @"colors"];
  }
  if (__listingUrl_isset)
  {
    [encoder encodeObject: __listingUrl forKey: @"listingUrl"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__idFields_isset)
  {
    [encoder encodeObject: __idFields forKey: @"idFields"];
  }
  if (__createUrl_isset)
  {
    [encoder encodeObject: __createUrl forKey: @"createUrl"];
  }
  if (__claimUrl_isset)
  {
    [encoder encodeObject: __claimUrl forKey: @"claimUrl"];
  }
  if (__isListing_isset)
  {
    [encoder encodeBool: __isListing forKey: @"isListing"];
  }
  if (__preserveDate_isset)
  {
    [encoder encodeBool: __preserveDate forKey: @"preserveDate"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__urls release_stub];
  [__smallIconPath release_stub];
  [__largeIconPath release_stub];
  [__overallRS release_stub];
  [__subRatingRS release_stub];
  [__sourceGroup release_stub];
  [__collectorDefaults release_stub];
  [__urlRegexp release_stub];
  [__industryWeights release_stub];
  [__domain release_stub];
  [__colors release_stub];
  [__listingUrl release_stub];
  [__attributes release_stub];
  [__idFields release_stub];
  [__createUrl release_stub];
  [__claimUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableArray *) urls {
  return [[__urls retain_stub] autorelease_stub];
}

- (void) setUrls: (NSMutableArray *) urls {
  [urls retain_stub];
  [__urls release_stub];
  __urls = urls;
  __urls_isset = YES;
}

- (BOOL) urlsIsSet {
  return __urls_isset;
}

- (void) unsetUrls {
  [__urls release_stub];
  __urls = nil;
  __urls_isset = NO;
}

- (NSString *) smallIconPath {
  return [[__smallIconPath retain_stub] autorelease_stub];
}

- (void) setSmallIconPath: (NSString *) smallIconPath {
  [smallIconPath retain_stub];
  [__smallIconPath release_stub];
  __smallIconPath = smallIconPath;
  __smallIconPath_isset = YES;
}

- (BOOL) smallIconPathIsSet {
  return __smallIconPath_isset;
}

- (void) unsetSmallIconPath {
  [__smallIconPath release_stub];
  __smallIconPath = nil;
  __smallIconPath_isset = NO;
}

- (NSString *) largeIconPath {
  return [[__largeIconPath retain_stub] autorelease_stub];
}

- (void) setLargeIconPath: (NSString *) largeIconPath {
  [largeIconPath retain_stub];
  [__largeIconPath release_stub];
  __largeIconPath = largeIconPath;
  __largeIconPath_isset = YES;
}

- (BOOL) largeIconPathIsSet {
  return __largeIconPath_isset;
}

- (void) unsetLargeIconPath {
  [__largeIconPath release_stub];
  __largeIconPath = nil;
  __largeIconPath_isset = NO;
}

- (RatingScale *) overallRS {
  return [[__overallRS retain_stub] autorelease_stub];
}

- (void) setOverallRS: (RatingScale *) overallRS {
  [overallRS retain_stub];
  [__overallRS release_stub];
  __overallRS = overallRS;
  __overallRS_isset = YES;
}

- (BOOL) overallRSIsSet {
  return __overallRS_isset;
}

- (void) unsetOverallRS {
  [__overallRS release_stub];
  __overallRS = nil;
  __overallRS_isset = NO;
}

- (NSMutableDictionary *) subRatingRS {
  return [[__subRatingRS retain_stub] autorelease_stub];
}

- (void) setSubRatingRS: (NSMutableDictionary *) subRatingRS {
  [subRatingRS retain_stub];
  [__subRatingRS release_stub];
  __subRatingRS = subRatingRS;
  __subRatingRS_isset = YES;
}

- (BOOL) subRatingRSIsSet {
  return __subRatingRS_isset;
}

- (void) unsetSubRatingRS {
  [__subRatingRS release_stub];
  __subRatingRS = nil;
  __subRatingRS_isset = NO;
}

- (BOOL) isAggregator {
  return __isAggregator;
}

- (void) setIsAggregator: (BOOL) isAggregator {
  __isAggregator = isAggregator;
  __isAggregator_isset = YES;
}

- (BOOL) isAggregatorIsSet {
  return __isAggregator_isset;
}

- (void) unsetIsAggregator {
  __isAggregator_isset = NO;
}

- (BOOL) doAggregatedImpactRating {
  return __doAggregatedImpactRating;
}

- (void) setDoAggregatedImpactRating: (BOOL) doAggregatedImpactRating {
  __doAggregatedImpactRating = doAggregatedImpactRating;
  __doAggregatedImpactRating_isset = YES;
}

- (BOOL) doAggregatedImpactRatingIsSet {
  return __doAggregatedImpactRating_isset;
}

- (void) unsetDoAggregatedImpactRating {
  __doAggregatedImpactRating_isset = NO;
}

- (BOOL) hasItemizedRatings {
  return __hasItemizedRatings;
}

- (void) setHasItemizedRatings: (BOOL) hasItemizedRatings {
  __hasItemizedRatings = hasItemizedRatings;
  __hasItemizedRatings_isset = YES;
}

- (BOOL) hasItemizedRatingsIsSet {
  return __hasItemizedRatings_isset;
}

- (void) unsetHasItemizedRatings {
  __hasItemizedRatings_isset = NO;
}

- (BOOL) allowsComments {
  return __allowsComments;
}

- (void) setAllowsComments: (BOOL) allowsComments {
  __allowsComments = allowsComments;
  __allowsComments_isset = YES;
}

- (BOOL) allowsCommentsIsSet {
  return __allowsComments_isset;
}

- (void) unsetAllowsComments {
  __allowsComments_isset = NO;
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) sourceGroup {
  return [[__sourceGroup retain_stub] autorelease_stub];
}

- (void) setSourceGroup: (NSString *) sourceGroup {
  [sourceGroup retain_stub];
  [__sourceGroup release_stub];
  __sourceGroup = sourceGroup;
  __sourceGroup_isset = YES;
}

- (BOOL) sourceGroupIsSet {
  return __sourceGroup_isset;
}

- (void) unsetSourceGroup {
  [__sourceGroup release_stub];
  __sourceGroup = nil;
  __sourceGroup_isset = NO;
}

- (CollectorDefaults *) collectorDefaults {
  return [[__collectorDefaults retain_stub] autorelease_stub];
}

- (void) setCollectorDefaults: (CollectorDefaults *) collectorDefaults {
  [collectorDefaults retain_stub];
  [__collectorDefaults release_stub];
  __collectorDefaults = collectorDefaults;
  __collectorDefaults_isset = YES;
}

- (BOOL) collectorDefaultsIsSet {
  return __collectorDefaults_isset;
}

- (void) unsetCollectorDefaults {
  [__collectorDefaults release_stub];
  __collectorDefaults = nil;
  __collectorDefaults_isset = NO;
}

- (NSString *) urlRegexp {
  return [[__urlRegexp retain_stub] autorelease_stub];
}

- (void) setUrlRegexp: (NSString *) urlRegexp {
  [urlRegexp retain_stub];
  [__urlRegexp release_stub];
  __urlRegexp = urlRegexp;
  __urlRegexp_isset = YES;
}

- (BOOL) urlRegexpIsSet {
  return __urlRegexp_isset;
}

- (void) unsetUrlRegexp {
  [__urlRegexp release_stub];
  __urlRegexp = nil;
  __urlRegexp_isset = NO;
}

- (BOOL) sendAlerts {
  return __sendAlerts;
}

- (void) setSendAlerts: (BOOL) sendAlerts {
  __sendAlerts = sendAlerts;
  __sendAlerts_isset = YES;
}

- (BOOL) sendAlertsIsSet {
  return __sendAlerts_isset;
}

- (void) unsetSendAlerts {
  __sendAlerts_isset = NO;
}

- (BOOL) hasRating {
  return __hasRating;
}

- (void) setHasRating: (BOOL) hasRating {
  __hasRating = hasRating;
  __hasRating_isset = YES;
}

- (BOOL) hasRatingIsSet {
  return __hasRating_isset;
}

- (void) unsetHasRating {
  __hasRating_isset = NO;
}

- (BOOL) scoreable {
  return __scoreable;
}

- (void) setScoreable: (BOOL) scoreable {
  __scoreable = scoreable;
  __scoreable_isset = YES;
}

- (BOOL) scoreableIsSet {
  return __scoreable_isset;
}

- (void) unsetScoreable {
  __scoreable_isset = NO;
}

- (BOOL) publishable {
  return __publishable;
}

- (void) setPublishable: (BOOL) publishable {
  __publishable = publishable;
  __publishable_isset = YES;
}

- (BOOL) publishableIsSet {
  return __publishable_isset;
}

- (void) unsetPublishable {
  __publishable_isset = NO;
}

- (BOOL) schedulable {
  return __schedulable;
}

- (void) setSchedulable: (BOOL) schedulable {
  __schedulable = schedulable;
  __schedulable_isset = YES;
}

- (BOOL) schedulableIsSet {
  return __schedulable_isset;
}

- (void) unsetSchedulable {
  __schedulable_isset = NO;
}

- (BOOL) autofindable {
  return __autofindable;
}

- (void) setAutofindable: (BOOL) autofindable {
  __autofindable = autofindable;
  __autofindable_isset = YES;
}

- (BOOL) autofindableIsSet {
  return __autofindable_isset;
}

- (void) unsetAutofindable {
  __autofindable_isset = NO;
}

- (BOOL) viewable {
  return __viewable;
}

- (void) setViewable: (BOOL) viewable {
  __viewable = viewable;
  __viewable_isset = YES;
}

- (BOOL) viewableIsSet {
  return __viewable_isset;
}

- (void) unsetViewable {
  __viewable_isset = NO;
}

- (BOOL) requestReviewable {
  return __requestReviewable;
}

- (void) setRequestReviewable: (BOOL) requestReviewable {
  __requestReviewable = requestReviewable;
  __requestReviewable_isset = YES;
}

- (BOOL) requestReviewableIsSet {
  return __requestReviewable_isset;
}

- (void) unsetRequestReviewable {
  __requestReviewable_isset = NO;
}

- (BOOL) collectable {
  return __collectable;
}

- (void) setCollectable: (BOOL) collectable {
  __collectable = collectable;
  __collectable_isset = YES;
}

- (BOOL) collectableIsSet {
  return __collectable_isset;
}

- (void) unsetCollectable {
  __collectable_isset = NO;
}

- (NSMutableDictionary *) industryWeights {
  return [[__industryWeights retain_stub] autorelease_stub];
}

- (void) setIndustryWeights: (NSMutableDictionary *) industryWeights {
  [industryWeights retain_stub];
  [__industryWeights release_stub];
  __industryWeights = industryWeights;
  __industryWeights_isset = YES;
}

- (BOOL) industryWeightsIsSet {
  return __industryWeights_isset;
}

- (void) unsetIndustryWeights {
  [__industryWeights release_stub];
  __industryWeights = nil;
  __industryWeights_isset = NO;
}

- (NSString *) domain {
  return [[__domain retain_stub] autorelease_stub];
}

- (void) setDomain: (NSString *) domain {
  [domain retain_stub];
  [__domain release_stub];
  __domain = domain;
  __domain_isset = YES;
}

- (BOOL) domainIsSet {
  return __domain_isset;
}

- (void) unsetDomain {
  [__domain release_stub];
  __domain = nil;
  __domain_isset = NO;
}

- (Colors *) colors {
  return [[__colors retain_stub] autorelease_stub];
}

- (void) setColors: (Colors *) colors {
  [colors retain_stub];
  [__colors release_stub];
  __colors = colors;
  __colors_isset = YES;
}

- (BOOL) colorsIsSet {
  return __colors_isset;
}

- (void) unsetColors {
  [__colors release_stub];
  __colors = nil;
  __colors_isset = NO;
}

- (NSString *) listingUrl {
  return [[__listingUrl retain_stub] autorelease_stub];
}

- (void) setListingUrl: (NSString *) listingUrl {
  [listingUrl retain_stub];
  [__listingUrl release_stub];
  __listingUrl = listingUrl;
  __listingUrl_isset = YES;
}

- (BOOL) listingUrlIsSet {
  return __listingUrl_isset;
}

- (void) unsetListingUrl {
  [__listingUrl release_stub];
  __listingUrl = nil;
  __listingUrl_isset = NO;
}

- (NSMutableArray *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (NSMutableArray *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (NSMutableArray *) idFields {
  return [[__idFields retain_stub] autorelease_stub];
}

- (void) setIdFields: (NSMutableArray *) idFields {
  [idFields retain_stub];
  [__idFields release_stub];
  __idFields = idFields;
  __idFields_isset = YES;
}

- (BOOL) idFieldsIsSet {
  return __idFields_isset;
}

- (void) unsetIdFields {
  [__idFields release_stub];
  __idFields = nil;
  __idFields_isset = NO;
}

- (NSString *) createUrl {
  return [[__createUrl retain_stub] autorelease_stub];
}

- (void) setCreateUrl: (NSString *) createUrl {
  [createUrl retain_stub];
  [__createUrl release_stub];
  __createUrl = createUrl;
  __createUrl_isset = YES;
}

- (BOOL) createUrlIsSet {
  return __createUrl_isset;
}

- (void) unsetCreateUrl {
  [__createUrl release_stub];
  __createUrl = nil;
  __createUrl_isset = NO;
}

- (NSString *) claimUrl {
  return [[__claimUrl retain_stub] autorelease_stub];
}

- (void) setClaimUrl: (NSString *) claimUrl {
  [claimUrl retain_stub];
  [__claimUrl release_stub];
  __claimUrl = claimUrl;
  __claimUrl_isset = YES;
}

- (BOOL) claimUrlIsSet {
  return __claimUrl_isset;
}

- (void) unsetClaimUrl {
  [__claimUrl release_stub];
  __claimUrl = nil;
  __claimUrl_isset = NO;
}

- (BOOL) isListing {
  return __isListing;
}

- (void) setIsListing: (BOOL) isListing {
  __isListing = isListing;
  __isListing_isset = YES;
}

- (BOOL) isListingIsSet {
  return __isListing_isset;
}

- (void) unsetIsListing {
  __isListing_isset = NO;
}

- (BOOL) preserveDate {
  return __preserveDate;
}

- (void) setPreserveDate: (BOOL) preserveDate {
  __preserveDate = preserveDate;
  __preserveDate_isset = YES;
}

- (BOOL) preserveDateIsSet {
  return __preserveDate_isset;
}

- (void) unsetPreserveDate {
  __preserveDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size77;
          [inProtocol readListBeginReturningElementType: NULL size: &_size77];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size77];
          int _i78;
          for (_i78 = 0; _i78 < _size77; ++_i78)
          {
            NSString * _elem79 = [inProtocol readString];
            [fieldValue addObject: _elem79];
          }
          [inProtocol readListEnd];
          [self setUrls: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmallIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLargeIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          RatingScale *fieldValue = [[RatingScale alloc] init];
          [fieldValue read: inProtocol];
          [self setOverallRS: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_MAP) {
          int _size80;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size80];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size80];
          int _i81;
          for (_i81 = 0; _i81 < _size80; ++_i81)
          {
            int _key82 = [inProtocol readI32];
            RatingScale *_val83 = [[RatingScale alloc] init];
            [_val83 read: inProtocol];
            [fieldValue setObject: _val83 forKey: [NSNumber numberWithInt: _key82]];
            [_val83 release_stub];
          }
          [inProtocol readMapEnd];
          [self setSubRatingRS: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsAggregator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDoAggregatedImpactRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasItemizedRatings: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAllowsComments: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceGroup: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRUCT) {
          CollectorDefaults *fieldValue = [[CollectorDefaults alloc] init];
          [fieldValue read: inProtocol];
          [self setCollectorDefaults: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrlRegexp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSendAlerts: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setScoreable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPublishable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSchedulable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAutofindable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setViewable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRequestReviewable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCollectable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_MAP) {
          int _size84;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size84];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size84];
          int _i85;
          for (_i85 = 0; _i85 < _size84; ++_i85)
          {
            NSString * _key86 = [inProtocol readString];
            double _val87 = [inProtocol readDouble];
            [fieldValue setObject: [NSNumber numberWithDouble: _val87] forKey: _key86];
          }
          [inProtocol readMapEnd];
          [self setIndustryWeights: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRUCT) {
          Colors *fieldValue = [[Colors alloc] init];
          [fieldValue read: inProtocol];
          [self setColors: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setListingUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_LIST) {
          int _size88;
          [inProtocol readListBeginReturningElementType: NULL size: &_size88];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size88];
          int _i89;
          for (_i89 = 0; _i89 < _size88; ++_i89)
          {
            NSString * _elem90 = [inProtocol readString];
            [fieldValue addObject: _elem90];
          }
          [inProtocol readListEnd];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_LIST) {
          int _size91;
          [inProtocol readListBeginReturningElementType: NULL size: &_size91];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size91];
          int _i92;
          for (_i92 = 0; _i92 < _size91; ++_i92)
          {
            NSString * _elem93 = [inProtocol readString];
            [fieldValue addObject: _elem93];
          }
          [inProtocol readListEnd];
          [self setIdFields: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreateUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaimUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsListing: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPreserveDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Source"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urls_isset) {
    if (__urls != nil) {
      [outProtocol writeFieldBeginWithName: @"urls" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__urls count]];
        int i95;
        for (i95 = 0; i95 < [__urls count]; i95++)
        {
          [outProtocol writeString: [__urls objectAtIndex: i95]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__smallIconPath_isset) {
    if (__smallIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"smallIconPath" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __smallIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__largeIconPath_isset) {
    if (__largeIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"largeIconPath" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __largeIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__overallRS_isset) {
    if (__overallRS != nil) {
      [outProtocol writeFieldBeginWithName: @"overallRS" type: TType_STRUCT fieldID: 6];
      [__overallRS write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__subRatingRS_isset) {
    if (__subRatingRS != nil) {
      [outProtocol writeFieldBeginWithName: @"subRatingRS" type: TType_MAP fieldID: 7];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__subRatingRS count]];
        NSEnumerator * _iter96 = [__subRatingRS keyEnumerator];
        id key97;
        while ((key97 = [_iter96 nextObject]))
        {
          [outProtocol writeI32: [key97 intValue]];
          [[__subRatingRS objectForKey: key97] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__isAggregator_isset) {
    [outProtocol writeFieldBeginWithName: @"isAggregator" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __isAggregator];
    [outProtocol writeFieldEnd];
  }
  if (__doAggregatedImpactRating_isset) {
    [outProtocol writeFieldBeginWithName: @"doAggregatedImpactRating" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __doAggregatedImpactRating];
    [outProtocol writeFieldEnd];
  }
  if (__hasItemizedRatings_isset) {
    [outProtocol writeFieldBeginWithName: @"hasItemizedRatings" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __hasItemizedRatings];
    [outProtocol writeFieldEnd];
  }
  if (__allowsComments_isset) {
    [outProtocol writeFieldBeginWithName: @"allowsComments" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __allowsComments];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__sourceGroup_isset) {
    if (__sourceGroup != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceGroup" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __sourceGroup];
      [outProtocol writeFieldEnd];
    }
  }
  if (__collectorDefaults_isset) {
    if (__collectorDefaults != nil) {
      [outProtocol writeFieldBeginWithName: @"collectorDefaults" type: TType_STRUCT fieldID: 14];
      [__collectorDefaults write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__urlRegexp_isset) {
    if (__urlRegexp != nil) {
      [outProtocol writeFieldBeginWithName: @"urlRegexp" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __urlRegexp];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sendAlerts_isset) {
    [outProtocol writeFieldBeginWithName: @"sendAlerts" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __sendAlerts];
    [outProtocol writeFieldEnd];
  }
  if (__hasRating_isset) {
    [outProtocol writeFieldBeginWithName: @"hasRating" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __hasRating];
    [outProtocol writeFieldEnd];
  }
  if (__scoreable_isset) {
    [outProtocol writeFieldBeginWithName: @"scoreable" type: TType_BOOL fieldID: 18];
    [outProtocol writeBool: __scoreable];
    [outProtocol writeFieldEnd];
  }
  if (__publishable_isset) {
    [outProtocol writeFieldBeginWithName: @"publishable" type: TType_BOOL fieldID: 19];
    [outProtocol writeBool: __publishable];
    [outProtocol writeFieldEnd];
  }
  if (__schedulable_isset) {
    [outProtocol writeFieldBeginWithName: @"schedulable" type: TType_BOOL fieldID: 20];
    [outProtocol writeBool: __schedulable];
    [outProtocol writeFieldEnd];
  }
  if (__autofindable_isset) {
    [outProtocol writeFieldBeginWithName: @"autofindable" type: TType_BOOL fieldID: 21];
    [outProtocol writeBool: __autofindable];
    [outProtocol writeFieldEnd];
  }
  if (__viewable_isset) {
    [outProtocol writeFieldBeginWithName: @"viewable" type: TType_BOOL fieldID: 22];
    [outProtocol writeBool: __viewable];
    [outProtocol writeFieldEnd];
  }
  if (__requestReviewable_isset) {
    [outProtocol writeFieldBeginWithName: @"requestReviewable" type: TType_BOOL fieldID: 23];
    [outProtocol writeBool: __requestReviewable];
    [outProtocol writeFieldEnd];
  }
  if (__collectable_isset) {
    [outProtocol writeFieldBeginWithName: @"collectable" type: TType_BOOL fieldID: 24];
    [outProtocol writeBool: __collectable];
    [outProtocol writeFieldEnd];
  }
  if (__industryWeights_isset) {
    if (__industryWeights != nil) {
      [outProtocol writeFieldBeginWithName: @"industryWeights" type: TType_MAP fieldID: 25];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_DOUBLE size: [__industryWeights count]];
        NSEnumerator * _iter98 = [__industryWeights keyEnumerator];
        id key99;
        while ((key99 = [_iter98 nextObject]))
        {
          [outProtocol writeString: key99];
          [outProtocol writeDouble: [[__industryWeights objectForKey: key99] doubleValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__domain_isset) {
    if (__domain != nil) {
      [outProtocol writeFieldBeginWithName: @"domain" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__colors_isset) {
    if (__colors != nil) {
      [outProtocol writeFieldBeginWithName: @"colors" type: TType_STRUCT fieldID: 27];
      [__colors write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__listingUrl_isset) {
    if (__listingUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"listingUrl" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __listingUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_LIST fieldID: 29];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__attributes count]];
        int i101;
        for (i101 = 0; i101 < [__attributes count]; i101++)
        {
          [outProtocol writeString: [__attributes objectAtIndex: i101]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__idFields_isset) {
    if (__idFields != nil) {
      [outProtocol writeFieldBeginWithName: @"idFields" type: TType_LIST fieldID: 30];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__idFields count]];
        int i103;
        for (i103 = 0; i103 < [__idFields count]; i103++)
        {
          [outProtocol writeString: [__idFields objectAtIndex: i103]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__createUrl_isset) {
    if (__createUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"createUrl" type: TType_STRING fieldID: 31];
      [outProtocol writeString: __createUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__claimUrl_isset) {
    if (__claimUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"claimUrl" type: TType_STRING fieldID: 32];
      [outProtocol writeString: __claimUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isListing_isset) {
    [outProtocol writeFieldBeginWithName: @"isListing" type: TType_BOOL fieldID: 33];
    [outProtocol writeBool: __isListing];
    [outProtocol writeFieldEnd];
  }
  if (__preserveDate_isset) {
    [outProtocol writeFieldBeginWithName: @"preserveDate" type: TType_BOOL fieldID: 34];
    [outProtocol writeBool: __preserveDate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Source("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",urls:"];
  [ms appendFormat: @"%@", __urls];
  [ms appendString: @",smallIconPath:"];
  [ms appendFormat: @"\"%@\"", __smallIconPath];
  [ms appendString: @",largeIconPath:"];
  [ms appendFormat: @"\"%@\"", __largeIconPath];
  [ms appendString: @",overallRS:"];
  [ms appendFormat: @"%@", __overallRS];
  [ms appendString: @",subRatingRS:"];
  [ms appendFormat: @"%@", __subRatingRS];
  [ms appendString: @",isAggregator:"];
  [ms appendFormat: @"%i", __isAggregator];
  [ms appendString: @",doAggregatedImpactRating:"];
  [ms appendFormat: @"%i", __doAggregatedImpactRating];
  [ms appendString: @",hasItemizedRatings:"];
  [ms appendFormat: @"%i", __hasItemizedRatings];
  [ms appendString: @",allowsComments:"];
  [ms appendFormat: @"%i", __allowsComments];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",sourceGroup:"];
  [ms appendFormat: @"\"%@\"", __sourceGroup];
  [ms appendString: @",collectorDefaults:"];
  [ms appendFormat: @"%@", __collectorDefaults];
  [ms appendString: @",urlRegexp:"];
  [ms appendFormat: @"\"%@\"", __urlRegexp];
  [ms appendString: @",sendAlerts:"];
  [ms appendFormat: @"%i", __sendAlerts];
  [ms appendString: @",hasRating:"];
  [ms appendFormat: @"%i", __hasRating];
  [ms appendString: @",scoreable:"];
  [ms appendFormat: @"%i", __scoreable];
  [ms appendString: @",publishable:"];
  [ms appendFormat: @"%i", __publishable];
  [ms appendString: @",schedulable:"];
  [ms appendFormat: @"%i", __schedulable];
  [ms appendString: @",autofindable:"];
  [ms appendFormat: @"%i", __autofindable];
  [ms appendString: @",viewable:"];
  [ms appendFormat: @"%i", __viewable];
  [ms appendString: @",requestReviewable:"];
  [ms appendFormat: @"%i", __requestReviewable];
  [ms appendString: @",collectable:"];
  [ms appendFormat: @"%i", __collectable];
  [ms appendString: @",industryWeights:"];
  [ms appendFormat: @"%@", __industryWeights];
  [ms appendString: @",domain:"];
  [ms appendFormat: @"\"%@\"", __domain];
  [ms appendString: @",colors:"];
  [ms appendFormat: @"%@", __colors];
  [ms appendString: @",listingUrl:"];
  [ms appendFormat: @"\"%@\"", __listingUrl];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",idFields:"];
  [ms appendFormat: @"%@", __idFields];
  [ms appendString: @",createUrl:"];
  [ms appendFormat: @"\"%@\"", __createUrl];
  [ms appendString: @",claimUrl:"];
  [ms appendFormat: @"\"%@\"", __claimUrl];
  [ms appendString: @",isListing:"];
  [ms appendFormat: @"%i", __isListing];
  [ms appendString: @",preserveDate:"];
  [ms appendFormat: @"%i", __preserveDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Filter

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.operator = @"=";

#endif
  return self;
}

- (id) initWithName: (NSString *) name values: (NSMutableArray *) values operator: (NSString *) operator
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __values = [values retain_stub];
  __values_isset = YES;
  __operator = [operator retain_stub];
  __operator_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"values"])
  {
    __values = [[decoder decodeObjectForKey: @"values"] retain_stub];
    __values_isset = YES;
  }
  if ([decoder containsValueForKey: @"operator"])
  {
    __operator = [[decoder decodeObjectForKey: @"operator"] retain_stub];
    __operator_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__values_isset)
  {
    [encoder encodeObject: __values forKey: @"values"];
  }
  if (__operator_isset)
  {
    [encoder encodeObject: __operator forKey: @"operator"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__values release_stub];
  [__operator release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableArray *) values {
  return [[__values retain_stub] autorelease_stub];
}

- (void) setValues: (NSMutableArray *) values {
  [values retain_stub];
  [__values release_stub];
  __values = values;
  __values_isset = YES;
}

- (BOOL) valuesIsSet {
  return __values_isset;
}

- (void) unsetValues {
  [__values release_stub];
  __values = nil;
  __values_isset = NO;
}

- (NSString *) operator {
  return [[__operator retain_stub] autorelease_stub];
}

- (void) setOperator: (NSString *) operator {
  [operator retain_stub];
  [__operator release_stub];
  __operator = operator;
  __operator_isset = YES;
}

- (BOOL) operatorIsSet {
  return __operator_isset;
}

- (void) unsetOperator {
  [__operator release_stub];
  __operator = nil;
  __operator_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size104;
          [inProtocol readListBeginReturningElementType: NULL size: &_size104];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size104];
          int _i105;
          for (_i105 = 0; _i105 < _size104; ++_i105)
          {
            NSString * _elem106 = [inProtocol readString];
            [fieldValue addObject: _elem106];
          }
          [inProtocol readListEnd];
          [self setValues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOperator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Filter"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__values_isset) {
    if (__values != nil) {
      [outProtocol writeFieldBeginWithName: @"values" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__values count]];
        int i108;
        for (i108 = 0; i108 < [__values count]; i108++)
        {
          [outProtocol writeString: [__values objectAtIndex: i108]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__operator_isset) {
    if (__operator != nil) {
      [outProtocol writeFieldBeginWithName: @"operator" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __operator];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Filter("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",values:"];
  [ms appendFormat: @"%@", __values];
  [ms appendString: @",operator:"];
  [ms appendFormat: @"\"%@\"", __operator];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sort

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name sortOrder: (int) sortOrder
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __sortOrder = sortOrder;
  __sortOrder_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"sortOrder"])
  {
    __sortOrder = [decoder decodeIntForKey: @"sortOrder"];
    __sortOrder_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__sortOrder_isset)
  {
    [encoder encodeInt: __sortOrder forKey: @"sortOrder"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int) sortOrder {
  return __sortOrder;
}

- (void) setSortOrder: (int) sortOrder {
  __sortOrder = sortOrder;
  __sortOrder_isset = YES;
}

- (BOOL) sortOrderIsSet {
  return __sortOrder_isset;
}

- (void) unsetSortOrder {
  __sortOrder_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSortOrder: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sort"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sortOrder_isset) {
    [outProtocol writeFieldBeginWithName: @"sortOrder" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __sortOrder];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sort("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",sortOrder:"];
  [ms appendFormat: @"%i", __sortOrder];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchFilter

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDateRangeFilterId: (NSString *) dateRangeFilterId sentimentFilters: (NSMutableArray *) sentimentFilters sourceSiteFilter: (NSMutableArray *) sourceSiteFilter startDate: (NSString *) startDate endDate: (NSString *) endDate
{
  self = [super init];
  __dateRangeFilterId = [dateRangeFilterId retain_stub];
  __dateRangeFilterId_isset = YES;
  __sentimentFilters = [sentimentFilters retain_stub];
  __sentimentFilters_isset = YES;
  __sourceSiteFilter = [sourceSiteFilter retain_stub];
  __sourceSiteFilter_isset = YES;
  __startDate = [startDate retain_stub];
  __startDate_isset = YES;
  __endDate = [endDate retain_stub];
  __endDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"dateRangeFilterId"])
  {
    __dateRangeFilterId = [[decoder decodeObjectForKey: @"dateRangeFilterId"] retain_stub];
    __dateRangeFilterId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sentimentFilters"])
  {
    __sentimentFilters = [[decoder decodeObjectForKey: @"sentimentFilters"] retain_stub];
    __sentimentFilters_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceSiteFilter"])
  {
    __sourceSiteFilter = [[decoder decodeObjectForKey: @"sourceSiteFilter"] retain_stub];
    __sourceSiteFilter_isset = YES;
  }
  if ([decoder containsValueForKey: @"startDate"])
  {
    __startDate = [[decoder decodeObjectForKey: @"startDate"] retain_stub];
    __startDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"endDate"])
  {
    __endDate = [[decoder decodeObjectForKey: @"endDate"] retain_stub];
    __endDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__dateRangeFilterId_isset)
  {
    [encoder encodeObject: __dateRangeFilterId forKey: @"dateRangeFilterId"];
  }
  if (__sentimentFilters_isset)
  {
    [encoder encodeObject: __sentimentFilters forKey: @"sentimentFilters"];
  }
  if (__sourceSiteFilter_isset)
  {
    [encoder encodeObject: __sourceSiteFilter forKey: @"sourceSiteFilter"];
  }
  if (__startDate_isset)
  {
    [encoder encodeObject: __startDate forKey: @"startDate"];
  }
  if (__endDate_isset)
  {
    [encoder encodeObject: __endDate forKey: @"endDate"];
  }
}

- (void) dealloc
{
  [__dateRangeFilterId release_stub];
  [__sentimentFilters release_stub];
  [__sourceSiteFilter release_stub];
  [__startDate release_stub];
  [__endDate release_stub];
  [super dealloc_stub];
}

- (NSString *) dateRangeFilterId {
  return [[__dateRangeFilterId retain_stub] autorelease_stub];
}

- (void) setDateRangeFilterId: (NSString *) dateRangeFilterId {
  [dateRangeFilterId retain_stub];
  [__dateRangeFilterId release_stub];
  __dateRangeFilterId = dateRangeFilterId;
  __dateRangeFilterId_isset = YES;
}

- (BOOL) dateRangeFilterIdIsSet {
  return __dateRangeFilterId_isset;
}

- (void) unsetDateRangeFilterId {
  [__dateRangeFilterId release_stub];
  __dateRangeFilterId = nil;
  __dateRangeFilterId_isset = NO;
}

- (NSMutableArray *) sentimentFilters {
  return [[__sentimentFilters retain_stub] autorelease_stub];
}

- (void) setSentimentFilters: (NSMutableArray *) sentimentFilters {
  [sentimentFilters retain_stub];
  [__sentimentFilters release_stub];
  __sentimentFilters = sentimentFilters;
  __sentimentFilters_isset = YES;
}

- (BOOL) sentimentFiltersIsSet {
  return __sentimentFilters_isset;
}

- (void) unsetSentimentFilters {
  [__sentimentFilters release_stub];
  __sentimentFilters = nil;
  __sentimentFilters_isset = NO;
}

- (NSMutableArray *) sourceSiteFilter {
  return [[__sourceSiteFilter retain_stub] autorelease_stub];
}

- (void) setSourceSiteFilter: (NSMutableArray *) sourceSiteFilter {
  [sourceSiteFilter retain_stub];
  [__sourceSiteFilter release_stub];
  __sourceSiteFilter = sourceSiteFilter;
  __sourceSiteFilter_isset = YES;
}

- (BOOL) sourceSiteFilterIsSet {
  return __sourceSiteFilter_isset;
}

- (void) unsetSourceSiteFilter {
  [__sourceSiteFilter release_stub];
  __sourceSiteFilter = nil;
  __sourceSiteFilter_isset = NO;
}

- (NSString *) startDate {
  return [[__startDate retain_stub] autorelease_stub];
}

- (void) setStartDate: (NSString *) startDate {
  [startDate retain_stub];
  [__startDate release_stub];
  __startDate = startDate;
  __startDate_isset = YES;
}

- (BOOL) startDateIsSet {
  return __startDate_isset;
}

- (void) unsetStartDate {
  [__startDate release_stub];
  __startDate = nil;
  __startDate_isset = NO;
}

- (NSString *) endDate {
  return [[__endDate retain_stub] autorelease_stub];
}

- (void) setEndDate: (NSString *) endDate {
  [endDate retain_stub];
  [__endDate release_stub];
  __endDate = endDate;
  __endDate_isset = YES;
}

- (BOOL) endDateIsSet {
  return __endDate_isset;
}

- (void) unsetEndDate {
  [__endDate release_stub];
  __endDate = nil;
  __endDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDateRangeFilterId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size109;
          [inProtocol readListBeginReturningElementType: NULL size: &_size109];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size109];
          int _i110;
          for (_i110 = 0; _i110 < _size109; ++_i110)
          {
            NSString * _elem111 = [inProtocol readString];
            [fieldValue addObject: _elem111];
          }
          [inProtocol readListEnd];
          [self setSentimentFilters: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size112;
          [inProtocol readListBeginReturningElementType: NULL size: &_size112];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size112];
          int _i113;
          for (_i113 = 0; _i113 < _size112; ++_i113)
          {
            NSString * _elem114 = [inProtocol readString];
            [fieldValue addObject: _elem114];
          }
          [inProtocol readListEnd];
          [self setSourceSiteFilter: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchFilter"];
  if (__dateRangeFilterId_isset) {
    if (__dateRangeFilterId != nil) {
      [outProtocol writeFieldBeginWithName: @"dateRangeFilterId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __dateRangeFilterId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sentimentFilters_isset) {
    if (__sentimentFilters != nil) {
      [outProtocol writeFieldBeginWithName: @"sentimentFilters" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__sentimentFilters count]];
        int i116;
        for (i116 = 0; i116 < [__sentimentFilters count]; i116++)
        {
          [outProtocol writeString: [__sentimentFilters objectAtIndex: i116]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceSiteFilter_isset) {
    if (__sourceSiteFilter != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceSiteFilter" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__sourceSiteFilter count]];
        int i118;
        for (i118 = 0; i118 < [__sourceSiteFilter count]; i118++)
        {
          [outProtocol writeString: [__sourceSiteFilter objectAtIndex: i118]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__startDate_isset) {
    if (__startDate != nil) {
      [outProtocol writeFieldBeginWithName: @"startDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __startDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endDate_isset) {
    if (__endDate != nil) {
      [outProtocol writeFieldBeginWithName: @"endDate" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __endDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchFilter("];
  [ms appendString: @"dateRangeFilterId:"];
  [ms appendFormat: @"\"%@\"", __dateRangeFilterId];
  [ms appendString: @",sentimentFilters:"];
  [ms appendFormat: @"%@", __sentimentFilters];
  [ms appendString: @",sourceSiteFilter:"];
  [ms appendFormat: @"%@", __sourceSiteFilter];
  [ms appendString: @",startDate:"];
  [ms appendFormat: @"\"%@\"", __startDate];
  [ms appendString: @",endDate:"];
  [ms appendFormat: @"\"%@\"", __endDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Reviewer

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id name: (NSString *) name location: (NSString *) location photoUrl: (NSString *) photoUrl profileUrl: (NSString *) profileUrl numReviews: (int32_t) numReviews numComments: (int32_t) numComments avgRating: (double) avgRating age: (NSString *) age email: (NSString *) email phone: (NSString *) phone
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __photoUrl = [photoUrl retain_stub];
  __photoUrl_isset = YES;
  __profileUrl = [profileUrl retain_stub];
  __profileUrl_isset = YES;
  __numReviews = numReviews;
  __numReviews_isset = YES;
  __numComments = numComments;
  __numComments_isset = YES;
  __avgRating = avgRating;
  __avgRating_isset = YES;
  __age = [age retain_stub];
  __age_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoUrl"])
  {
    __photoUrl = [[decoder decodeObjectForKey: @"photoUrl"] retain_stub];
    __photoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileUrl"])
  {
    __profileUrl = [[decoder decodeObjectForKey: @"profileUrl"] retain_stub];
    __profileUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"numReviews"])
  {
    __numReviews = [decoder decodeInt32ForKey: @"numReviews"];
    __numReviews_isset = YES;
  }
  if ([decoder containsValueForKey: @"numComments"])
  {
    __numComments = [decoder decodeInt32ForKey: @"numComments"];
    __numComments_isset = YES;
  }
  if ([decoder containsValueForKey: @"avgRating"])
  {
    __avgRating = [decoder decodeDoubleForKey: @"avgRating"];
    __avgRating_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [[decoder decodeObjectForKey: @"age"] retain_stub];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__photoUrl_isset)
  {
    [encoder encodeObject: __photoUrl forKey: @"photoUrl"];
  }
  if (__profileUrl_isset)
  {
    [encoder encodeObject: __profileUrl forKey: @"profileUrl"];
  }
  if (__numReviews_isset)
  {
    [encoder encodeInt32: __numReviews forKey: @"numReviews"];
  }
  if (__numComments_isset)
  {
    [encoder encodeInt32: __numComments forKey: @"numComments"];
  }
  if (__avgRating_isset)
  {
    [encoder encodeDouble: __avgRating forKey: @"avgRating"];
  }
  if (__age_isset)
  {
    [encoder encodeObject: __age forKey: @"age"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__name release_stub];
  [__location release_stub];
  [__photoUrl release_stub];
  [__profileUrl release_stub];
  [__age release_stub];
  [__email release_stub];
  [__phone release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (NSString *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (NSString *) photoUrl {
  return [[__photoUrl retain_stub] autorelease_stub];
}

- (void) setPhotoUrl: (NSString *) photoUrl {
  [photoUrl retain_stub];
  [__photoUrl release_stub];
  __photoUrl = photoUrl;
  __photoUrl_isset = YES;
}

- (BOOL) photoUrlIsSet {
  return __photoUrl_isset;
}

- (void) unsetPhotoUrl {
  [__photoUrl release_stub];
  __photoUrl = nil;
  __photoUrl_isset = NO;
}

- (NSString *) profileUrl {
  return [[__profileUrl retain_stub] autorelease_stub];
}

- (void) setProfileUrl: (NSString *) profileUrl {
  [profileUrl retain_stub];
  [__profileUrl release_stub];
  __profileUrl = profileUrl;
  __profileUrl_isset = YES;
}

- (BOOL) profileUrlIsSet {
  return __profileUrl_isset;
}

- (void) unsetProfileUrl {
  [__profileUrl release_stub];
  __profileUrl = nil;
  __profileUrl_isset = NO;
}

- (int32_t) numReviews {
  return __numReviews;
}

- (void) setNumReviews: (int32_t) numReviews {
  __numReviews = numReviews;
  __numReviews_isset = YES;
}

- (BOOL) numReviewsIsSet {
  return __numReviews_isset;
}

- (void) unsetNumReviews {
  __numReviews_isset = NO;
}

- (int32_t) numComments {
  return __numComments;
}

- (void) setNumComments: (int32_t) numComments {
  __numComments = numComments;
  __numComments_isset = YES;
}

- (BOOL) numCommentsIsSet {
  return __numComments_isset;
}

- (void) unsetNumComments {
  __numComments_isset = NO;
}

- (double) avgRating {
  return __avgRating;
}

- (void) setAvgRating: (double) avgRating {
  __avgRating = avgRating;
  __avgRating_isset = YES;
}

- (BOOL) avgRatingIsSet {
  return __avgRating_isset;
}

- (void) unsetAvgRating {
  __avgRating_isset = NO;
}

- (NSString *) age {
  return [[__age retain_stub] autorelease_stub];
}

- (void) setAge: (NSString *) age {
  [age retain_stub];
  [__age release_stub];
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  [__age release_stub];
  __age = nil;
  __age_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProfileUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumReviews: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumComments: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAvgRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Reviewer"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __location];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photoUrl_isset) {
    if (__photoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"photoUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __photoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileUrl_isset) {
    if (__profileUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"profileUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __profileUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__numReviews_isset) {
    [outProtocol writeFieldBeginWithName: @"numReviews" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __numReviews];
    [outProtocol writeFieldEnd];
  }
  if (__numComments_isset) {
    [outProtocol writeFieldBeginWithName: @"numComments" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __numComments];
    [outProtocol writeFieldEnd];
  }
  if (__avgRating_isset) {
    [outProtocol writeFieldBeginWithName: @"avgRating" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __avgRating];
    [outProtocol writeFieldEnd];
  }
  if (__age_isset) {
    if (__age != nil) {
      [outProtocol writeFieldBeginWithName: @"age" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __age];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Reviewer("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",location:"];
  [ms appendFormat: @"\"%@\"", __location];
  [ms appendString: @",photoUrl:"];
  [ms appendFormat: @"\"%@\"", __photoUrl];
  [ms appendString: @",profileUrl:"];
  [ms appendFormat: @"\"%@\"", __profileUrl];
  [ms appendString: @",numReviews:"];
  [ms appendFormat: @"%i", __numReviews];
  [ms appendString: @",numComments:"];
  [ms appendFormat: @"%i", __numComments];
  [ms appendString: @",avgRating:"];
  [ms appendFormat: @"%f", __avgRating];
  [ms appendString: @",age:"];
  [ms appendFormat: @"\"%@\"", __age];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Keyword

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKeyword: (NSString *) keyword categories: (NSMutableArray *) categories
{
  self = [super init];
  __keyword = [keyword retain_stub];
  __keyword_isset = YES;
  __categories = [categories retain_stub];
  __categories_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"keyword"])
  {
    __keyword = [[decoder decodeObjectForKey: @"keyword"] retain_stub];
    __keyword_isset = YES;
  }
  if ([decoder containsValueForKey: @"categories"])
  {
    __categories = [[decoder decodeObjectForKey: @"categories"] retain_stub];
    __categories_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__keyword_isset)
  {
    [encoder encodeObject: __keyword forKey: @"keyword"];
  }
  if (__categories_isset)
  {
    [encoder encodeObject: __categories forKey: @"categories"];
  }
}

- (void) dealloc
{
  [__keyword release_stub];
  [__categories release_stub];
  [super dealloc_stub];
}

- (NSString *) keyword {
  return [[__keyword retain_stub] autorelease_stub];
}

- (void) setKeyword: (NSString *) keyword {
  [keyword retain_stub];
  [__keyword release_stub];
  __keyword = keyword;
  __keyword_isset = YES;
}

- (BOOL) keywordIsSet {
  return __keyword_isset;
}

- (void) unsetKeyword {
  [__keyword release_stub];
  __keyword = nil;
  __keyword_isset = NO;
}

- (NSMutableArray *) categories {
  return [[__categories retain_stub] autorelease_stub];
}

- (void) setCategories: (NSMutableArray *) categories {
  [categories retain_stub];
  [__categories release_stub];
  __categories = categories;
  __categories_isset = YES;
}

- (BOOL) categoriesIsSet {
  return __categories_isset;
}

- (void) unsetCategories {
  [__categories release_stub];
  __categories = nil;
  __categories_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKeyword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size119;
          [inProtocol readListBeginReturningElementType: NULL size: &_size119];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size119];
          int _i120;
          for (_i120 = 0; _i120 < _size119; ++_i120)
          {
            NSString * _elem121 = [inProtocol readString];
            [fieldValue addObject: _elem121];
          }
          [inProtocol readListEnd];
          [self setCategories: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Keyword"];
  if (__keyword_isset) {
    if (__keyword != nil) {
      [outProtocol writeFieldBeginWithName: @"keyword" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __keyword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__categories_isset) {
    if (__categories != nil) {
      [outProtocol writeFieldBeginWithName: @"categories" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__categories count]];
        int i123;
        for (i123 = 0; i123 < [__categories count]; i123++)
        {
          [outProtocol writeString: [__categories objectAtIndex: i123]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Keyword("];
  [ms appendString: @"keyword:"];
  [ms appendFormat: @"\"%@\"", __keyword];
  [ms appendString: @",categories:"];
  [ms appendFormat: @"%@", __categories];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SubRating

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithT: (int) t n: (NSString *) n v: (double) v normalizedV: (double) normalizedV textV: (NSString *) textV
{
  self = [super init];
  __t = t;
  __t_isset = YES;
  __n = [n retain_stub];
  __n_isset = YES;
  __v = v;
  __v_isset = YES;
  __normalizedV = normalizedV;
  __normalizedV_isset = YES;
  __textV = [textV retain_stub];
  __textV_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"t"])
  {
    __t = [decoder decodeIntForKey: @"t"];
    __t_isset = YES;
  }
  if ([decoder containsValueForKey: @"n"])
  {
    __n = [[decoder decodeObjectForKey: @"n"] retain_stub];
    __n_isset = YES;
  }
  if ([decoder containsValueForKey: @"v"])
  {
    __v = [decoder decodeDoubleForKey: @"v"];
    __v_isset = YES;
  }
  if ([decoder containsValueForKey: @"normalizedV"])
  {
    __normalizedV = [decoder decodeDoubleForKey: @"normalizedV"];
    __normalizedV_isset = YES;
  }
  if ([decoder containsValueForKey: @"textV"])
  {
    __textV = [[decoder decodeObjectForKey: @"textV"] retain_stub];
    __textV_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__t_isset)
  {
    [encoder encodeInt: __t forKey: @"t"];
  }
  if (__n_isset)
  {
    [encoder encodeObject: __n forKey: @"n"];
  }
  if (__v_isset)
  {
    [encoder encodeDouble: __v forKey: @"v"];
  }
  if (__normalizedV_isset)
  {
    [encoder encodeDouble: __normalizedV forKey: @"normalizedV"];
  }
  if (__textV_isset)
  {
    [encoder encodeObject: __textV forKey: @"textV"];
  }
}

- (void) dealloc
{
  [__n release_stub];
  [__textV release_stub];
  [super dealloc_stub];
}

- (int) t {
  return __t;
}

- (void) setT: (int) t {
  __t = t;
  __t_isset = YES;
}

- (BOOL) tIsSet {
  return __t_isset;
}

- (void) unsetT {
  __t_isset = NO;
}

- (NSString *) n {
  return [[__n retain_stub] autorelease_stub];
}

- (void) setN: (NSString *) n {
  [n retain_stub];
  [__n release_stub];
  __n = n;
  __n_isset = YES;
}

- (BOOL) nIsSet {
  return __n_isset;
}

- (void) unsetN {
  [__n release_stub];
  __n = nil;
  __n_isset = NO;
}

- (double) v {
  return __v;
}

- (void) setV: (double) v {
  __v = v;
  __v_isset = YES;
}

- (BOOL) vIsSet {
  return __v_isset;
}

- (void) unsetV {
  __v_isset = NO;
}

- (double) normalizedV {
  return __normalizedV;
}

- (void) setNormalizedV: (double) normalizedV {
  __normalizedV = normalizedV;
  __normalizedV_isset = YES;
}

- (BOOL) normalizedVIsSet {
  return __normalizedV_isset;
}

- (void) unsetNormalizedV {
  __normalizedV_isset = NO;
}

- (NSString *) textV {
  return [[__textV retain_stub] autorelease_stub];
}

- (void) setTextV: (NSString *) textV {
  [textV retain_stub];
  [__textV release_stub];
  __textV = textV;
  __textV_isset = YES;
}

- (BOOL) textVIsSet {
  return __textV_isset;
}

- (void) unsetTextV {
  [__textV release_stub];
  __textV = nil;
  __textV_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setT: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setN: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setV: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setNormalizedV: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTextV: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubRating"];
  if (__t_isset) {
    [outProtocol writeFieldBeginWithName: @"t" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __t];
    [outProtocol writeFieldEnd];
  }
  if (__n_isset) {
    if (__n != nil) {
      [outProtocol writeFieldBeginWithName: @"n" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __n];
      [outProtocol writeFieldEnd];
    }
  }
  if (__v_isset) {
    [outProtocol writeFieldBeginWithName: @"v" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __v];
    [outProtocol writeFieldEnd];
  }
  if (__normalizedV_isset) {
    [outProtocol writeFieldBeginWithName: @"normalizedV" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __normalizedV];
    [outProtocol writeFieldEnd];
  }
  if (__textV_isset) {
    if (__textV != nil) {
      [outProtocol writeFieldBeginWithName: @"textV" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __textV];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SubRating("];
  [ms appendString: @"t:"];
  [ms appendFormat: @"%i", __t];
  [ms appendString: @",n:"];
  [ms appendFormat: @"\"%@\"", __n];
  [ms appendString: @",v:"];
  [ms appendFormat: @"%f", __v];
  [ms appendString: @",normalizedV:"];
  [ms appendFormat: @"%f", __normalizedV];
  [ms appendString: @",textV:"];
  [ms appendFormat: @"\"%@\"", __textV];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Tag

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithT: (int) t n: (NSString *) n v: (double) v
{
  self = [super init];
  __t = t;
  __t_isset = YES;
  __n = [n retain_stub];
  __n_isset = YES;
  __v = v;
  __v_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"t"])
  {
    __t = [decoder decodeIntForKey: @"t"];
    __t_isset = YES;
  }
  if ([decoder containsValueForKey: @"n"])
  {
    __n = [[decoder decodeObjectForKey: @"n"] retain_stub];
    __n_isset = YES;
  }
  if ([decoder containsValueForKey: @"v"])
  {
    __v = [decoder decodeDoubleForKey: @"v"];
    __v_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__t_isset)
  {
    [encoder encodeInt: __t forKey: @"t"];
  }
  if (__n_isset)
  {
    [encoder encodeObject: __n forKey: @"n"];
  }
  if (__v_isset)
  {
    [encoder encodeDouble: __v forKey: @"v"];
  }
}

- (void) dealloc
{
  [__n release_stub];
  [super dealloc_stub];
}

- (int) t {
  return __t;
}

- (void) setT: (int) t {
  __t = t;
  __t_isset = YES;
}

- (BOOL) tIsSet {
  return __t_isset;
}

- (void) unsetT {
  __t_isset = NO;
}

- (NSString *) n {
  return [[__n retain_stub] autorelease_stub];
}

- (void) setN: (NSString *) n {
  [n retain_stub];
  [__n release_stub];
  __n = n;
  __n_isset = YES;
}

- (BOOL) nIsSet {
  return __n_isset;
}

- (void) unsetN {
  [__n release_stub];
  __n = nil;
  __n_isset = NO;
}

- (double) v {
  return __v;
}

- (void) setV: (double) v {
  __v = v;
  __v_isset = YES;
}

- (BOOL) vIsSet {
  return __v_isset;
}

- (void) unsetV {
  __v_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setT: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setN: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setV: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Tag"];
  if (__t_isset) {
    [outProtocol writeFieldBeginWithName: @"t" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __t];
    [outProtocol writeFieldEnd];
  }
  if (__n_isset) {
    if (__n != nil) {
      [outProtocol writeFieldBeginWithName: @"n" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __n];
      [outProtocol writeFieldEnd];
    }
  }
  if (__v_isset) {
    [outProtocol writeFieldBeginWithName: @"v" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __v];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Tag("];
  [ms appendString: @"t:"];
  [ms appendFormat: @"%i", __t];
  [ms appendString: @",n:"];
  [ms appendFormat: @"\"%@\"", __n];
  [ms appendString: @",v:"];
  [ms appendFormat: @"%f", __v];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Property

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name values: (NSMutableArray *) values
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __values = [values retain_stub];
  __values_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"values"])
  {
    __values = [[decoder decodeObjectForKey: @"values"] retain_stub];
    __values_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__values_isset)
  {
    [encoder encodeObject: __values forKey: @"values"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__values release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableArray *) values {
  return [[__values retain_stub] autorelease_stub];
}

- (void) setValues: (NSMutableArray *) values {
  [values retain_stub];
  [__values release_stub];
  __values = values;
  __values_isset = YES;
}

- (BOOL) valuesIsSet {
  return __values_isset;
}

- (void) unsetValues {
  [__values release_stub];
  __values = nil;
  __values_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size124;
          [inProtocol readListBeginReturningElementType: NULL size: &_size124];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size124];
          int _i125;
          for (_i125 = 0; _i125 < _size124; ++_i125)
          {
            NSString * _elem126 = [inProtocol readString];
            [fieldValue addObject: _elem126];
          }
          [inProtocol readListEnd];
          [self setValues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Property"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__values_isset) {
    if (__values != nil) {
      [outProtocol writeFieldBeginWithName: @"values" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__values count]];
        int i128;
        for (i128 = 0; i128 < [__values count]; i128++)
        {
          [outProtocol writeString: [__values objectAtIndex: i128]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Property("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",values:"];
  [ms appendFormat: @"%@", __values];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserPreference

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPreferenceId: (NSString *) preferenceId category: (int) category enabled: (BOOL) enabled
{
  self = [super init];
  __preferenceId = [preferenceId retain_stub];
  __preferenceId_isset = YES;
  __category = category;
  __category_isset = YES;
  __enabled = enabled;
  __enabled_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"preferenceId"])
  {
    __preferenceId = [[decoder decodeObjectForKey: @"preferenceId"] retain_stub];
    __preferenceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"category"])
  {
    __category = [decoder decodeIntForKey: @"category"];
    __category_isset = YES;
  }
  if ([decoder containsValueForKey: @"enabled"])
  {
    __enabled = [decoder decodeBoolForKey: @"enabled"];
    __enabled_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__preferenceId_isset)
  {
    [encoder encodeObject: __preferenceId forKey: @"preferenceId"];
  }
  if (__category_isset)
  {
    [encoder encodeInt: __category forKey: @"category"];
  }
  if (__enabled_isset)
  {
    [encoder encodeBool: __enabled forKey: @"enabled"];
  }
}

- (void) dealloc
{
  [__preferenceId release_stub];
  [super dealloc_stub];
}

- (NSString *) preferenceId {
  return [[__preferenceId retain_stub] autorelease_stub];
}

- (void) setPreferenceId: (NSString *) preferenceId {
  [preferenceId retain_stub];
  [__preferenceId release_stub];
  __preferenceId = preferenceId;
  __preferenceId_isset = YES;
}

- (BOOL) preferenceIdIsSet {
  return __preferenceId_isset;
}

- (void) unsetPreferenceId {
  [__preferenceId release_stub];
  __preferenceId = nil;
  __preferenceId_isset = NO;
}

- (int) category {
  return __category;
}

- (void) setCategory: (int) category {
  __category = category;
  __category_isset = YES;
}

- (BOOL) categoryIsSet {
  return __category_isset;
}

- (void) unsetCategory {
  __category_isset = NO;
}

- (BOOL) enabled {
  return __enabled;
}

- (void) setEnabled: (BOOL) enabled {
  __enabled = enabled;
  __enabled_isset = YES;
}

- (BOOL) enabledIsSet {
  return __enabled_isset;
}

- (void) unsetEnabled {
  __enabled_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPreferenceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setCategory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserPreference"];
  if (__preferenceId_isset) {
    if (__preferenceId != nil) {
      [outProtocol writeFieldBeginWithName: @"preferenceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __preferenceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__category_isset) {
    [outProtocol writeFieldBeginWithName: @"category" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __category];
    [outProtocol writeFieldEnd];
  }
  if (__enabled_isset) {
    [outProtocol writeFieldBeginWithName: @"enabled" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __enabled];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserPreference("];
  [ms appendString: @"preferenceId:"];
  [ms appendFormat: @"\"%@\"", __preferenceId];
  [ms appendString: @",category:"];
  [ms appendFormat: @"%i", __category];
  [ms appendString: @",enabled:"];
  [ms appendFormat: @"%i", __enabled];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FacetOption

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLabel: (NSString *) label value: (NSString *) value
{
  self = [super init];
  __label = [label retain_stub];
  __label_isset = YES;
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain_stub];
    __label_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (void) dealloc
{
  [__label release_stub];
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) label {
  return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (NSString *) label {
  [label retain_stub];
  [__label release_stub];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release_stub];
  __label = nil;
  __label_isset = NO;
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FacetOption"];
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FacetOption("];
  [ms appendString: @"label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Facet

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name label: (NSString *) label isMultiselect: (BOOL) isMultiselect isCustom: (BOOL) isCustom facetOptions: (NSMutableArray *) facetOptions
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __label = [label retain_stub];
  __label_isset = YES;
  __isMultiselect = isMultiselect;
  __isMultiselect_isset = YES;
  __isCustom = isCustom;
  __isCustom_isset = YES;
  __facetOptions = [facetOptions retain_stub];
  __facetOptions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"label"])
  {
    __label = [[decoder decodeObjectForKey: @"label"] retain_stub];
    __label_isset = YES;
  }
  if ([decoder containsValueForKey: @"isMultiselect"])
  {
    __isMultiselect = [decoder decodeBoolForKey: @"isMultiselect"];
    __isMultiselect_isset = YES;
  }
  if ([decoder containsValueForKey: @"isCustom"])
  {
    __isCustom = [decoder decodeBoolForKey: @"isCustom"];
    __isCustom_isset = YES;
  }
  if ([decoder containsValueForKey: @"facetOptions"])
  {
    __facetOptions = [[decoder decodeObjectForKey: @"facetOptions"] retain_stub];
    __facetOptions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__label_isset)
  {
    [encoder encodeObject: __label forKey: @"label"];
  }
  if (__isMultiselect_isset)
  {
    [encoder encodeBool: __isMultiselect forKey: @"isMultiselect"];
  }
  if (__isCustom_isset)
  {
    [encoder encodeBool: __isCustom forKey: @"isCustom"];
  }
  if (__facetOptions_isset)
  {
    [encoder encodeObject: __facetOptions forKey: @"facetOptions"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__label release_stub];
  [__facetOptions release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) label {
  return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (NSString *) label {
  [label retain_stub];
  [__label release_stub];
  __label = label;
  __label_isset = YES;
}

- (BOOL) labelIsSet {
  return __label_isset;
}

- (void) unsetLabel {
  [__label release_stub];
  __label = nil;
  __label_isset = NO;
}

- (BOOL) isMultiselect {
  return __isMultiselect;
}

- (void) setIsMultiselect: (BOOL) isMultiselect {
  __isMultiselect = isMultiselect;
  __isMultiselect_isset = YES;
}

- (BOOL) isMultiselectIsSet {
  return __isMultiselect_isset;
}

- (void) unsetIsMultiselect {
  __isMultiselect_isset = NO;
}

- (BOOL) isCustom {
  return __isCustom;
}

- (void) setIsCustom: (BOOL) isCustom {
  __isCustom = isCustom;
  __isCustom_isset = YES;
}

- (BOOL) isCustomIsSet {
  return __isCustom_isset;
}

- (void) unsetIsCustom {
  __isCustom_isset = NO;
}

- (NSMutableArray *) facetOptions {
  return [[__facetOptions retain_stub] autorelease_stub];
}

- (void) setFacetOptions: (NSMutableArray *) facetOptions {
  [facetOptions retain_stub];
  [__facetOptions release_stub];
  __facetOptions = facetOptions;
  __facetOptions_isset = YES;
}

- (BOOL) facetOptionsIsSet {
  return __facetOptions_isset;
}

- (void) unsetFacetOptions {
  [__facetOptions release_stub];
  __facetOptions = nil;
  __facetOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsMultiselect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsCustom: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size129;
          [inProtocol readListBeginReturningElementType: NULL size: &_size129];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size129];
          int _i130;
          for (_i130 = 0; _i130 < _size129; ++_i130)
          {
            FacetOption *_elem131 = [[FacetOption alloc] init];
            [_elem131 read: inProtocol];
            [fieldValue addObject: _elem131];
            [_elem131 release_stub];
          }
          [inProtocol readListEnd];
          [self setFacetOptions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Facet"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__label_isset) {
    if (__label != nil) {
      [outProtocol writeFieldBeginWithName: @"label" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __label];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isMultiselect_isset) {
    [outProtocol writeFieldBeginWithName: @"isMultiselect" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __isMultiselect];
    [outProtocol writeFieldEnd];
  }
  if (__isCustom_isset) {
    [outProtocol writeFieldBeginWithName: @"isCustom" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isCustom];
    [outProtocol writeFieldEnd];
  }
  if (__facetOptions_isset) {
    if (__facetOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"facetOptions" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__facetOptions count]];
        int i133;
        for (i133 = 0; i133 < [__facetOptions count]; i133++)
        {
          [[__facetOptions objectAtIndex: i133] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Facet("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",label:"];
  [ms appendFormat: @"\"%@\"", __label];
  [ms appendString: @",isMultiselect:"];
  [ms appendFormat: @"%i", __isMultiselect];
  [ms appendString: @",isCustom:"];
  [ms appendFormat: @"%i", __isCustom];
  [ms appendString: @",facetOptions:"];
  [ms appendFormat: @"%@", __facetOptions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFeaturesEnabled: (NSMutableArray *) featuresEnabled reviewSources: (Facet *) reviewSources kioskSources: (Facet *) kioskSources surveySources: (Facet *) surveySources socialSources: (Facet *) socialSources authLocations: (NSMutableArray *) authLocations dateRanges: (Facet *) dateRanges userSettings: (NSMutableArray *) userSettings isDefaultSettings: (BOOL) isDefaultSettings
{
  self = [super init];
  __featuresEnabled = [featuresEnabled retain_stub];
  __featuresEnabled_isset = YES;
  __reviewSources = [reviewSources retain_stub];
  __reviewSources_isset = YES;
  __kioskSources = [kioskSources retain_stub];
  __kioskSources_isset = YES;
  __surveySources = [surveySources retain_stub];
  __surveySources_isset = YES;
  __socialSources = [socialSources retain_stub];
  __socialSources_isset = YES;
  __authLocations = [authLocations retain_stub];
  __authLocations_isset = YES;
  __dateRanges = [dateRanges retain_stub];
  __dateRanges_isset = YES;
  __userSettings = [userSettings retain_stub];
  __userSettings_isset = YES;
  __isDefaultSettings = isDefaultSettings;
  __isDefaultSettings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"featuresEnabled"])
  {
    __featuresEnabled = [[decoder decodeObjectForKey: @"featuresEnabled"] retain_stub];
    __featuresEnabled_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewSources"])
  {
    __reviewSources = [[decoder decodeObjectForKey: @"reviewSources"] retain_stub];
    __reviewSources_isset = YES;
  }
  if ([decoder containsValueForKey: @"kioskSources"])
  {
    __kioskSources = [[decoder decodeObjectForKey: @"kioskSources"] retain_stub];
    __kioskSources_isset = YES;
  }
  if ([decoder containsValueForKey: @"surveySources"])
  {
    __surveySources = [[decoder decodeObjectForKey: @"surveySources"] retain_stub];
    __surveySources_isset = YES;
  }
  if ([decoder containsValueForKey: @"socialSources"])
  {
    __socialSources = [[decoder decodeObjectForKey: @"socialSources"] retain_stub];
    __socialSources_isset = YES;
  }
  if ([decoder containsValueForKey: @"authLocations"])
  {
    __authLocations = [[decoder decodeObjectForKey: @"authLocations"] retain_stub];
    __authLocations_isset = YES;
  }
  if ([decoder containsValueForKey: @"dateRanges"])
  {
    __dateRanges = [[decoder decodeObjectForKey: @"dateRanges"] retain_stub];
    __dateRanges_isset = YES;
  }
  if ([decoder containsValueForKey: @"userSettings"])
  {
    __userSettings = [[decoder decodeObjectForKey: @"userSettings"] retain_stub];
    __userSettings_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDefaultSettings"])
  {
    __isDefaultSettings = [decoder decodeBoolForKey: @"isDefaultSettings"];
    __isDefaultSettings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__featuresEnabled_isset)
  {
    [encoder encodeObject: __featuresEnabled forKey: @"featuresEnabled"];
  }
  if (__reviewSources_isset)
  {
    [encoder encodeObject: __reviewSources forKey: @"reviewSources"];
  }
  if (__kioskSources_isset)
  {
    [encoder encodeObject: __kioskSources forKey: @"kioskSources"];
  }
  if (__surveySources_isset)
  {
    [encoder encodeObject: __surveySources forKey: @"surveySources"];
  }
  if (__socialSources_isset)
  {
    [encoder encodeObject: __socialSources forKey: @"socialSources"];
  }
  if (__authLocations_isset)
  {
    [encoder encodeObject: __authLocations forKey: @"authLocations"];
  }
  if (__dateRanges_isset)
  {
    [encoder encodeObject: __dateRanges forKey: @"dateRanges"];
  }
  if (__userSettings_isset)
  {
    [encoder encodeObject: __userSettings forKey: @"userSettings"];
  }
  if (__isDefaultSettings_isset)
  {
    [encoder encodeBool: __isDefaultSettings forKey: @"isDefaultSettings"];
  }
}

- (void) dealloc
{
  [__featuresEnabled release_stub];
  [__reviewSources release_stub];
  [__kioskSources release_stub];
  [__surveySources release_stub];
  [__socialSources release_stub];
  [__authLocations release_stub];
  [__dateRanges release_stub];
  [__userSettings release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) featuresEnabled {
  return [[__featuresEnabled retain_stub] autorelease_stub];
}

- (void) setFeaturesEnabled: (NSMutableArray *) featuresEnabled {
  [featuresEnabled retain_stub];
  [__featuresEnabled release_stub];
  __featuresEnabled = featuresEnabled;
  __featuresEnabled_isset = YES;
}

- (BOOL) featuresEnabledIsSet {
  return __featuresEnabled_isset;
}

- (void) unsetFeaturesEnabled {
  [__featuresEnabled release_stub];
  __featuresEnabled = nil;
  __featuresEnabled_isset = NO;
}

- (Facet *) reviewSources {
  return [[__reviewSources retain_stub] autorelease_stub];
}

- (void) setReviewSources: (Facet *) reviewSources {
  [reviewSources retain_stub];
  [__reviewSources release_stub];
  __reviewSources = reviewSources;
  __reviewSources_isset = YES;
}

- (BOOL) reviewSourcesIsSet {
  return __reviewSources_isset;
}

- (void) unsetReviewSources {
  [__reviewSources release_stub];
  __reviewSources = nil;
  __reviewSources_isset = NO;
}

- (Facet *) kioskSources {
  return [[__kioskSources retain_stub] autorelease_stub];
}

- (void) setKioskSources: (Facet *) kioskSources {
  [kioskSources retain_stub];
  [__kioskSources release_stub];
  __kioskSources = kioskSources;
  __kioskSources_isset = YES;
}

- (BOOL) kioskSourcesIsSet {
  return __kioskSources_isset;
}

- (void) unsetKioskSources {
  [__kioskSources release_stub];
  __kioskSources = nil;
  __kioskSources_isset = NO;
}

- (Facet *) surveySources {
  return [[__surveySources retain_stub] autorelease_stub];
}

- (void) setSurveySources: (Facet *) surveySources {
  [surveySources retain_stub];
  [__surveySources release_stub];
  __surveySources = surveySources;
  __surveySources_isset = YES;
}

- (BOOL) surveySourcesIsSet {
  return __surveySources_isset;
}

- (void) unsetSurveySources {
  [__surveySources release_stub];
  __surveySources = nil;
  __surveySources_isset = NO;
}

- (Facet *) socialSources {
  return [[__socialSources retain_stub] autorelease_stub];
}

- (void) setSocialSources: (Facet *) socialSources {
  [socialSources retain_stub];
  [__socialSources release_stub];
  __socialSources = socialSources;
  __socialSources_isset = YES;
}

- (BOOL) socialSourcesIsSet {
  return __socialSources_isset;
}

- (void) unsetSocialSources {
  [__socialSources release_stub];
  __socialSources = nil;
  __socialSources_isset = NO;
}

- (NSMutableArray *) authLocations {
  return [[__authLocations retain_stub] autorelease_stub];
}

- (void) setAuthLocations: (NSMutableArray *) authLocations {
  [authLocations retain_stub];
  [__authLocations release_stub];
  __authLocations = authLocations;
  __authLocations_isset = YES;
}

- (BOOL) authLocationsIsSet {
  return __authLocations_isset;
}

- (void) unsetAuthLocations {
  [__authLocations release_stub];
  __authLocations = nil;
  __authLocations_isset = NO;
}

- (Facet *) dateRanges {
  return [[__dateRanges retain_stub] autorelease_stub];
}

- (void) setDateRanges: (Facet *) dateRanges {
  [dateRanges retain_stub];
  [__dateRanges release_stub];
  __dateRanges = dateRanges;
  __dateRanges_isset = YES;
}

- (BOOL) dateRangesIsSet {
  return __dateRanges_isset;
}

- (void) unsetDateRanges {
  [__dateRanges release_stub];
  __dateRanges = nil;
  __dateRanges_isset = NO;
}

- (NSMutableArray *) userSettings {
  return [[__userSettings retain_stub] autorelease_stub];
}

- (void) setUserSettings: (NSMutableArray *) userSettings {
  [userSettings retain_stub];
  [__userSettings release_stub];
  __userSettings = userSettings;
  __userSettings_isset = YES;
}

- (BOOL) userSettingsIsSet {
  return __userSettings_isset;
}

- (void) unsetUserSettings {
  [__userSettings release_stub];
  __userSettings = nil;
  __userSettings_isset = NO;
}

- (BOOL) isDefaultSettings {
  return __isDefaultSettings;
}

- (void) setIsDefaultSettings: (BOOL) isDefaultSettings {
  __isDefaultSettings = isDefaultSettings;
  __isDefaultSettings_isset = YES;
}

- (BOOL) isDefaultSettingsIsSet {
  return __isDefaultSettings_isset;
}

- (void) unsetIsDefaultSettings {
  __isDefaultSettings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size134;
          [inProtocol readListBeginReturningElementType: NULL size: &_size134];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size134];
          int _i135;
          for (_i135 = 0; _i135 < _size134; ++_i135)
          {
            NSString * _elem136 = [inProtocol readString];
            [fieldValue addObject: _elem136];
          }
          [inProtocol readListEnd];
          [self setFeaturesEnabled: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Facet *fieldValue = [[Facet alloc] init];
          [fieldValue read: inProtocol];
          [self setReviewSources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Facet *fieldValue = [[Facet alloc] init];
          [fieldValue read: inProtocol];
          [self setKioskSources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          Facet *fieldValue = [[Facet alloc] init];
          [fieldValue read: inProtocol];
          [self setSurveySources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          Facet *fieldValue = [[Facet alloc] init];
          [fieldValue read: inProtocol];
          [self setSocialSources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size137;
          [inProtocol readListBeginReturningElementType: NULL size: &_size137];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size137];
          int _i138;
          for (_i138 = 0; _i138 < _size137; ++_i138)
          {
            Location *_elem139 = [[Location alloc] init];
            [_elem139 read: inProtocol];
            [fieldValue addObject: _elem139];
            [_elem139 release_stub];
          }
          [inProtocol readListEnd];
          [self setAuthLocations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          Facet *fieldValue = [[Facet alloc] init];
          [fieldValue read: inProtocol];
          [self setDateRanges: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size140;
          [inProtocol readListBeginReturningElementType: NULL size: &_size140];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size140];
          int _i141;
          for (_i141 = 0; _i141 < _size140; ++_i141)
          {
            UserPreference *_elem142 = [[UserPreference alloc] init];
            [_elem142 read: inProtocol];
            [fieldValue addObject: _elem142];
            [_elem142 release_stub];
          }
          [inProtocol readListEnd];
          [self setUserSettings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDefaultSettings: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserConfig"];
  if (__featuresEnabled_isset) {
    if (__featuresEnabled != nil) {
      [outProtocol writeFieldBeginWithName: @"featuresEnabled" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__featuresEnabled count]];
        int i144;
        for (i144 = 0; i144 < [__featuresEnabled count]; i144++)
        {
          [outProtocol writeString: [__featuresEnabled objectAtIndex: i144]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewSources_isset) {
    if (__reviewSources != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewSources" type: TType_STRUCT fieldID: 2];
      [__reviewSources write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__kioskSources_isset) {
    if (__kioskSources != nil) {
      [outProtocol writeFieldBeginWithName: @"kioskSources" type: TType_STRUCT fieldID: 3];
      [__kioskSources write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__surveySources_isset) {
    if (__surveySources != nil) {
      [outProtocol writeFieldBeginWithName: @"surveySources" type: TType_STRUCT fieldID: 4];
      [__surveySources write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socialSources_isset) {
    if (__socialSources != nil) {
      [outProtocol writeFieldBeginWithName: @"socialSources" type: TType_STRUCT fieldID: 5];
      [__socialSources write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authLocations_isset) {
    if (__authLocations != nil) {
      [outProtocol writeFieldBeginWithName: @"authLocations" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__authLocations count]];
        int i146;
        for (i146 = 0; i146 < [__authLocations count]; i146++)
        {
          [[__authLocations objectAtIndex: i146] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__dateRanges_isset) {
    if (__dateRanges != nil) {
      [outProtocol writeFieldBeginWithName: @"dateRanges" type: TType_STRUCT fieldID: 7];
      [__dateRanges write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userSettings_isset) {
    if (__userSettings != nil) {
      [outProtocol writeFieldBeginWithName: @"userSettings" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userSettings count]];
        int i148;
        for (i148 = 0; i148 < [__userSettings count]; i148++)
        {
          [[__userSettings objectAtIndex: i148] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDefaultSettings_isset) {
    [outProtocol writeFieldBeginWithName: @"isDefaultSettings" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __isDefaultSettings];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserConfig("];
  [ms appendString: @"featuresEnabled:"];
  [ms appendFormat: @"%@", __featuresEnabled];
  [ms appendString: @",reviewSources:"];
  [ms appendFormat: @"%@", __reviewSources];
  [ms appendString: @",kioskSources:"];
  [ms appendFormat: @"%@", __kioskSources];
  [ms appendString: @",surveySources:"];
  [ms appendFormat: @"%@", __surveySources];
  [ms appendString: @",socialSources:"];
  [ms appendFormat: @"%@", __socialSources];
  [ms appendString: @",authLocations:"];
  [ms appendFormat: @"%@", __authLocations];
  [ms appendString: @",dateRanges:"];
  [ms appendFormat: @"%@", __dateRanges];
  [ms appendString: @",userSettings:"];
  [ms appendFormat: @"%@", __userSettings];
  [ms appendString: @",isDefaultSettings:"];
  [ms appendFormat: @"%i", __isDefaultSettings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id tenantID: (int32_t) tenantID roleID: (NSString *) roleID firstName: (NSString *) firstName middleName: (NSString *) middleName lastName: (NSString *) lastName email: (NSString *) email password: (NSString *) password removed: (BOOL) removed filters: (NSMutableArray *) filters externalID: (NSString *) externalID active: (BOOL) active notified: (BOOL) notified userKey: (NSString *) userKey
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __tenantID = tenantID;
  __tenantID_isset = YES;
  __roleID = [roleID retain_stub];
  __roleID_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __middleName = [middleName retain_stub];
  __middleName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __removed = removed;
  __removed_isset = YES;
  __filters = [filters retain_stub];
  __filters_isset = YES;
  __externalID = [externalID retain_stub];
  __externalID_isset = YES;
  __active = active;
  __active_isset = YES;
  __notified = notified;
  __notified_isset = YES;
  __userKey = [userKey retain_stub];
  __userKey_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tenantID"])
  {
    __tenantID = [decoder decodeInt32ForKey: @"tenantID"];
    __tenantID_isset = YES;
  }
  if ([decoder containsValueForKey: @"roleID"])
  {
    __roleID = [[decoder decodeObjectForKey: @"roleID"] retain_stub];
    __roleID_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"middleName"])
  {
    __middleName = [[decoder decodeObjectForKey: @"middleName"] retain_stub];
    __middleName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"removed"])
  {
    __removed = [decoder decodeBoolForKey: @"removed"];
    __removed_isset = YES;
  }
  if ([decoder containsValueForKey: @"filters"])
  {
    __filters = [[decoder decodeObjectForKey: @"filters"] retain_stub];
    __filters_isset = YES;
  }
  if ([decoder containsValueForKey: @"externalID"])
  {
    __externalID = [[decoder decodeObjectForKey: @"externalID"] retain_stub];
    __externalID_isset = YES;
  }
  if ([decoder containsValueForKey: @"active"])
  {
    __active = [decoder decodeBoolForKey: @"active"];
    __active_isset = YES;
  }
  if ([decoder containsValueForKey: @"notified"])
  {
    __notified = [decoder decodeBoolForKey: @"notified"];
    __notified_isset = YES;
  }
  if ([decoder containsValueForKey: @"userKey"])
  {
    __userKey = [[decoder decodeObjectForKey: @"userKey"] retain_stub];
    __userKey_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__tenantID_isset)
  {
    [encoder encodeInt32: __tenantID forKey: @"tenantID"];
  }
  if (__roleID_isset)
  {
    [encoder encodeObject: __roleID forKey: @"roleID"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__middleName_isset)
  {
    [encoder encodeObject: __middleName forKey: @"middleName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__removed_isset)
  {
    [encoder encodeBool: __removed forKey: @"removed"];
  }
  if (__filters_isset)
  {
    [encoder encodeObject: __filters forKey: @"filters"];
  }
  if (__externalID_isset)
  {
    [encoder encodeObject: __externalID forKey: @"externalID"];
  }
  if (__active_isset)
  {
    [encoder encodeBool: __active forKey: @"active"];
  }
  if (__notified_isset)
  {
    [encoder encodeBool: __notified forKey: @"notified"];
  }
  if (__userKey_isset)
  {
    [encoder encodeObject: __userKey forKey: @"userKey"];
  }
}

- (void) dealloc
{
  [__roleID release_stub];
  [__firstName release_stub];
  [__middleName release_stub];
  [__lastName release_stub];
  [__email release_stub];
  [__password release_stub];
  [__filters release_stub];
  [__externalID release_stub];
  [__userKey release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) tenantID {
  return __tenantID;
}

- (void) setTenantID: (int32_t) tenantID {
  __tenantID = tenantID;
  __tenantID_isset = YES;
}

- (BOOL) tenantIDIsSet {
  return __tenantID_isset;
}

- (void) unsetTenantID {
  __tenantID_isset = NO;
}

- (NSString *) roleID {
  return [[__roleID retain_stub] autorelease_stub];
}

- (void) setRoleID: (NSString *) roleID {
  [roleID retain_stub];
  [__roleID release_stub];
  __roleID = roleID;
  __roleID_isset = YES;
}

- (BOOL) roleIDIsSet {
  return __roleID_isset;
}

- (void) unsetRoleID {
  [__roleID release_stub];
  __roleID = nil;
  __roleID_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) middleName {
  return [[__middleName retain_stub] autorelease_stub];
}

- (void) setMiddleName: (NSString *) middleName {
  [middleName retain_stub];
  [__middleName release_stub];
  __middleName = middleName;
  __middleName_isset = YES;
}

- (BOOL) middleNameIsSet {
  return __middleName_isset;
}

- (void) unsetMiddleName {
  [__middleName release_stub];
  __middleName = nil;
  __middleName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (BOOL) removed {
  return __removed;
}

- (void) setRemoved: (BOOL) removed {
  __removed = removed;
  __removed_isset = YES;
}

- (BOOL) removedIsSet {
  return __removed_isset;
}

- (void) unsetRemoved {
  __removed_isset = NO;
}

- (NSMutableArray *) filters {
  return [[__filters retain_stub] autorelease_stub];
}

- (void) setFilters: (NSMutableArray *) filters {
  [filters retain_stub];
  [__filters release_stub];
  __filters = filters;
  __filters_isset = YES;
}

- (BOOL) filtersIsSet {
  return __filters_isset;
}

- (void) unsetFilters {
  [__filters release_stub];
  __filters = nil;
  __filters_isset = NO;
}

- (NSString *) externalID {
  return [[__externalID retain_stub] autorelease_stub];
}

- (void) setExternalID: (NSString *) externalID {
  [externalID retain_stub];
  [__externalID release_stub];
  __externalID = externalID;
  __externalID_isset = YES;
}

- (BOOL) externalIDIsSet {
  return __externalID_isset;
}

- (void) unsetExternalID {
  [__externalID release_stub];
  __externalID = nil;
  __externalID_isset = NO;
}

- (BOOL) active {
  return __active;
}

- (void) setActive: (BOOL) active {
  __active = active;
  __active_isset = YES;
}

- (BOOL) activeIsSet {
  return __active_isset;
}

- (void) unsetActive {
  __active_isset = NO;
}

- (BOOL) notified {
  return __notified;
}

- (void) setNotified: (BOOL) notified {
  __notified = notified;
  __notified_isset = YES;
}

- (BOOL) notifiedIsSet {
  return __notified_isset;
}

- (void) unsetNotified {
  __notified_isset = NO;
}

- (NSString *) userKey {
  return [[__userKey retain_stub] autorelease_stub];
}

- (void) setUserKey: (NSString *) userKey {
  [userKey retain_stub];
  [__userKey release_stub];
  __userKey = userKey;
  __userKey_isset = YES;
}

- (BOOL) userKeyIsSet {
  return __userKey_isset;
}

- (void) unsetUserKey {
  [__userKey release_stub];
  __userKey = nil;
  __userKey_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTenantID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRoleID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMiddleName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRemoved: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size149;
          [inProtocol readListBeginReturningElementType: NULL size: &_size149];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size149];
          int _i150;
          for (_i150 = 0; _i150 < _size149; ++_i150)
          {
            Filter *_elem151 = [[Filter alloc] init];
            [_elem151 read: inProtocol];
            [fieldValue addObject: _elem151];
            [_elem151 release_stub];
          }
          [inProtocol readListEnd];
          [self setFilters: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExternalID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNotified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__tenantID_isset) {
    [outProtocol writeFieldBeginWithName: @"tenantID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __tenantID];
    [outProtocol writeFieldEnd];
  }
  if (__roleID_isset) {
    if (__roleID != nil) {
      [outProtocol writeFieldBeginWithName: @"roleID" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __roleID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__middleName_isset) {
    if (__middleName != nil) {
      [outProtocol writeFieldBeginWithName: @"middleName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __middleName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__removed_isset) {
    [outProtocol writeFieldBeginWithName: @"removed" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __removed];
    [outProtocol writeFieldEnd];
  }
  if (__filters_isset) {
    if (__filters != nil) {
      [outProtocol writeFieldBeginWithName: @"filters" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__filters count]];
        int i153;
        for (i153 = 0; i153 < [__filters count]; i153++)
        {
          [[__filters objectAtIndex: i153] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__externalID_isset) {
    if (__externalID != nil) {
      [outProtocol writeFieldBeginWithName: @"externalID" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __externalID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__active_isset) {
    [outProtocol writeFieldBeginWithName: @"active" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __active];
    [outProtocol writeFieldEnd];
  }
  if (__notified_isset) {
    [outProtocol writeFieldBeginWithName: @"notified" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __notified];
    [outProtocol writeFieldEnd];
  }
  if (__userKey_isset) {
    if (__userKey != nil) {
      [outProtocol writeFieldBeginWithName: @"userKey" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __userKey];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",tenantID:"];
  [ms appendFormat: @"%i", __tenantID];
  [ms appendString: @",roleID:"];
  [ms appendFormat: @"\"%@\"", __roleID];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",middleName:"];
  [ms appendFormat: @"\"%@\"", __middleName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",removed:"];
  [ms appendFormat: @"%i", __removed];
  [ms appendString: @",filters:"];
  [ms appendFormat: @"%@", __filters];
  [ms appendString: @",externalID:"];
  [ms appendFormat: @"\"%@\"", __externalID];
  [ms appendString: @",active:"];
  [ms appendFormat: @"%i", __active];
  [ms appendString: @",notified:"];
  [ms appendFormat: @"%i", __notified];
  [ms appendString: @",userKey:"];
  [ms appendFormat: @"\"%@\"", __userKey];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * ACTION_MARK_READ = @"ratings.actions.read";
static NSString * ACTION_DELETE = @"ratings.actions.delete";
static NSString * ACTION_REPLY = @"ratings.actions.reply";
static NSString * ACTION_FORWARD = @"ratings.actions.forward";
static NSString * ACTION_PUBLISH = @"ratings.actions.publish";
static NSString * ACTION_UNPUBLISH = @"ratings.actions.unpublish";
static NSString * ACTION_REQUEST_REVIEW = @"ratings.actions.requestreview";
static NSString * ACTION_RESURVEY = @"ratings.actions.resurvey";
static NSString * SCORE_ENABLED = @"score.enabled";
static NSString * SOCIAL_ENABLED = @"social.enabled";
static NSString * DASHBOARD_ENABLED = @"dashboard.enabled";
static NSString * RATINGS_ENABLED = @"ratings.enabled";
static NSString * RATINGS_SENTIMENT_ENABLED = @"ratings.sentiment.enabled";
static NSString * RATINGS_KIOSK_ENABLED = @"ratings.kiosk.enabled";
static NSString * RATINGS_LOCATIONS_ENABLED = @"ratings.locations.enabled";
static NSString * POSITIVE_REVIEWS_FEED = @"reviews.positive.feed";
static NSString * NEGATIVE_REVIEWS_FEED = @"reviews.negative.feed";
static NSString * NEUTRAL_REVIEWS_FEED = @"reviews.neutral.feed";
static NSString * NO_RATINGS_FEED = @"reviews.norating.feed";
static NSString * POSITIVE_REVIEWS_ALERT = @"reviews.positive.alert";
static NSString * NEGATIVE_REVIEWS_ALERT = @"reviews.negative.alert";
static NSString * NEUTRAL_REVIEWS_ALERT = @"reviews.neutral.alert";
static NSString * NO_RATINGS_ALERT = @"reviews.norating.alert";
static NSString * REVIEW_SITES_ALL = @"reviewsites.all";
static NSString * FACEBOOK_FEED = @"social.facebook.feed";
static NSString * TWITTER_FEED = @"social.twitter.feed";
static NSString * GOOGLEPLUS_FEED = @"social.google+.feed";
static NSString * KIOSK_REVIEWS_FEED = @"kiosk.reviews.feed";
static NSString * FACEBOOK_ALERT = @"social.facebook.alert";
static NSString * TWITTER_ALERT = @"social.twitter.alert";
static NSString * GOOGLEPLUS_ALERT = @"social.google+.alert";
static NSString * KIOSK_REVIEWS_ALERT = @"kiosk.reviews.alert";
static NSString * LOCATIONS_ALL = @"locations.all";
static NSString * FILTER_DT_LAST_7_DAYS = @"day_last_7_days";
static NSString * FILTER_DT_LAST_30_DAYS = @"day_last_30_days";
static NSString * FILTER_DT_LAST_60_DAYS = @"day_last_60_days";
static NSString * FILTER_DT_LAST_90_DAYS = @"day_last_90_days";
static NSString * FILTER_DT_LAST_120_DAYS = @"day_last_120_days";
static NSString * FILTER_DT_THIS_MONTH = @"month_this_month";
static NSString * FILTER_DT_LAST_1_MONTH = @"month_last_1_month";
static NSString * FILTER_DT_LAST_2_MONTHS = @"month_last_2_months";
static NSString * FILTER_DT_LAST_3_MONTHS = @"month_last_3_months";
static NSString * FILTER_DT_LAST_6_MONTHS = @"month_last_6_months";
static NSString * FILTER_DT_LAST_1_YEAR = @"month_last_1_year";
static NSString * FILTER_DT_LAST_2_YEARS = @"month_last_2_years";
static NSString * FILTER_DT_LAST_3_YEARS = @"month_last_3_years";
static NSString * FILTER_DT_ALL_TIME = @"";
static NSString * FILTER_DT_CUSTOM_DATES = @"custom_dates";
static NSString * FILTER_SENTIMENT_NEGATIVE = @"sentiment_negtive";
static NSString * FILTER_SENTIMENT_NEUTRAL = @"sentiment_neutral";
static NSString * FILTER_SENTIMENT_POSITIVE = @"sentiment_positive";

@implementation MobileCommonConstants
+ (void) initialize {
}
+ (NSString *) ACTION_MARK_READ{
  return ACTION_MARK_READ;
}
+ (NSString *) ACTION_DELETE{
  return ACTION_DELETE;
}
+ (NSString *) ACTION_REPLY{
  return ACTION_REPLY;
}
+ (NSString *) ACTION_FORWARD{
  return ACTION_FORWARD;
}
+ (NSString *) ACTION_PUBLISH{
  return ACTION_PUBLISH;
}
+ (NSString *) ACTION_UNPUBLISH{
  return ACTION_UNPUBLISH;
}
+ (NSString *) ACTION_REQUEST_REVIEW{
  return ACTION_REQUEST_REVIEW;
}
+ (NSString *) ACTION_RESURVEY{
  return ACTION_RESURVEY;
}
+ (NSString *) SCORE_ENABLED{
  return SCORE_ENABLED;
}
+ (NSString *) SOCIAL_ENABLED{
  return SOCIAL_ENABLED;
}
+ (NSString *) DASHBOARD_ENABLED{
  return DASHBOARD_ENABLED;
}
+ (NSString *) RATINGS_ENABLED{
  return RATINGS_ENABLED;
}
+ (NSString *) RATINGS_SENTIMENT_ENABLED{
  return RATINGS_SENTIMENT_ENABLED;
}
+ (NSString *) RATINGS_KIOSK_ENABLED{
  return RATINGS_KIOSK_ENABLED;
}
+ (NSString *) RATINGS_LOCATIONS_ENABLED{
  return RATINGS_LOCATIONS_ENABLED;
}
+ (NSString *) POSITIVE_REVIEWS_FEED{
  return POSITIVE_REVIEWS_FEED;
}
+ (NSString *) NEGATIVE_REVIEWS_FEED{
  return NEGATIVE_REVIEWS_FEED;
}
+ (NSString *) NEUTRAL_REVIEWS_FEED{
  return NEUTRAL_REVIEWS_FEED;
}
+ (NSString *) NO_RATINGS_FEED{
  return NO_RATINGS_FEED;
}
+ (NSString *) POSITIVE_REVIEWS_ALERT{
  return POSITIVE_REVIEWS_ALERT;
}
+ (NSString *) NEGATIVE_REVIEWS_ALERT{
  return NEGATIVE_REVIEWS_ALERT;
}
+ (NSString *) NEUTRAL_REVIEWS_ALERT{
  return NEUTRAL_REVIEWS_ALERT;
}
+ (NSString *) NO_RATINGS_ALERT{
  return NO_RATINGS_ALERT;
}
+ (NSString *) REVIEW_SITES_ALL{
  return REVIEW_SITES_ALL;
}
+ (NSString *) FACEBOOK_FEED{
  return FACEBOOK_FEED;
}
+ (NSString *) TWITTER_FEED{
  return TWITTER_FEED;
}
+ (NSString *) GOOGLEPLUS_FEED{
  return GOOGLEPLUS_FEED;
}
+ (NSString *) KIOSK_REVIEWS_FEED{
  return KIOSK_REVIEWS_FEED;
}
+ (NSString *) FACEBOOK_ALERT{
  return FACEBOOK_ALERT;
}
+ (NSString *) TWITTER_ALERT{
  return TWITTER_ALERT;
}
+ (NSString *) GOOGLEPLUS_ALERT{
  return GOOGLEPLUS_ALERT;
}
+ (NSString *) KIOSK_REVIEWS_ALERT{
  return KIOSK_REVIEWS_ALERT;
}
+ (NSString *) LOCATIONS_ALL{
  return LOCATIONS_ALL;
}
+ (NSString *) FILTER_DT_LAST_7_DAYS{
  return FILTER_DT_LAST_7_DAYS;
}
+ (NSString *) FILTER_DT_LAST_30_DAYS{
  return FILTER_DT_LAST_30_DAYS;
}
+ (NSString *) FILTER_DT_LAST_60_DAYS{
  return FILTER_DT_LAST_60_DAYS;
}
+ (NSString *) FILTER_DT_LAST_90_DAYS{
  return FILTER_DT_LAST_90_DAYS;
}
+ (NSString *) FILTER_DT_LAST_120_DAYS{
  return FILTER_DT_LAST_120_DAYS;
}
+ (NSString *) FILTER_DT_THIS_MONTH{
  return FILTER_DT_THIS_MONTH;
}
+ (NSString *) FILTER_DT_LAST_1_MONTH{
  return FILTER_DT_LAST_1_MONTH;
}
+ (NSString *) FILTER_DT_LAST_2_MONTHS{
  return FILTER_DT_LAST_2_MONTHS;
}
+ (NSString *) FILTER_DT_LAST_3_MONTHS{
  return FILTER_DT_LAST_3_MONTHS;
}
+ (NSString *) FILTER_DT_LAST_6_MONTHS{
  return FILTER_DT_LAST_6_MONTHS;
}
+ (NSString *) FILTER_DT_LAST_1_YEAR{
  return FILTER_DT_LAST_1_YEAR;
}
+ (NSString *) FILTER_DT_LAST_2_YEARS{
  return FILTER_DT_LAST_2_YEARS;
}
+ (NSString *) FILTER_DT_LAST_3_YEARS{
  return FILTER_DT_LAST_3_YEARS;
}
+ (NSString *) FILTER_DT_ALL_TIME{
  return FILTER_DT_ALL_TIME;
}
+ (NSString *) FILTER_DT_CUSTOM_DATES{
  return FILTER_DT_CUSTOM_DATES;
}
+ (NSString *) FILTER_SENTIMENT_NEGATIVE{
  return FILTER_SENTIMENT_NEGATIVE;
}
+ (NSString *) FILTER_SENTIMENT_NEUTRAL{
  return FILTER_SENTIMENT_NEUTRAL;
}
+ (NSString *) FILTER_SENTIMENT_POSITIVE{
  return FILTER_SENTIMENT_POSITIVE;
}
@end

