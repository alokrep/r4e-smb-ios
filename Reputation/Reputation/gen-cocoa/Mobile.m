/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "MobileCommon.h"

#import "Mobile.h"

@implementation SummaryValue

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name value: (double) value addlProps: (NSMutableDictionary *) addlProps
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __value = value;
  __value_isset = YES;
  __addlProps = [addlProps retain_stub];
  __addlProps_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [decoder decodeDoubleForKey: @"value"];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"addlProps"])
  {
    __addlProps = [[decoder decodeObjectForKey: @"addlProps"] retain_stub];
    __addlProps_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__value_isset)
  {
    [encoder encodeDouble: __value forKey: @"value"];
  }
  if (__addlProps_isset)
  {
    [encoder encodeObject: __addlProps forKey: @"addlProps"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__addlProps release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) value {
  return __value;
}

- (void) setValue: (double) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value_isset = NO;
}

- (NSMutableDictionary *) addlProps {
  return [[__addlProps retain_stub] autorelease_stub];
}

- (void) setAddlProps: (NSMutableDictionary *) addlProps {
  [addlProps retain_stub];
  [__addlProps release_stub];
  __addlProps = addlProps;
  __addlProps_isset = YES;
}

- (BOOL) addlPropsIsSet {
  return __addlProps_isset;
}

- (void) unsetAddlProps {
  [__addlProps release_stub];
  __addlProps = nil;
  __addlProps_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSString * _val3 = [inProtocol readString];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setAddlProps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SummaryValue"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    [outProtocol writeFieldBeginWithName: @"value" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __value];
    [outProtocol writeFieldEnd];
  }
  if (__addlProps_isset) {
    if (__addlProps != nil) {
      [outProtocol writeFieldBeginWithName: @"addlProps" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__addlProps count]];
        NSEnumerator * _iter4 = [__addlProps keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeString: key5];
          [outProtocol writeString: [__addlProps objectForKey: key5]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SummaryValue("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%f", __value];
  [ms appendString: @",addlProps:"];
  [ms appendFormat: @"%@", __addlProps];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReviewResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReviewResponseComment: (NSString *) reviewResponseComment reviewResponseCreateDt: (int64_t) reviewResponseCreateDt reviewResponseName: (NSString *) reviewResponseName
{
  self = [super init];
  __reviewResponseComment = [reviewResponseComment retain_stub];
  __reviewResponseComment_isset = YES;
  __reviewResponseCreateDt = reviewResponseCreateDt;
  __reviewResponseCreateDt_isset = YES;
  __reviewResponseName = [reviewResponseName retain_stub];
  __reviewResponseName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reviewResponseComment"])
  {
    __reviewResponseComment = [[decoder decodeObjectForKey: @"reviewResponseComment"] retain_stub];
    __reviewResponseComment_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewResponseCreateDt"])
  {
    __reviewResponseCreateDt = [decoder decodeInt64ForKey: @"reviewResponseCreateDt"];
    __reviewResponseCreateDt_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewResponseName"])
  {
    __reviewResponseName = [[decoder decodeObjectForKey: @"reviewResponseName"] retain_stub];
    __reviewResponseName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reviewResponseComment_isset)
  {
    [encoder encodeObject: __reviewResponseComment forKey: @"reviewResponseComment"];
  }
  if (__reviewResponseCreateDt_isset)
  {
    [encoder encodeInt64: __reviewResponseCreateDt forKey: @"reviewResponseCreateDt"];
  }
  if (__reviewResponseName_isset)
  {
    [encoder encodeObject: __reviewResponseName forKey: @"reviewResponseName"];
  }
}

- (void) dealloc
{
  [__reviewResponseComment release_stub];
  [__reviewResponseName release_stub];
  [super dealloc_stub];
}

- (NSString *) reviewResponseComment {
  return [[__reviewResponseComment retain_stub] autorelease_stub];
}

- (void) setReviewResponseComment: (NSString *) reviewResponseComment {
  [reviewResponseComment retain_stub];
  [__reviewResponseComment release_stub];
  __reviewResponseComment = reviewResponseComment;
  __reviewResponseComment_isset = YES;
}

- (BOOL) reviewResponseCommentIsSet {
  return __reviewResponseComment_isset;
}

- (void) unsetReviewResponseComment {
  [__reviewResponseComment release_stub];
  __reviewResponseComment = nil;
  __reviewResponseComment_isset = NO;
}

- (int64_t) reviewResponseCreateDt {
  return __reviewResponseCreateDt;
}

- (void) setReviewResponseCreateDt: (int64_t) reviewResponseCreateDt {
  __reviewResponseCreateDt = reviewResponseCreateDt;
  __reviewResponseCreateDt_isset = YES;
}

- (BOOL) reviewResponseCreateDtIsSet {
  return __reviewResponseCreateDt_isset;
}

- (void) unsetReviewResponseCreateDt {
  __reviewResponseCreateDt_isset = NO;
}

- (NSString *) reviewResponseName {
  return [[__reviewResponseName retain_stub] autorelease_stub];
}

- (void) setReviewResponseName: (NSString *) reviewResponseName {
  [reviewResponseName retain_stub];
  [__reviewResponseName release_stub];
  __reviewResponseName = reviewResponseName;
  __reviewResponseName_isset = YES;
}

- (BOOL) reviewResponseNameIsSet {
  return __reviewResponseName_isset;
}

- (void) unsetReviewResponseName {
  [__reviewResponseName release_stub];
  __reviewResponseName = nil;
  __reviewResponseName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewResponseComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReviewResponseCreateDt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewResponseName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReviewResponse"];
  if (__reviewResponseComment_isset) {
    if (__reviewResponseComment != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewResponseComment" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __reviewResponseComment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewResponseCreateDt_isset) {
    [outProtocol writeFieldBeginWithName: @"reviewResponseCreateDt" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __reviewResponseCreateDt];
    [outProtocol writeFieldEnd];
  }
  if (__reviewResponseName_isset) {
    if (__reviewResponseName != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewResponseName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __reviewResponseName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReviewResponse("];
  [ms appendString: @"reviewResponseComment:"];
  [ms appendFormat: @"\"%@\"", __reviewResponseComment];
  [ms appendString: @",reviewResponseCreateDt:"];
  [ms appendFormat: @"%qi", __reviewResponseCreateDt];
  [ms appendString: @",reviewResponseName:"];
  [ms appendFormat: @"\"%@\"", __reviewResponseName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Review

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id locationName: (NSString *) locationName reviewerId: (NSString *) reviewerId reviewerName: (NSString *) reviewerName reviewerPhotoUrl: (NSString *) reviewerPhotoUrl reviewerProfileUrl: (NSString *) reviewerProfileUrl reviewerEmail: (NSString *) reviewerEmail reviewerPhone: (NSString *) reviewerPhone rating: (double) rating normalizedRating: (double) normalizedRating date: (NSString *) date ratedTimestamp: (int64_t) ratedTimestamp addedTimestamp: (int64_t) addedTimestamp updatedTimestamp: (int64_t) updatedTimestamp comment: (NSString *) comment tags: (NSMutableArray *) tags sourceId: (SourceCode) sourceId sourceName: (NSString *) sourceName sourceSmallIconPath: (NSString *) sourceSmallIconPath sourceLargeIconPath: (NSString *) sourceLargeIconPath sourceOverallRS: (RatingScale *) sourceOverallRS sourceSubRatingRS: (NSMutableDictionary *) sourceSubRatingRS sourceGroup: (SourceGroup) sourceGroup isSourceRequestReviewable: (BOOL) isSourceRequestReviewable sourceURL: (NSString *) sourceURL originSourceId: (SourceCode) originSourceId originSourceName: (SourceCode) originSourceName originSourceURL: (NSString *) originSourceURL properties: (NSMutableArray *) properties commentTitle: (NSString *) commentTitle publishDate: (int64_t) publishDate published: (BOOL) published requested: (BOOL) requested numReplies: (int32_t) numReplies lastReplyDate: (int64_t) lastReplyDate nps: (int32_t) nps rresponses: (NSMutableArray *) rresponses npsBgColor: (NSString *) npsBgColor hasResponded: (BOOL) hasResponded isStarRatingEnabled: (BOOL) isStarRatingEnabled allowedActions: (NSMutableArray *) allowedActions sentiment: (int) sentiment
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __locationName = [locationName retain_stub];
  __locationName_isset = YES;
  __reviewerId = [reviewerId retain_stub];
  __reviewerId_isset = YES;
  __reviewerName = [reviewerName retain_stub];
  __reviewerName_isset = YES;
  __reviewerPhotoUrl = [reviewerPhotoUrl retain_stub];
  __reviewerPhotoUrl_isset = YES;
  __reviewerProfileUrl = [reviewerProfileUrl retain_stub];
  __reviewerProfileUrl_isset = YES;
  __reviewerEmail = [reviewerEmail retain_stub];
  __reviewerEmail_isset = YES;
  __reviewerPhone = [reviewerPhone retain_stub];
  __reviewerPhone_isset = YES;
  __rating = rating;
  __rating_isset = YES;
  __normalizedRating = normalizedRating;
  __normalizedRating_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  __ratedTimestamp = ratedTimestamp;
  __ratedTimestamp_isset = YES;
  __addedTimestamp = addedTimestamp;
  __addedTimestamp_isset = YES;
  __updatedTimestamp = updatedTimestamp;
  __updatedTimestamp_isset = YES;
  __comment = [comment retain_stub];
  __comment_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  __sourceId = [sourceId retain_stub];
  __sourceId_isset = YES;
  __sourceName = [sourceName retain_stub];
  __sourceName_isset = YES;
  __sourceSmallIconPath = [sourceSmallIconPath retain_stub];
  __sourceSmallIconPath_isset = YES;
  __sourceLargeIconPath = [sourceLargeIconPath retain_stub];
  __sourceLargeIconPath_isset = YES;
  __sourceOverallRS = [sourceOverallRS retain_stub];
  __sourceOverallRS_isset = YES;
  __sourceSubRatingRS = [sourceSubRatingRS retain_stub];
  __sourceSubRatingRS_isset = YES;
  __sourceGroup = [sourceGroup retain_stub];
  __sourceGroup_isset = YES;
  __isSourceRequestReviewable = isSourceRequestReviewable;
  __isSourceRequestReviewable_isset = YES;
  __sourceURL = [sourceURL retain_stub];
  __sourceURL_isset = YES;
  __originSourceId = [originSourceId retain_stub];
  __originSourceId_isset = YES;
  __originSourceName = [originSourceName retain_stub];
  __originSourceName_isset = YES;
  __originSourceURL = [originSourceURL retain_stub];
  __originSourceURL_isset = YES;
  __properties = [properties retain_stub];
  __properties_isset = YES;
  __commentTitle = [commentTitle retain_stub];
  __commentTitle_isset = YES;
  __publishDate = publishDate;
  __publishDate_isset = YES;
  __published = published;
  __published_isset = YES;
  __requested = requested;
  __requested_isset = YES;
  __numReplies = numReplies;
  __numReplies_isset = YES;
  __lastReplyDate = lastReplyDate;
  __lastReplyDate_isset = YES;
  __nps = nps;
  __nps_isset = YES;
  __rresponses = [rresponses retain_stub];
  __rresponses_isset = YES;
  __npsBgColor = [npsBgColor retain_stub];
  __npsBgColor_isset = YES;
  __hasResponded = hasResponded;
  __hasResponded_isset = YES;
  __isStarRatingEnabled = isStarRatingEnabled;
  __isStarRatingEnabled_isset = YES;
  __allowedActions = [allowedActions retain_stub];
  __allowedActions_isset = YES;
  __sentiment = sentiment;
  __sentiment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationName"])
  {
    __locationName = [[decoder decodeObjectForKey: @"locationName"] retain_stub];
    __locationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerId"])
  {
    __reviewerId = [[decoder decodeObjectForKey: @"reviewerId"] retain_stub];
    __reviewerId_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerName"])
  {
    __reviewerName = [[decoder decodeObjectForKey: @"reviewerName"] retain_stub];
    __reviewerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerPhotoUrl"])
  {
    __reviewerPhotoUrl = [[decoder decodeObjectForKey: @"reviewerPhotoUrl"] retain_stub];
    __reviewerPhotoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerProfileUrl"])
  {
    __reviewerProfileUrl = [[decoder decodeObjectForKey: @"reviewerProfileUrl"] retain_stub];
    __reviewerProfileUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerEmail"])
  {
    __reviewerEmail = [[decoder decodeObjectForKey: @"reviewerEmail"] retain_stub];
    __reviewerEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"reviewerPhone"])
  {
    __reviewerPhone = [[decoder decodeObjectForKey: @"reviewerPhone"] retain_stub];
    __reviewerPhone_isset = YES;
  }
  if ([decoder containsValueForKey: @"rating"])
  {
    __rating = [decoder decodeDoubleForKey: @"rating"];
    __rating_isset = YES;
  }
  if ([decoder containsValueForKey: @"normalizedRating"])
  {
    __normalizedRating = [decoder decodeDoubleForKey: @"normalizedRating"];
    __normalizedRating_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  if ([decoder containsValueForKey: @"ratedTimestamp"])
  {
    __ratedTimestamp = [decoder decodeInt64ForKey: @"ratedTimestamp"];
    __ratedTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"addedTimestamp"])
  {
    __addedTimestamp = [decoder decodeInt64ForKey: @"addedTimestamp"];
    __addedTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"updatedTimestamp"])
  {
    __updatedTimestamp = [decoder decodeInt64ForKey: @"updatedTimestamp"];
    __updatedTimestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceId"])
  {
    __sourceId = [[decoder decodeObjectForKey: @"sourceId"] retain_stub];
    __sourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceName"])
  {
    __sourceName = [[decoder decodeObjectForKey: @"sourceName"] retain_stub];
    __sourceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceSmallIconPath"])
  {
    __sourceSmallIconPath = [[decoder decodeObjectForKey: @"sourceSmallIconPath"] retain_stub];
    __sourceSmallIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceLargeIconPath"])
  {
    __sourceLargeIconPath = [[decoder decodeObjectForKey: @"sourceLargeIconPath"] retain_stub];
    __sourceLargeIconPath_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceOverallRS"])
  {
    __sourceOverallRS = [[decoder decodeObjectForKey: @"sourceOverallRS"] retain_stub];
    __sourceOverallRS_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceSubRatingRS"])
  {
    __sourceSubRatingRS = [[decoder decodeObjectForKey: @"sourceSubRatingRS"] retain_stub];
    __sourceSubRatingRS_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceGroup"])
  {
    __sourceGroup = [[decoder decodeObjectForKey: @"sourceGroup"] retain_stub];
    __sourceGroup_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSourceRequestReviewable"])
  {
    __isSourceRequestReviewable = [decoder decodeBoolForKey: @"isSourceRequestReviewable"];
    __isSourceRequestReviewable_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceURL"])
  {
    __sourceURL = [[decoder decodeObjectForKey: @"sourceURL"] retain_stub];
    __sourceURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"originSourceId"])
  {
    __originSourceId = [[decoder decodeObjectForKey: @"originSourceId"] retain_stub];
    __originSourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"originSourceName"])
  {
    __originSourceName = [[decoder decodeObjectForKey: @"originSourceName"] retain_stub];
    __originSourceName_isset = YES;
  }
  if ([decoder containsValueForKey: @"originSourceURL"])
  {
    __originSourceURL = [[decoder decodeObjectForKey: @"originSourceURL"] retain_stub];
    __originSourceURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"properties"])
  {
    __properties = [[decoder decodeObjectForKey: @"properties"] retain_stub];
    __properties_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentTitle"])
  {
    __commentTitle = [[decoder decodeObjectForKey: @"commentTitle"] retain_stub];
    __commentTitle_isset = YES;
  }
  if ([decoder containsValueForKey: @"publishDate"])
  {
    __publishDate = [decoder decodeInt64ForKey: @"publishDate"];
    __publishDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"published"])
  {
    __published = [decoder decodeBoolForKey: @"published"];
    __published_isset = YES;
  }
  if ([decoder containsValueForKey: @"requested"])
  {
    __requested = [decoder decodeBoolForKey: @"requested"];
    __requested_isset = YES;
  }
  if ([decoder containsValueForKey: @"numReplies"])
  {
    __numReplies = [decoder decodeInt32ForKey: @"numReplies"];
    __numReplies_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastReplyDate"])
  {
    __lastReplyDate = [decoder decodeInt64ForKey: @"lastReplyDate"];
    __lastReplyDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"nps"])
  {
    __nps = [decoder decodeInt32ForKey: @"nps"];
    __nps_isset = YES;
  }
  if ([decoder containsValueForKey: @"rresponses"])
  {
    __rresponses = [[decoder decodeObjectForKey: @"rresponses"] retain_stub];
    __rresponses_isset = YES;
  }
  if ([decoder containsValueForKey: @"npsBgColor"])
  {
    __npsBgColor = [[decoder decodeObjectForKey: @"npsBgColor"] retain_stub];
    __npsBgColor_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasResponded"])
  {
    __hasResponded = [decoder decodeBoolForKey: @"hasResponded"];
    __hasResponded_isset = YES;
  }
  if ([decoder containsValueForKey: @"isStarRatingEnabled"])
  {
    __isStarRatingEnabled = [decoder decodeBoolForKey: @"isStarRatingEnabled"];
    __isStarRatingEnabled_isset = YES;
  }
  if ([decoder containsValueForKey: @"allowedActions"])
  {
    __allowedActions = [[decoder decodeObjectForKey: @"allowedActions"] retain_stub];
    __allowedActions_isset = YES;
  }
  if ([decoder containsValueForKey: @"sentiment"])
  {
    __sentiment = [decoder decodeIntForKey: @"sentiment"];
    __sentiment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__locationName_isset)
  {
    [encoder encodeObject: __locationName forKey: @"locationName"];
  }
  if (__reviewerId_isset)
  {
    [encoder encodeObject: __reviewerId forKey: @"reviewerId"];
  }
  if (__reviewerName_isset)
  {
    [encoder encodeObject: __reviewerName forKey: @"reviewerName"];
  }
  if (__reviewerPhotoUrl_isset)
  {
    [encoder encodeObject: __reviewerPhotoUrl forKey: @"reviewerPhotoUrl"];
  }
  if (__reviewerProfileUrl_isset)
  {
    [encoder encodeObject: __reviewerProfileUrl forKey: @"reviewerProfileUrl"];
  }
  if (__reviewerEmail_isset)
  {
    [encoder encodeObject: __reviewerEmail forKey: @"reviewerEmail"];
  }
  if (__reviewerPhone_isset)
  {
    [encoder encodeObject: __reviewerPhone forKey: @"reviewerPhone"];
  }
  if (__rating_isset)
  {
    [encoder encodeDouble: __rating forKey: @"rating"];
  }
  if (__normalizedRating_isset)
  {
    [encoder encodeDouble: __normalizedRating forKey: @"normalizedRating"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
  if (__ratedTimestamp_isset)
  {
    [encoder encodeInt64: __ratedTimestamp forKey: @"ratedTimestamp"];
  }
  if (__addedTimestamp_isset)
  {
    [encoder encodeInt64: __addedTimestamp forKey: @"addedTimestamp"];
  }
  if (__updatedTimestamp_isset)
  {
    [encoder encodeInt64: __updatedTimestamp forKey: @"updatedTimestamp"];
  }
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__sourceId_isset)
  {
    [encoder encodeObject: __sourceId forKey: @"sourceId"];
  }
  if (__sourceName_isset)
  {
    [encoder encodeObject: __sourceName forKey: @"sourceName"];
  }
  if (__sourceSmallIconPath_isset)
  {
    [encoder encodeObject: __sourceSmallIconPath forKey: @"sourceSmallIconPath"];
  }
  if (__sourceLargeIconPath_isset)
  {
    [encoder encodeObject: __sourceLargeIconPath forKey: @"sourceLargeIconPath"];
  }
  if (__sourceOverallRS_isset)
  {
    [encoder encodeObject: __sourceOverallRS forKey: @"sourceOverallRS"];
  }
  if (__sourceSubRatingRS_isset)
  {
    [encoder encodeObject: __sourceSubRatingRS forKey: @"sourceSubRatingRS"];
  }
  if (__sourceGroup_isset)
  {
    [encoder encodeObject: __sourceGroup forKey: @"sourceGroup"];
  }
  if (__isSourceRequestReviewable_isset)
  {
    [encoder encodeBool: __isSourceRequestReviewable forKey: @"isSourceRequestReviewable"];
  }
  if (__sourceURL_isset)
  {
    [encoder encodeObject: __sourceURL forKey: @"sourceURL"];
  }
  if (__originSourceId_isset)
  {
    [encoder encodeObject: __originSourceId forKey: @"originSourceId"];
  }
  if (__originSourceName_isset)
  {
    [encoder encodeObject: __originSourceName forKey: @"originSourceName"];
  }
  if (__originSourceURL_isset)
  {
    [encoder encodeObject: __originSourceURL forKey: @"originSourceURL"];
  }
  if (__properties_isset)
  {
    [encoder encodeObject: __properties forKey: @"properties"];
  }
  if (__commentTitle_isset)
  {
    [encoder encodeObject: __commentTitle forKey: @"commentTitle"];
  }
  if (__publishDate_isset)
  {
    [encoder encodeInt64: __publishDate forKey: @"publishDate"];
  }
  if (__published_isset)
  {
    [encoder encodeBool: __published forKey: @"published"];
  }
  if (__requested_isset)
  {
    [encoder encodeBool: __requested forKey: @"requested"];
  }
  if (__numReplies_isset)
  {
    [encoder encodeInt32: __numReplies forKey: @"numReplies"];
  }
  if (__lastReplyDate_isset)
  {
    [encoder encodeInt64: __lastReplyDate forKey: @"lastReplyDate"];
  }
  if (__nps_isset)
  {
    [encoder encodeInt32: __nps forKey: @"nps"];
  }
  if (__rresponses_isset)
  {
    [encoder encodeObject: __rresponses forKey: @"rresponses"];
  }
  if (__npsBgColor_isset)
  {
    [encoder encodeObject: __npsBgColor forKey: @"npsBgColor"];
  }
  if (__hasResponded_isset)
  {
    [encoder encodeBool: __hasResponded forKey: @"hasResponded"];
  }
  if (__isStarRatingEnabled_isset)
  {
    [encoder encodeBool: __isStarRatingEnabled forKey: @"isStarRatingEnabled"];
  }
  if (__allowedActions_isset)
  {
    [encoder encodeObject: __allowedActions forKey: @"allowedActions"];
  }
  if (__sentiment_isset)
  {
    [encoder encodeInt: __sentiment forKey: @"sentiment"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__locationName release_stub];
  [__reviewerId release_stub];
  [__reviewerName release_stub];
  [__reviewerPhotoUrl release_stub];
  [__reviewerProfileUrl release_stub];
  [__reviewerEmail release_stub];
  [__reviewerPhone release_stub];
  [__date release_stub];
  [__comment release_stub];
  [__tags release_stub];
  [__sourceId release_stub];
  [__sourceName release_stub];
  [__sourceSmallIconPath release_stub];
  [__sourceLargeIconPath release_stub];
  [__sourceOverallRS release_stub];
  [__sourceSubRatingRS release_stub];
  [__sourceGroup release_stub];
  [__sourceURL release_stub];
  [__originSourceId release_stub];
  [__originSourceName release_stub];
  [__originSourceURL release_stub];
  [__properties release_stub];
  [__commentTitle release_stub];
  [__rresponses release_stub];
  [__npsBgColor release_stub];
  [__allowedActions release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) locationName {
  return [[__locationName retain_stub] autorelease_stub];
}

- (void) setLocationName: (NSString *) locationName {
  [locationName retain_stub];
  [__locationName release_stub];
  __locationName = locationName;
  __locationName_isset = YES;
}

- (BOOL) locationNameIsSet {
  return __locationName_isset;
}

- (void) unsetLocationName {
  [__locationName release_stub];
  __locationName = nil;
  __locationName_isset = NO;
}

- (NSString *) reviewerId {
  return [[__reviewerId retain_stub] autorelease_stub];
}

- (void) setReviewerId: (NSString *) reviewerId {
  [reviewerId retain_stub];
  [__reviewerId release_stub];
  __reviewerId = reviewerId;
  __reviewerId_isset = YES;
}

- (BOOL) reviewerIdIsSet {
  return __reviewerId_isset;
}

- (void) unsetReviewerId {
  [__reviewerId release_stub];
  __reviewerId = nil;
  __reviewerId_isset = NO;
}

- (NSString *) reviewerName {
  return [[__reviewerName retain_stub] autorelease_stub];
}

- (void) setReviewerName: (NSString *) reviewerName {
  [reviewerName retain_stub];
  [__reviewerName release_stub];
  __reviewerName = reviewerName;
  __reviewerName_isset = YES;
}

- (BOOL) reviewerNameIsSet {
  return __reviewerName_isset;
}

- (void) unsetReviewerName {
  [__reviewerName release_stub];
  __reviewerName = nil;
  __reviewerName_isset = NO;
}

- (NSString *) reviewerPhotoUrl {
  return [[__reviewerPhotoUrl retain_stub] autorelease_stub];
}

- (void) setReviewerPhotoUrl: (NSString *) reviewerPhotoUrl {
  [reviewerPhotoUrl retain_stub];
  [__reviewerPhotoUrl release_stub];
  __reviewerPhotoUrl = reviewerPhotoUrl;
  __reviewerPhotoUrl_isset = YES;
}

- (BOOL) reviewerPhotoUrlIsSet {
  return __reviewerPhotoUrl_isset;
}

- (void) unsetReviewerPhotoUrl {
  [__reviewerPhotoUrl release_stub];
  __reviewerPhotoUrl = nil;
  __reviewerPhotoUrl_isset = NO;
}

- (NSString *) reviewerProfileUrl {
  return [[__reviewerProfileUrl retain_stub] autorelease_stub];
}

- (void) setReviewerProfileUrl: (NSString *) reviewerProfileUrl {
  [reviewerProfileUrl retain_stub];
  [__reviewerProfileUrl release_stub];
  __reviewerProfileUrl = reviewerProfileUrl;
  __reviewerProfileUrl_isset = YES;
}

- (BOOL) reviewerProfileUrlIsSet {
  return __reviewerProfileUrl_isset;
}

- (void) unsetReviewerProfileUrl {
  [__reviewerProfileUrl release_stub];
  __reviewerProfileUrl = nil;
  __reviewerProfileUrl_isset = NO;
}

- (NSString *) reviewerEmail {
  return [[__reviewerEmail retain_stub] autorelease_stub];
}

- (void) setReviewerEmail: (NSString *) reviewerEmail {
  [reviewerEmail retain_stub];
  [__reviewerEmail release_stub];
  __reviewerEmail = reviewerEmail;
  __reviewerEmail_isset = YES;
}

- (BOOL) reviewerEmailIsSet {
  return __reviewerEmail_isset;
}

- (void) unsetReviewerEmail {
  [__reviewerEmail release_stub];
  __reviewerEmail = nil;
  __reviewerEmail_isset = NO;
}

- (NSString *) reviewerPhone {
  return [[__reviewerPhone retain_stub] autorelease_stub];
}

- (void) setReviewerPhone: (NSString *) reviewerPhone {
  [reviewerPhone retain_stub];
  [__reviewerPhone release_stub];
  __reviewerPhone = reviewerPhone;
  __reviewerPhone_isset = YES;
}

- (BOOL) reviewerPhoneIsSet {
  return __reviewerPhone_isset;
}

- (void) unsetReviewerPhone {
  [__reviewerPhone release_stub];
  __reviewerPhone = nil;
  __reviewerPhone_isset = NO;
}

- (double) rating {
  return __rating;
}

- (void) setRating: (double) rating {
  __rating = rating;
  __rating_isset = YES;
}

- (BOOL) ratingIsSet {
  return __rating_isset;
}

- (void) unsetRating {
  __rating_isset = NO;
}

- (double) normalizedRating {
  return __normalizedRating;
}

- (void) setNormalizedRating: (double) normalizedRating {
  __normalizedRating = normalizedRating;
  __normalizedRating_isset = YES;
}

- (BOOL) normalizedRatingIsSet {
  return __normalizedRating_isset;
}

- (void) unsetNormalizedRating {
  __normalizedRating_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (int64_t) ratedTimestamp {
  return __ratedTimestamp;
}

- (void) setRatedTimestamp: (int64_t) ratedTimestamp {
  __ratedTimestamp = ratedTimestamp;
  __ratedTimestamp_isset = YES;
}

- (BOOL) ratedTimestampIsSet {
  return __ratedTimestamp_isset;
}

- (void) unsetRatedTimestamp {
  __ratedTimestamp_isset = NO;
}

- (int64_t) addedTimestamp {
  return __addedTimestamp;
}

- (void) setAddedTimestamp: (int64_t) addedTimestamp {
  __addedTimestamp = addedTimestamp;
  __addedTimestamp_isset = YES;
}

- (BOOL) addedTimestampIsSet {
  return __addedTimestamp_isset;
}

- (void) unsetAddedTimestamp {
  __addedTimestamp_isset = NO;
}

- (int64_t) updatedTimestamp {
  return __updatedTimestamp;
}

- (void) setUpdatedTimestamp: (int64_t) updatedTimestamp {
  __updatedTimestamp = updatedTimestamp;
  __updatedTimestamp_isset = YES;
}

- (BOOL) updatedTimestampIsSet {
  return __updatedTimestamp_isset;
}

- (void) unsetUpdatedTimestamp {
  __updatedTimestamp_isset = NO;
}

- (NSString *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (NSString *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) sourceId {
  return [[__sourceId retain_stub] autorelease_stub];
}

- (void) setSourceId: (NSString *) sourceId {
  [sourceId retain_stub];
  [__sourceId release_stub];
  __sourceId = sourceId;
  __sourceId_isset = YES;
}

- (BOOL) sourceIdIsSet {
  return __sourceId_isset;
}

- (void) unsetSourceId {
  [__sourceId release_stub];
  __sourceId = nil;
  __sourceId_isset = NO;
}

- (NSString *) sourceName {
  return [[__sourceName retain_stub] autorelease_stub];
}

- (void) setSourceName: (NSString *) sourceName {
  [sourceName retain_stub];
  [__sourceName release_stub];
  __sourceName = sourceName;
  __sourceName_isset = YES;
}

- (BOOL) sourceNameIsSet {
  return __sourceName_isset;
}

- (void) unsetSourceName {
  [__sourceName release_stub];
  __sourceName = nil;
  __sourceName_isset = NO;
}

- (NSString *) sourceSmallIconPath {
  return [[__sourceSmallIconPath retain_stub] autorelease_stub];
}

- (void) setSourceSmallIconPath: (NSString *) sourceSmallIconPath {
  [sourceSmallIconPath retain_stub];
  [__sourceSmallIconPath release_stub];
  __sourceSmallIconPath = sourceSmallIconPath;
  __sourceSmallIconPath_isset = YES;
}

- (BOOL) sourceSmallIconPathIsSet {
  return __sourceSmallIconPath_isset;
}

- (void) unsetSourceSmallIconPath {
  [__sourceSmallIconPath release_stub];
  __sourceSmallIconPath = nil;
  __sourceSmallIconPath_isset = NO;
}

- (NSString *) sourceLargeIconPath {
  return [[__sourceLargeIconPath retain_stub] autorelease_stub];
}

- (void) setSourceLargeIconPath: (NSString *) sourceLargeIconPath {
  [sourceLargeIconPath retain_stub];
  [__sourceLargeIconPath release_stub];
  __sourceLargeIconPath = sourceLargeIconPath;
  __sourceLargeIconPath_isset = YES;
}

- (BOOL) sourceLargeIconPathIsSet {
  return __sourceLargeIconPath_isset;
}

- (void) unsetSourceLargeIconPath {
  [__sourceLargeIconPath release_stub];
  __sourceLargeIconPath = nil;
  __sourceLargeIconPath_isset = NO;
}

- (RatingScale *) sourceOverallRS {
  return [[__sourceOverallRS retain_stub] autorelease_stub];
}

- (void) setSourceOverallRS: (RatingScale *) sourceOverallRS {
  [sourceOverallRS retain_stub];
  [__sourceOverallRS release_stub];
  __sourceOverallRS = sourceOverallRS;
  __sourceOverallRS_isset = YES;
}

- (BOOL) sourceOverallRSIsSet {
  return __sourceOverallRS_isset;
}

- (void) unsetSourceOverallRS {
  [__sourceOverallRS release_stub];
  __sourceOverallRS = nil;
  __sourceOverallRS_isset = NO;
}

- (NSMutableDictionary *) sourceSubRatingRS {
  return [[__sourceSubRatingRS retain_stub] autorelease_stub];
}

- (void) setSourceSubRatingRS: (NSMutableDictionary *) sourceSubRatingRS {
  [sourceSubRatingRS retain_stub];
  [__sourceSubRatingRS release_stub];
  __sourceSubRatingRS = sourceSubRatingRS;
  __sourceSubRatingRS_isset = YES;
}

- (BOOL) sourceSubRatingRSIsSet {
  return __sourceSubRatingRS_isset;
}

- (void) unsetSourceSubRatingRS {
  [__sourceSubRatingRS release_stub];
  __sourceSubRatingRS = nil;
  __sourceSubRatingRS_isset = NO;
}

- (NSString *) sourceGroup {
  return [[__sourceGroup retain_stub] autorelease_stub];
}

- (void) setSourceGroup: (NSString *) sourceGroup {
  [sourceGroup retain_stub];
  [__sourceGroup release_stub];
  __sourceGroup = sourceGroup;
  __sourceGroup_isset = YES;
}

- (BOOL) sourceGroupIsSet {
  return __sourceGroup_isset;
}

- (void) unsetSourceGroup {
  [__sourceGroup release_stub];
  __sourceGroup = nil;
  __sourceGroup_isset = NO;
}

- (BOOL) isSourceRequestReviewable {
  return __isSourceRequestReviewable;
}

- (void) setIsSourceRequestReviewable: (BOOL) isSourceRequestReviewable {
  __isSourceRequestReviewable = isSourceRequestReviewable;
  __isSourceRequestReviewable_isset = YES;
}

- (BOOL) isSourceRequestReviewableIsSet {
  return __isSourceRequestReviewable_isset;
}

- (void) unsetIsSourceRequestReviewable {
  __isSourceRequestReviewable_isset = NO;
}

- (NSString *) sourceURL {
  return [[__sourceURL retain_stub] autorelease_stub];
}

- (void) setSourceURL: (NSString *) sourceURL {
  [sourceURL retain_stub];
  [__sourceURL release_stub];
  __sourceURL = sourceURL;
  __sourceURL_isset = YES;
}

- (BOOL) sourceURLIsSet {
  return __sourceURL_isset;
}

- (void) unsetSourceURL {
  [__sourceURL release_stub];
  __sourceURL = nil;
  __sourceURL_isset = NO;
}

- (NSString *) originSourceId {
  return [[__originSourceId retain_stub] autorelease_stub];
}

- (void) setOriginSourceId: (NSString *) originSourceId {
  [originSourceId retain_stub];
  [__originSourceId release_stub];
  __originSourceId = originSourceId;
  __originSourceId_isset = YES;
}

- (BOOL) originSourceIdIsSet {
  return __originSourceId_isset;
}

- (void) unsetOriginSourceId {
  [__originSourceId release_stub];
  __originSourceId = nil;
  __originSourceId_isset = NO;
}

- (NSString *) originSourceName {
  return [[__originSourceName retain_stub] autorelease_stub];
}

- (void) setOriginSourceName: (NSString *) originSourceName {
  [originSourceName retain_stub];
  [__originSourceName release_stub];
  __originSourceName = originSourceName;
  __originSourceName_isset = YES;
}

- (BOOL) originSourceNameIsSet {
  return __originSourceName_isset;
}

- (void) unsetOriginSourceName {
  [__originSourceName release_stub];
  __originSourceName = nil;
  __originSourceName_isset = NO;
}

- (NSString *) originSourceURL {
  return [[__originSourceURL retain_stub] autorelease_stub];
}

- (void) setOriginSourceURL: (NSString *) originSourceURL {
  [originSourceURL retain_stub];
  [__originSourceURL release_stub];
  __originSourceURL = originSourceURL;
  __originSourceURL_isset = YES;
}

- (BOOL) originSourceURLIsSet {
  return __originSourceURL_isset;
}

- (void) unsetOriginSourceURL {
  [__originSourceURL release_stub];
  __originSourceURL = nil;
  __originSourceURL_isset = NO;
}

- (NSMutableArray *) properties {
  return [[__properties retain_stub] autorelease_stub];
}

- (void) setProperties: (NSMutableArray *) properties {
  [properties retain_stub];
  [__properties release_stub];
  __properties = properties;
  __properties_isset = YES;
}

- (BOOL) propertiesIsSet {
  return __properties_isset;
}

- (void) unsetProperties {
  [__properties release_stub];
  __properties = nil;
  __properties_isset = NO;
}

- (NSString *) commentTitle {
  return [[__commentTitle retain_stub] autorelease_stub];
}

- (void) setCommentTitle: (NSString *) commentTitle {
  [commentTitle retain_stub];
  [__commentTitle release_stub];
  __commentTitle = commentTitle;
  __commentTitle_isset = YES;
}

- (BOOL) commentTitleIsSet {
  return __commentTitle_isset;
}

- (void) unsetCommentTitle {
  [__commentTitle release_stub];
  __commentTitle = nil;
  __commentTitle_isset = NO;
}

- (int64_t) publishDate {
  return __publishDate;
}

- (void) setPublishDate: (int64_t) publishDate {
  __publishDate = publishDate;
  __publishDate_isset = YES;
}

- (BOOL) publishDateIsSet {
  return __publishDate_isset;
}

- (void) unsetPublishDate {
  __publishDate_isset = NO;
}

- (BOOL) published {
  return __published;
}

- (void) setPublished: (BOOL) published {
  __published = published;
  __published_isset = YES;
}

- (BOOL) publishedIsSet {
  return __published_isset;
}

- (void) unsetPublished {
  __published_isset = NO;
}

- (BOOL) requested {
  return __requested;
}

- (void) setRequested: (BOOL) requested {
  __requested = requested;
  __requested_isset = YES;
}

- (BOOL) requestedIsSet {
  return __requested_isset;
}

- (void) unsetRequested {
  __requested_isset = NO;
}

- (int32_t) numReplies {
  return __numReplies;
}

- (void) setNumReplies: (int32_t) numReplies {
  __numReplies = numReplies;
  __numReplies_isset = YES;
}

- (BOOL) numRepliesIsSet {
  return __numReplies_isset;
}

- (void) unsetNumReplies {
  __numReplies_isset = NO;
}

- (int64_t) lastReplyDate {
  return __lastReplyDate;
}

- (void) setLastReplyDate: (int64_t) lastReplyDate {
  __lastReplyDate = lastReplyDate;
  __lastReplyDate_isset = YES;
}

- (BOOL) lastReplyDateIsSet {
  return __lastReplyDate_isset;
}

- (void) unsetLastReplyDate {
  __lastReplyDate_isset = NO;
}

- (int32_t) nps {
  return __nps;
}

- (void) setNps: (int32_t) nps {
  __nps = nps;
  __nps_isset = YES;
}

- (BOOL) npsIsSet {
  return __nps_isset;
}

- (void) unsetNps {
  __nps_isset = NO;
}

- (NSMutableArray *) rresponses {
  return [[__rresponses retain_stub] autorelease_stub];
}

- (void) setRresponses: (NSMutableArray *) rresponses {
  [rresponses retain_stub];
  [__rresponses release_stub];
  __rresponses = rresponses;
  __rresponses_isset = YES;
}

- (BOOL) rresponsesIsSet {
  return __rresponses_isset;
}

- (void) unsetRresponses {
  [__rresponses release_stub];
  __rresponses = nil;
  __rresponses_isset = NO;
}

- (NSString *) npsBgColor {
  return [[__npsBgColor retain_stub] autorelease_stub];
}

- (void) setNpsBgColor: (NSString *) npsBgColor {
  [npsBgColor retain_stub];
  [__npsBgColor release_stub];
  __npsBgColor = npsBgColor;
  __npsBgColor_isset = YES;
}

- (BOOL) npsBgColorIsSet {
  return __npsBgColor_isset;
}

- (void) unsetNpsBgColor {
  [__npsBgColor release_stub];
  __npsBgColor = nil;
  __npsBgColor_isset = NO;
}

- (BOOL) hasResponded {
  return __hasResponded;
}

- (void) setHasResponded: (BOOL) hasResponded {
  __hasResponded = hasResponded;
  __hasResponded_isset = YES;
}

- (BOOL) hasRespondedIsSet {
  return __hasResponded_isset;
}

- (void) unsetHasResponded {
  __hasResponded_isset = NO;
}

- (BOOL) isStarRatingEnabled {
  return __isStarRatingEnabled;
}

- (void) setIsStarRatingEnabled: (BOOL) isStarRatingEnabled {
  __isStarRatingEnabled = isStarRatingEnabled;
  __isStarRatingEnabled_isset = YES;
}

- (BOOL) isStarRatingEnabledIsSet {
  return __isStarRatingEnabled_isset;
}

- (void) unsetIsStarRatingEnabled {
  __isStarRatingEnabled_isset = NO;
}

- (NSMutableArray *) allowedActions {
  return [[__allowedActions retain_stub] autorelease_stub];
}

- (void) setAllowedActions: (NSMutableArray *) allowedActions {
  [allowedActions retain_stub];
  [__allowedActions release_stub];
  __allowedActions = allowedActions;
  __allowedActions_isset = YES;
}

- (BOOL) allowedActionsIsSet {
  return __allowedActions_isset;
}

- (void) unsetAllowedActions {
  [__allowedActions release_stub];
  __allowedActions = nil;
  __allowedActions_isset = NO;
}

- (int) sentiment {
  return __sentiment;
}

- (void) setSentiment: (int) sentiment {
  __sentiment = sentiment;
  __sentiment_isset = YES;
}

- (BOOL) sentimentIsSet {
  return __sentiment_isset;
}

- (void) unsetSentiment {
  __sentiment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerPhotoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerProfileUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReviewerPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setNormalizedRating: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRatedTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAddedTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdatedTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            Tag *_elem8 = [[Tag alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
            [_elem8 release_stub];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceSmallIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceLargeIconPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRUCT) {
          RatingScale *fieldValue = [[RatingScale alloc] init];
          [fieldValue read: inProtocol];
          [self setSourceOverallRS: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_MAP) {
          int _size9;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size9];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size9];
          int _i10;
          for (_i10 = 0; _i10 < _size9; ++_i10)
          {
            int _key11 = [inProtocol readI32];
            RatingScale *_val12 = [[RatingScale alloc] init];
            [_val12 read: inProtocol];
            [fieldValue setObject: _val12 forKey: [NSNumber numberWithInt: _key11]];
            [_val12 release_stub];
          }
          [inProtocol readMapEnd];
          [self setSourceSubRatingRS: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceGroup: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsSourceRequestReviewable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOriginSourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOriginSourceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOriginSourceURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            Property *_elem15 = [[Property alloc] init];
            [_elem15 read: inProtocol];
            [fieldValue addObject: _elem15];
            [_elem15 release_stub];
          }
          [inProtocol readListEnd];
          [self setProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCommentTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPublishDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPublished: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRequested: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumReplies: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 35:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastReplyDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 36:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNps: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 37:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            ReviewResponse *_elem18 = [[ReviewResponse alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setRresponses: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 38:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNpsBgColor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 39:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasResponded: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 40:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsStarRatingEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 41:
        if (fieldType == TType_LIST) {
          int _size19;
          [inProtocol readListBeginReturningElementType: NULL size: &_size19];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size19];
          int _i20;
          for (_i20 = 0; _i20 < _size19; ++_i20)
          {
            NSString * _elem21 = [inProtocol readString];
            [fieldValue addObject: _elem21];
          }
          [inProtocol readListEnd];
          [self setAllowedActions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 42:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSentiment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Review"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationName_isset) {
    if (__locationName != nil) {
      [outProtocol writeFieldBeginWithName: @"locationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __locationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerId_isset) {
    if (__reviewerId != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __reviewerId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerName_isset) {
    if (__reviewerName != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __reviewerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerPhotoUrl_isset) {
    if (__reviewerPhotoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerPhotoUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __reviewerPhotoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerProfileUrl_isset) {
    if (__reviewerProfileUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerProfileUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __reviewerProfileUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerEmail_isset) {
    if (__reviewerEmail != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerEmail" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __reviewerEmail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reviewerPhone_isset) {
    if (__reviewerPhone != nil) {
      [outProtocol writeFieldBeginWithName: @"reviewerPhone" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __reviewerPhone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rating_isset) {
    [outProtocol writeFieldBeginWithName: @"rating" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __rating];
    [outProtocol writeFieldEnd];
  }
  if (__normalizedRating_isset) {
    [outProtocol writeFieldBeginWithName: @"normalizedRating" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __normalizedRating];
    [outProtocol writeFieldEnd];
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ratedTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"ratedTimestamp" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __ratedTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__addedTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"addedTimestamp" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __addedTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__updatedTimestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"updatedTimestamp" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __updatedTimestamp];
    [outProtocol writeFieldEnd];
  }
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __comment];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 16];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__tags count]];
        int i23;
        for (i23 = 0; i23 < [__tags count]; i23++)
        {
          [[__tags objectAtIndex: i23] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceId_isset) {
    if (__sourceId != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceId" type: TType_STRING fieldID: 17];
      [outProtocol writeString: __sourceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceName_isset) {
    if (__sourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceName" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __sourceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceSmallIconPath_isset) {
    if (__sourceSmallIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceSmallIconPath" type: TType_STRING fieldID: 19];
      [outProtocol writeString: __sourceSmallIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceLargeIconPath_isset) {
    if (__sourceLargeIconPath != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceLargeIconPath" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __sourceLargeIconPath];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceOverallRS_isset) {
    if (__sourceOverallRS != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceOverallRS" type: TType_STRUCT fieldID: 21];
      [__sourceOverallRS write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceSubRatingRS_isset) {
    if (__sourceSubRatingRS != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceSubRatingRS" type: TType_MAP fieldID: 22];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRUCT size: [__sourceSubRatingRS count]];
        NSEnumerator * _iter24 = [__sourceSubRatingRS keyEnumerator];
        id key25;
        while ((key25 = [_iter24 nextObject]))
        {
          [outProtocol writeI32: [key25 intValue]];
          [[__sourceSubRatingRS objectForKey: key25] write: outProtocol];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceGroup_isset) {
    if (__sourceGroup != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceGroup" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __sourceGroup];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSourceRequestReviewable_isset) {
    [outProtocol writeFieldBeginWithName: @"isSourceRequestReviewable" type: TType_BOOL fieldID: 24];
    [outProtocol writeBool: __isSourceRequestReviewable];
    [outProtocol writeFieldEnd];
  }
  if (__sourceURL_isset) {
    if (__sourceURL != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceURL" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __sourceURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__originSourceId_isset) {
    if (__originSourceId != nil) {
      [outProtocol writeFieldBeginWithName: @"originSourceId" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __originSourceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__originSourceName_isset) {
    if (__originSourceName != nil) {
      [outProtocol writeFieldBeginWithName: @"originSourceName" type: TType_STRING fieldID: 27];
      [outProtocol writeString: __originSourceName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__originSourceURL_isset) {
    if (__originSourceURL != nil) {
      [outProtocol writeFieldBeginWithName: @"originSourceURL" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __originSourceURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__properties_isset) {
    if (__properties != nil) {
      [outProtocol writeFieldBeginWithName: @"properties" type: TType_LIST fieldID: 29];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__properties count]];
        int i27;
        for (i27 = 0; i27 < [__properties count]; i27++)
        {
          [[__properties objectAtIndex: i27] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__commentTitle_isset) {
    if (__commentTitle != nil) {
      [outProtocol writeFieldBeginWithName: @"commentTitle" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __commentTitle];
      [outProtocol writeFieldEnd];
    }
  }
  if (__publishDate_isset) {
    [outProtocol writeFieldBeginWithName: @"publishDate" type: TType_I64 fieldID: 31];
    [outProtocol writeI64: __publishDate];
    [outProtocol writeFieldEnd];
  }
  if (__published_isset) {
    [outProtocol writeFieldBeginWithName: @"published" type: TType_BOOL fieldID: 32];
    [outProtocol writeBool: __published];
    [outProtocol writeFieldEnd];
  }
  if (__requested_isset) {
    [outProtocol writeFieldBeginWithName: @"requested" type: TType_BOOL fieldID: 33];
    [outProtocol writeBool: __requested];
    [outProtocol writeFieldEnd];
  }
  if (__numReplies_isset) {
    [outProtocol writeFieldBeginWithName: @"numReplies" type: TType_I32 fieldID: 34];
    [outProtocol writeI32: __numReplies];
    [outProtocol writeFieldEnd];
  }
  if (__lastReplyDate_isset) {
    [outProtocol writeFieldBeginWithName: @"lastReplyDate" type: TType_I64 fieldID: 35];
    [outProtocol writeI64: __lastReplyDate];
    [outProtocol writeFieldEnd];
  }
  if (__nps_isset) {
    [outProtocol writeFieldBeginWithName: @"nps" type: TType_I32 fieldID: 36];
    [outProtocol writeI32: __nps];
    [outProtocol writeFieldEnd];
  }
  if (__rresponses_isset) {
    if (__rresponses != nil) {
      [outProtocol writeFieldBeginWithName: @"rresponses" type: TType_LIST fieldID: 37];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__rresponses count]];
        int i29;
        for (i29 = 0; i29 < [__rresponses count]; i29++)
        {
          [[__rresponses objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__npsBgColor_isset) {
    if (__npsBgColor != nil) {
      [outProtocol writeFieldBeginWithName: @"npsBgColor" type: TType_STRING fieldID: 38];
      [outProtocol writeString: __npsBgColor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hasResponded_isset) {
    [outProtocol writeFieldBeginWithName: @"hasResponded" type: TType_BOOL fieldID: 39];
    [outProtocol writeBool: __hasResponded];
    [outProtocol writeFieldEnd];
  }
  if (__isStarRatingEnabled_isset) {
    [outProtocol writeFieldBeginWithName: @"isStarRatingEnabled" type: TType_BOOL fieldID: 40];
    [outProtocol writeBool: __isStarRatingEnabled];
    [outProtocol writeFieldEnd];
  }
  if (__allowedActions_isset) {
    if (__allowedActions != nil) {
      [outProtocol writeFieldBeginWithName: @"allowedActions" type: TType_LIST fieldID: 41];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__allowedActions count]];
        int i31;
        for (i31 = 0; i31 < [__allowedActions count]; i31++)
        {
          [outProtocol writeString: [__allowedActions objectAtIndex: i31]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sentiment_isset) {
    [outProtocol writeFieldBeginWithName: @"sentiment" type: TType_I32 fieldID: 42];
    [outProtocol writeI32: __sentiment];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Review("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",locationName:"];
  [ms appendFormat: @"\"%@\"", __locationName];
  [ms appendString: @",reviewerId:"];
  [ms appendFormat: @"\"%@\"", __reviewerId];
  [ms appendString: @",reviewerName:"];
  [ms appendFormat: @"\"%@\"", __reviewerName];
  [ms appendString: @",reviewerPhotoUrl:"];
  [ms appendFormat: @"\"%@\"", __reviewerPhotoUrl];
  [ms appendString: @",reviewerProfileUrl:"];
  [ms appendFormat: @"\"%@\"", __reviewerProfileUrl];
  [ms appendString: @",reviewerEmail:"];
  [ms appendFormat: @"\"%@\"", __reviewerEmail];
  [ms appendString: @",reviewerPhone:"];
  [ms appendFormat: @"\"%@\"", __reviewerPhone];
  [ms appendString: @",rating:"];
  [ms appendFormat: @"%f", __rating];
  [ms appendString: @",normalizedRating:"];
  [ms appendFormat: @"%f", __normalizedRating];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @",ratedTimestamp:"];
  [ms appendFormat: @"%qi", __ratedTimestamp];
  [ms appendString: @",addedTimestamp:"];
  [ms appendFormat: @"%qi", __addedTimestamp];
  [ms appendString: @",updatedTimestamp:"];
  [ms appendFormat: @"%qi", __updatedTimestamp];
  [ms appendString: @",comment:"];
  [ms appendFormat: @"\"%@\"", __comment];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",sourceId:"];
  [ms appendFormat: @"\"%@\"", __sourceId];
  [ms appendString: @",sourceName:"];
  [ms appendFormat: @"\"%@\"", __sourceName];
  [ms appendString: @",sourceSmallIconPath:"];
  [ms appendFormat: @"\"%@\"", __sourceSmallIconPath];
  [ms appendString: @",sourceLargeIconPath:"];
  [ms appendFormat: @"\"%@\"", __sourceLargeIconPath];
  [ms appendString: @",sourceOverallRS:"];
  [ms appendFormat: @"%@", __sourceOverallRS];
  [ms appendString: @",sourceSubRatingRS:"];
  [ms appendFormat: @"%@", __sourceSubRatingRS];
  [ms appendString: @",sourceGroup:"];
  [ms appendFormat: @"\"%@\"", __sourceGroup];
  [ms appendString: @",isSourceRequestReviewable:"];
  [ms appendFormat: @"%i", __isSourceRequestReviewable];
  [ms appendString: @",sourceURL:"];
  [ms appendFormat: @"\"%@\"", __sourceURL];
  [ms appendString: @",originSourceId:"];
  [ms appendFormat: @"\"%@\"", __originSourceId];
  [ms appendString: @",originSourceName:"];
  [ms appendFormat: @"\"%@\"", __originSourceName];
  [ms appendString: @",originSourceURL:"];
  [ms appendFormat: @"\"%@\"", __originSourceURL];
  [ms appendString: @",properties:"];
  [ms appendFormat: @"%@", __properties];
  [ms appendString: @",commentTitle:"];
  [ms appendFormat: @"\"%@\"", __commentTitle];
  [ms appendString: @",publishDate:"];
  [ms appendFormat: @"%qi", __publishDate];
  [ms appendString: @",published:"];
  [ms appendFormat: @"%i", __published];
  [ms appendString: @",requested:"];
  [ms appendFormat: @"%i", __requested];
  [ms appendString: @",numReplies:"];
  [ms appendFormat: @"%i", __numReplies];
  [ms appendString: @",lastReplyDate:"];
  [ms appendFormat: @"%qi", __lastReplyDate];
  [ms appendString: @",nps:"];
  [ms appendFormat: @"%i", __nps];
  [ms appendString: @",rresponses:"];
  [ms appendFormat: @"%@", __rresponses];
  [ms appendString: @",npsBgColor:"];
  [ms appendFormat: @"\"%@\"", __npsBgColor];
  [ms appendString: @",hasResponded:"];
  [ms appendFormat: @"%i", __hasResponded];
  [ms appendString: @",isStarRatingEnabled:"];
  [ms appendFormat: @"%i", __isStarRatingEnabled];
  [ms appendString: @",allowedActions:"];
  [ms appendFormat: @"%@", __allowedActions];
  [ms appendString: @",sentiment:"];
  [ms appendFormat: @"%i", __sentiment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SummaryCell

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithName: (NSString *) name values: (NSMutableArray *) values
{
  self = [super init];
  __name = [name retain_stub];
  __name_isset = YES;
  __values = [values retain_stub];
  __values_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"values"])
  {
    __values = [[decoder decodeObjectForKey: @"values"] retain_stub];
    __values_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__values_isset)
  {
    [encoder encodeObject: __values forKey: @"values"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__values release_stub];
  [super dealloc_stub];
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSMutableArray *) values {
  return [[__values retain_stub] autorelease_stub];
}

- (void) setValues: (NSMutableArray *) values {
  [values retain_stub];
  [__values release_stub];
  __values = values;
  __values_isset = YES;
}

- (BOOL) valuesIsSet {
  return __values_isset;
}

- (void) unsetValues {
  [__values release_stub];
  __values = nil;
  __values_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size32;
          [inProtocol readListBeginReturningElementType: NULL size: &_size32];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size32];
          int _i33;
          for (_i33 = 0; _i33 < _size32; ++_i33)
          {
            SummaryValue *_elem34 = [[SummaryValue alloc] init];
            [_elem34 read: inProtocol];
            [fieldValue addObject: _elem34];
            [_elem34 release_stub];
          }
          [inProtocol readListEnd];
          [self setValues: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SummaryCell"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__values_isset) {
    if (__values != nil) {
      [outProtocol writeFieldBeginWithName: @"values" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__values count]];
        int i36;
        for (i36 = 0; i36 < [__values count]; i36++)
        {
          [[__values objectAtIndex: i36] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SummaryCell("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",values:"];
  [ms appendFormat: @"%@", __values];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReferenceData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAuthLocations: (NSMutableArray *) authLocations allSources: (NSMutableArray *) allSources
{
  self = [super init];
  __authLocations = [authLocations retain_stub];
  __authLocations_isset = YES;
  __allSources = [allSources retain_stub];
  __allSources_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"authLocations"])
  {
    __authLocations = [[decoder decodeObjectForKey: @"authLocations"] retain_stub];
    __authLocations_isset = YES;
  }
  if ([decoder containsValueForKey: @"allSources"])
  {
    __allSources = [[decoder decodeObjectForKey: @"allSources"] retain_stub];
    __allSources_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__authLocations_isset)
  {
    [encoder encodeObject: __authLocations forKey: @"authLocations"];
  }
  if (__allSources_isset)
  {
    [encoder encodeObject: __allSources forKey: @"allSources"];
  }
}

- (void) dealloc
{
  [__authLocations release_stub];
  [__allSources release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) authLocations {
  return [[__authLocations retain_stub] autorelease_stub];
}

- (void) setAuthLocations: (NSMutableArray *) authLocations {
  [authLocations retain_stub];
  [__authLocations release_stub];
  __authLocations = authLocations;
  __authLocations_isset = YES;
}

- (BOOL) authLocationsIsSet {
  return __authLocations_isset;
}

- (void) unsetAuthLocations {
  [__authLocations release_stub];
  __authLocations = nil;
  __authLocations_isset = NO;
}

- (NSMutableArray *) allSources {
  return [[__allSources retain_stub] autorelease_stub];
}

- (void) setAllSources: (NSMutableArray *) allSources {
  [allSources retain_stub];
  [__allSources release_stub];
  __allSources = allSources;
  __allSources_isset = YES;
}

- (BOOL) allSourcesIsSet {
  return __allSources_isset;
}

- (void) unsetAllSources {
  [__allSources release_stub];
  __allSources = nil;
  __allSources_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size37;
          [inProtocol readListBeginReturningElementType: NULL size: &_size37];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size37];
          int _i38;
          for (_i38 = 0; _i38 < _size37; ++_i38)
          {
            Location *_elem39 = [[Location alloc] init];
            [_elem39 read: inProtocol];
            [fieldValue addObject: _elem39];
            [_elem39 release_stub];
          }
          [inProtocol readListEnd];
          [self setAuthLocations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            Source *_elem42 = [[Source alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setAllSources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReferenceData"];
  if (__authLocations_isset) {
    if (__authLocations != nil) {
      [outProtocol writeFieldBeginWithName: @"authLocations" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__authLocations count]];
        int i44;
        for (i44 = 0; i44 < [__authLocations count]; i44++)
        {
          [[__authLocations objectAtIndex: i44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__allSources_isset) {
    if (__allSources != nil) {
      [outProtocol writeFieldBeginWithName: @"allSources" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__allSources count]];
        int i46;
        for (i46 = 0; i46 < [__allSources count]; i46++)
        {
          [[__allSources objectAtIndex: i46] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReferenceData("];
  [ms appendString: @"authLocations:"];
  [ms appendFormat: @"%@", __authLocations];
  [ms appendString: @",allSources:"];
  [ms appendFormat: @"%@", __allSources];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PostUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id locationName: (NSString *) locationName userName: (NSString *) userName displayName: (NSString *) displayName location: (NSString *) location photoUrl: (NSString *) photoUrl profileUrl: (NSString *) profileUrl
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __locationName = [locationName retain_stub];
  __locationName_isset = YES;
  __userName = [userName retain_stub];
  __userName_isset = YES;
  __displayName = [displayName retain_stub];
  __displayName_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __photoUrl = [photoUrl retain_stub];
  __photoUrl_isset = YES;
  __profileUrl = [profileUrl retain_stub];
  __profileUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationName"])
  {
    __locationName = [[decoder decodeObjectForKey: @"locationName"] retain_stub];
    __locationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"userName"])
  {
    __userName = [[decoder decodeObjectForKey: @"userName"] retain_stub];
    __userName_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayName"])
  {
    __displayName = [[decoder decodeObjectForKey: @"displayName"] retain_stub];
    __displayName_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoUrl"])
  {
    __photoUrl = [[decoder decodeObjectForKey: @"photoUrl"] retain_stub];
    __photoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"profileUrl"])
  {
    __profileUrl = [[decoder decodeObjectForKey: @"profileUrl"] retain_stub];
    __profileUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__locationName_isset)
  {
    [encoder encodeObject: __locationName forKey: @"locationName"];
  }
  if (__userName_isset)
  {
    [encoder encodeObject: __userName forKey: @"userName"];
  }
  if (__displayName_isset)
  {
    [encoder encodeObject: __displayName forKey: @"displayName"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__photoUrl_isset)
  {
    [encoder encodeObject: __photoUrl forKey: @"photoUrl"];
  }
  if (__profileUrl_isset)
  {
    [encoder encodeObject: __profileUrl forKey: @"profileUrl"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__locationName release_stub];
  [__userName release_stub];
  [__displayName release_stub];
  [__location release_stub];
  [__photoUrl release_stub];
  [__profileUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) locationName {
  return [[__locationName retain_stub] autorelease_stub];
}

- (void) setLocationName: (NSString *) locationName {
  [locationName retain_stub];
  [__locationName release_stub];
  __locationName = locationName;
  __locationName_isset = YES;
}

- (BOOL) locationNameIsSet {
  return __locationName_isset;
}

- (void) unsetLocationName {
  [__locationName release_stub];
  __locationName = nil;
  __locationName_isset = NO;
}

- (NSString *) userName {
  return [[__userName retain_stub] autorelease_stub];
}

- (void) setUserName: (NSString *) userName {
  [userName retain_stub];
  [__userName release_stub];
  __userName = userName;
  __userName_isset = YES;
}

- (BOOL) userNameIsSet {
  return __userName_isset;
}

- (void) unsetUserName {
  [__userName release_stub];
  __userName = nil;
  __userName_isset = NO;
}

- (NSString *) displayName {
  return [[__displayName retain_stub] autorelease_stub];
}

- (void) setDisplayName: (NSString *) displayName {
  [displayName retain_stub];
  [__displayName release_stub];
  __displayName = displayName;
  __displayName_isset = YES;
}

- (BOOL) displayNameIsSet {
  return __displayName_isset;
}

- (void) unsetDisplayName {
  [__displayName release_stub];
  __displayName = nil;
  __displayName_isset = NO;
}

- (NSString *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (NSString *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (NSString *) photoUrl {
  return [[__photoUrl retain_stub] autorelease_stub];
}

- (void) setPhotoUrl: (NSString *) photoUrl {
  [photoUrl retain_stub];
  [__photoUrl release_stub];
  __photoUrl = photoUrl;
  __photoUrl_isset = YES;
}

- (BOOL) photoUrlIsSet {
  return __photoUrl_isset;
}

- (void) unsetPhotoUrl {
  [__photoUrl release_stub];
  __photoUrl = nil;
  __photoUrl_isset = NO;
}

- (NSString *) profileUrl {
  return [[__profileUrl retain_stub] autorelease_stub];
}

- (void) setProfileUrl: (NSString *) profileUrl {
  [profileUrl retain_stub];
  [__profileUrl release_stub];
  __profileUrl = profileUrl;
  __profileUrl_isset = YES;
}

- (BOOL) profileUrlIsSet {
  return __profileUrl_isset;
}

- (void) unsetProfileUrl {
  [__profileUrl release_stub];
  __profileUrl = nil;
  __profileUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLocation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProfileUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PostUser"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationName_isset) {
    if (__locationName != nil) {
      [outProtocol writeFieldBeginWithName: @"locationName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __locationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userName_isset) {
    if (__userName != nil) {
      [outProtocol writeFieldBeginWithName: @"userName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __userName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__displayName_isset) {
    if (__displayName != nil) {
      [outProtocol writeFieldBeginWithName: @"displayName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __displayName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __location];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photoUrl_isset) {
    if (__photoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"photoUrl" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __photoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__profileUrl_isset) {
    if (__profileUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"profileUrl" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __profileUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PostUser("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",locationName:"];
  [ms appendFormat: @"\"%@\"", __locationName];
  [ms appendString: @",userName:"];
  [ms appendFormat: @"\"%@\"", __userName];
  [ms appendString: @",displayName:"];
  [ms appendFormat: @"\"%@\"", __displayName];
  [ms appendString: @",location:"];
  [ms appendFormat: @"\"%@\"", __location];
  [ms appendString: @",photoUrl:"];
  [ms appendFormat: @"\"%@\"", __photoUrl];
  [ms appendString: @",profileUrl:"];
  [ms appendFormat: @"\"%@\"", __profileUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Media

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id type: (int) type photoUrl: (NSString *) photoUrl expandedUrl: (NSString *) expandedUrl displayUrl: (NSString *) displayUrl offset: (int32_t) offset length: (int32_t) length properties: (NSMutableDictionary *) properties
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __type = type;
  __type_isset = YES;
  __photoUrl = [photoUrl retain_stub];
  __photoUrl_isset = YES;
  __expandedUrl = [expandedUrl retain_stub];
  __expandedUrl_isset = YES;
  __displayUrl = [displayUrl retain_stub];
  __displayUrl_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __length = length;
  __length_isset = YES;
  __properties = [properties retain_stub];
  __properties_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"photoUrl"])
  {
    __photoUrl = [[decoder decodeObjectForKey: @"photoUrl"] retain_stub];
    __photoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"expandedUrl"])
  {
    __expandedUrl = [[decoder decodeObjectForKey: @"expandedUrl"] retain_stub];
    __expandedUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayUrl"])
  {
    __displayUrl = [[decoder decodeObjectForKey: @"displayUrl"] retain_stub];
    __displayUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  if ([decoder containsValueForKey: @"properties"])
  {
    __properties = [[decoder decodeObjectForKey: @"properties"] retain_stub];
    __properties_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__photoUrl_isset)
  {
    [encoder encodeObject: __photoUrl forKey: @"photoUrl"];
  }
  if (__expandedUrl_isset)
  {
    [encoder encodeObject: __expandedUrl forKey: @"expandedUrl"];
  }
  if (__displayUrl_isset)
  {
    [encoder encodeObject: __displayUrl forKey: @"displayUrl"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
  if (__properties_isset)
  {
    [encoder encodeObject: __properties forKey: @"properties"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__photoUrl release_stub];
  [__expandedUrl release_stub];
  [__displayUrl release_stub];
  [__properties release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) photoUrl {
  return [[__photoUrl retain_stub] autorelease_stub];
}

- (void) setPhotoUrl: (NSString *) photoUrl {
  [photoUrl retain_stub];
  [__photoUrl release_stub];
  __photoUrl = photoUrl;
  __photoUrl_isset = YES;
}

- (BOOL) photoUrlIsSet {
  return __photoUrl_isset;
}

- (void) unsetPhotoUrl {
  [__photoUrl release_stub];
  __photoUrl = nil;
  __photoUrl_isset = NO;
}

- (NSString *) expandedUrl {
  return [[__expandedUrl retain_stub] autorelease_stub];
}

- (void) setExpandedUrl: (NSString *) expandedUrl {
  [expandedUrl retain_stub];
  [__expandedUrl release_stub];
  __expandedUrl = expandedUrl;
  __expandedUrl_isset = YES;
}

- (BOOL) expandedUrlIsSet {
  return __expandedUrl_isset;
}

- (void) unsetExpandedUrl {
  [__expandedUrl release_stub];
  __expandedUrl = nil;
  __expandedUrl_isset = NO;
}

- (NSString *) displayUrl {
  return [[__displayUrl retain_stub] autorelease_stub];
}

- (void) setDisplayUrl: (NSString *) displayUrl {
  [displayUrl retain_stub];
  [__displayUrl release_stub];
  __displayUrl = displayUrl;
  __displayUrl_isset = YES;
}

- (BOOL) displayUrlIsSet {
  return __displayUrl_isset;
}

- (void) unsetDisplayUrl {
  [__displayUrl release_stub];
  __displayUrl = nil;
  __displayUrl_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (NSMutableDictionary *) properties {
  return [[__properties retain_stub] autorelease_stub];
}

- (void) setProperties: (NSMutableDictionary *) properties {
  [properties retain_stub];
  [__properties release_stub];
  __properties = properties;
  __properties_isset = YES;
}

- (BOOL) propertiesIsSet {
  return __properties_isset;
}

- (void) unsetProperties {
  [__properties release_stub];
  __properties = nil;
  __properties_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpandedUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_MAP) {
          int _size47;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size47];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size47];
          int _i48;
          for (_i48 = 0; _i48 < _size47; ++_i48)
          {
            NSString * _key49 = [inProtocol readString];
            NSString * _val50 = [inProtocol readString];
            [fieldValue setObject: _val50 forKey: _key49];
          }
          [inProtocol readMapEnd];
          [self setProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Media"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__photoUrl_isset) {
    if (__photoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"photoUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __photoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expandedUrl_isset) {
    if (__expandedUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"expandedUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __expandedUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__displayUrl_isset) {
    if (__displayUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"displayUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __displayUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  if (__properties_isset) {
    if (__properties != nil) {
      [outProtocol writeFieldBeginWithName: @"properties" type: TType_MAP fieldID: 8];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__properties count]];
        NSEnumerator * _iter51 = [__properties keyEnumerator];
        id key52;
        while ((key52 = [_iter51 nextObject]))
        {
          [outProtocol writeString: key52];
          [outProtocol writeString: [__properties objectForKey: key52]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Media("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",photoUrl:"];
  [ms appendFormat: @"\"%@\"", __photoUrl];
  [ms appendString: @",expandedUrl:"];
  [ms appendFormat: @"\"%@\"", __expandedUrl];
  [ms appendString: @",displayUrl:"];
  [ms appendFormat: @"\"%@\"", __displayUrl];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @",properties:"];
  [ms appendFormat: @"%@", __properties];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialTag

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id offset: (int32_t) offset length: (int32_t) length
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialTag"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialTag("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Hashtag

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithText: (NSString *) text offset: (int32_t) offset length: (int32_t) length
{
  self = [super init];
  __text = [text retain_stub];
  __text_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [__text release_stub];
  [super dealloc_stub];
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Hashtag"];
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Hashtag("];
  [ms appendString: @"text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MonitorLink

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhotoUrl: (NSString *) photoUrl expandedUrl: (NSString *) expandedUrl displayUrl: (NSString *) displayUrl name: (NSString *) name caption: (NSString *) caption monitorLinkDescription: (NSString *) monitorLinkDescription offset: (int32_t) offset length: (int32_t) length
{
  self = [super init];
  __photoUrl = [photoUrl retain_stub];
  __photoUrl_isset = YES;
  __expandedUrl = [expandedUrl retain_stub];
  __expandedUrl_isset = YES;
  __displayUrl = [displayUrl retain_stub];
  __displayUrl_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __caption = [caption retain_stub];
  __caption_isset = YES;
  __monitorLinkDescription = [monitorLinkDescription retain_stub];
  __monitorLinkDescription_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photoUrl"])
  {
    __photoUrl = [[decoder decodeObjectForKey: @"photoUrl"] retain_stub];
    __photoUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"expandedUrl"])
  {
    __expandedUrl = [[decoder decodeObjectForKey: @"expandedUrl"] retain_stub];
    __expandedUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"displayUrl"])
  {
    __displayUrl = [[decoder decodeObjectForKey: @"displayUrl"] retain_stub];
    __displayUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"caption"])
  {
    __caption = [[decoder decodeObjectForKey: @"caption"] retain_stub];
    __caption_isset = YES;
  }
  if ([decoder containsValueForKey: @"monitorLinkDescription"])
  {
    __monitorLinkDescription = [[decoder decodeObjectForKey: @"monitorLinkDescription"] retain_stub];
    __monitorLinkDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photoUrl_isset)
  {
    [encoder encodeObject: __photoUrl forKey: @"photoUrl"];
  }
  if (__expandedUrl_isset)
  {
    [encoder encodeObject: __expandedUrl forKey: @"expandedUrl"];
  }
  if (__displayUrl_isset)
  {
    [encoder encodeObject: __displayUrl forKey: @"displayUrl"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__caption_isset)
  {
    [encoder encodeObject: __caption forKey: @"caption"];
  }
  if (__monitorLinkDescription_isset)
  {
    [encoder encodeObject: __monitorLinkDescription forKey: @"monitorLinkDescription"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [__photoUrl release_stub];
  [__expandedUrl release_stub];
  [__displayUrl release_stub];
  [__name release_stub];
  [__caption release_stub];
  [__monitorLinkDescription release_stub];
  [super dealloc_stub];
}

- (NSString *) photoUrl {
  return [[__photoUrl retain_stub] autorelease_stub];
}

- (void) setPhotoUrl: (NSString *) photoUrl {
  [photoUrl retain_stub];
  [__photoUrl release_stub];
  __photoUrl = photoUrl;
  __photoUrl_isset = YES;
}

- (BOOL) photoUrlIsSet {
  return __photoUrl_isset;
}

- (void) unsetPhotoUrl {
  [__photoUrl release_stub];
  __photoUrl = nil;
  __photoUrl_isset = NO;
}

- (NSString *) expandedUrl {
  return [[__expandedUrl retain_stub] autorelease_stub];
}

- (void) setExpandedUrl: (NSString *) expandedUrl {
  [expandedUrl retain_stub];
  [__expandedUrl release_stub];
  __expandedUrl = expandedUrl;
  __expandedUrl_isset = YES;
}

- (BOOL) expandedUrlIsSet {
  return __expandedUrl_isset;
}

- (void) unsetExpandedUrl {
  [__expandedUrl release_stub];
  __expandedUrl = nil;
  __expandedUrl_isset = NO;
}

- (NSString *) displayUrl {
  return [[__displayUrl retain_stub] autorelease_stub];
}

- (void) setDisplayUrl: (NSString *) displayUrl {
  [displayUrl retain_stub];
  [__displayUrl release_stub];
  __displayUrl = displayUrl;
  __displayUrl_isset = YES;
}

- (BOOL) displayUrlIsSet {
  return __displayUrl_isset;
}

- (void) unsetDisplayUrl {
  [__displayUrl release_stub];
  __displayUrl = nil;
  __displayUrl_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) caption {
  return [[__caption retain_stub] autorelease_stub];
}

- (void) setCaption: (NSString *) caption {
  [caption retain_stub];
  [__caption release_stub];
  __caption = caption;
  __caption_isset = YES;
}

- (BOOL) captionIsSet {
  return __caption_isset;
}

- (void) unsetCaption {
  [__caption release_stub];
  __caption = nil;
  __caption_isset = NO;
}

- (NSString *) monitorLinkDescription {
  return [[__monitorLinkDescription retain_stub] autorelease_stub];
}

- (void) setMonitorLinkDescription: (NSString *) monitorLinkDescription {
  [monitorLinkDescription retain_stub];
  [__monitorLinkDescription release_stub];
  __monitorLinkDescription = monitorLinkDescription;
  __monitorLinkDescription_isset = YES;
}

- (BOOL) monitorLinkDescriptionIsSet {
  return __monitorLinkDescription_isset;
}

- (void) unsetMonitorLinkDescription {
  [__monitorLinkDescription release_stub];
  __monitorLinkDescription = nil;
  __monitorLinkDescription_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhotoUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpandedUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDisplayUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaption: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMonitorLinkDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MonitorLink"];
  if (__photoUrl_isset) {
    if (__photoUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"photoUrl" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __photoUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expandedUrl_isset) {
    if (__expandedUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"expandedUrl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __expandedUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__displayUrl_isset) {
    if (__displayUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"displayUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __displayUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__caption_isset) {
    if (__caption != nil) {
      [outProtocol writeFieldBeginWithName: @"caption" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __caption];
      [outProtocol writeFieldEnd];
    }
  }
  if (__monitorLinkDescription_isset) {
    if (__monitorLinkDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"monitorLinkDescription" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __monitorLinkDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MonitorLink("];
  [ms appendString: @"photoUrl:"];
  [ms appendFormat: @"\"%@\"", __photoUrl];
  [ms appendString: @",expandedUrl:"];
  [ms appendFormat: @"\"%@\"", __expandedUrl];
  [ms appendString: @",displayUrl:"];
  [ms appendFormat: @"\"%@\"", __displayUrl];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",caption:"];
  [ms appendFormat: @"\"%@\"", __caption];
  [ms appendString: @",monitorLinkDescription:"];
  [ms appendFormat: @"\"%@\"", __monitorLinkDescription];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MonitorPost

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (NSString *) id externalID: (NSString *) externalID source: (NSString *) source postUrl: (NSString *) postUrl user: (PostUser *) user text: (NSString *) text links: (NSMutableArray *) links medias: (NSMutableArray *) medias tags: (NSMutableArray *) tags hashtags: (NSMutableArray *) hashtags properties: (NSMutableDictionary *) properties created: (int64_t) created updated: (int64_t) updated latestReplyTime: (int64_t) latestReplyTime numReplies: (int32_t) numReplies numRepliesFromSelf: (int32_t) numRepliesFromSelf flagged: (BOOL) flagged read: (BOOL) read upvoted: (BOOL) upvoted deletable: (BOOL) deletable basicSourceInfo: (Source *) basicSourceInfo allowedActions: (NSMutableArray *) allowedActions
{
  self = [super init];
  __id = [id retain_stub];
  __id_isset = YES;
  __externalID = [externalID retain_stub];
  __externalID_isset = YES;
  __source = [source retain_stub];
  __source_isset = YES;
  __postUrl = [postUrl retain_stub];
  __postUrl_isset = YES;
  __user = [user retain_stub];
  __user_isset = YES;
  __text = [text retain_stub];
  __text_isset = YES;
  __links = [links retain_stub];
  __links_isset = YES;
  __medias = [medias retain_stub];
  __medias_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  __hashtags = [hashtags retain_stub];
  __hashtags_isset = YES;
  __properties = [properties retain_stub];
  __properties_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  __latestReplyTime = latestReplyTime;
  __latestReplyTime_isset = YES;
  __numReplies = numReplies;
  __numReplies_isset = YES;
  __numRepliesFromSelf = numRepliesFromSelf;
  __numRepliesFromSelf_isset = YES;
  __flagged = flagged;
  __flagged_isset = YES;
  __read = read;
  __read_isset = YES;
  __upvoted = upvoted;
  __upvoted_isset = YES;
  __deletable = deletable;
  __deletable_isset = YES;
  __basicSourceInfo = [basicSourceInfo retain_stub];
  __basicSourceInfo_isset = YES;
  __allowedActions = [allowedActions retain_stub];
  __allowedActions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [[decoder decodeObjectForKey: @"id"] retain_stub];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"externalID"])
  {
    __externalID = [[decoder decodeObjectForKey: @"externalID"] retain_stub];
    __externalID_isset = YES;
  }
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"postUrl"])
  {
    __postUrl = [[decoder decodeObjectForKey: @"postUrl"] retain_stub];
    __postUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain_stub];
    __user_isset = YES;
  }
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"links"])
  {
    __links = [[decoder decodeObjectForKey: @"links"] retain_stub];
    __links_isset = YES;
  }
  if ([decoder containsValueForKey: @"medias"])
  {
    __medias = [[decoder decodeObjectForKey: @"medias"] retain_stub];
    __medias_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"hashtags"])
  {
    __hashtags = [[decoder decodeObjectForKey: @"hashtags"] retain_stub];
    __hashtags_isset = YES;
  }
  if ([decoder containsValueForKey: @"properties"])
  {
    __properties = [[decoder decodeObjectForKey: @"properties"] retain_stub];
    __properties_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  if ([decoder containsValueForKey: @"latestReplyTime"])
  {
    __latestReplyTime = [decoder decodeInt64ForKey: @"latestReplyTime"];
    __latestReplyTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"numReplies"])
  {
    __numReplies = [decoder decodeInt32ForKey: @"numReplies"];
    __numReplies_isset = YES;
  }
  if ([decoder containsValueForKey: @"numRepliesFromSelf"])
  {
    __numRepliesFromSelf = [decoder decodeInt32ForKey: @"numRepliesFromSelf"];
    __numRepliesFromSelf_isset = YES;
  }
  if ([decoder containsValueForKey: @"flagged"])
  {
    __flagged = [decoder decodeBoolForKey: @"flagged"];
    __flagged_isset = YES;
  }
  if ([decoder containsValueForKey: @"read"])
  {
    __read = [decoder decodeBoolForKey: @"read"];
    __read_isset = YES;
  }
  if ([decoder containsValueForKey: @"upvoted"])
  {
    __upvoted = [decoder decodeBoolForKey: @"upvoted"];
    __upvoted_isset = YES;
  }
  if ([decoder containsValueForKey: @"deletable"])
  {
    __deletable = [decoder decodeBoolForKey: @"deletable"];
    __deletable_isset = YES;
  }
  if ([decoder containsValueForKey: @"basicSourceInfo"])
  {
    __basicSourceInfo = [[decoder decodeObjectForKey: @"basicSourceInfo"] retain_stub];
    __basicSourceInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"allowedActions"])
  {
    __allowedActions = [[decoder decodeObjectForKey: @"allowedActions"] retain_stub];
    __allowedActions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeObject: __id forKey: @"id"];
  }
  if (__externalID_isset)
  {
    [encoder encodeObject: __externalID forKey: @"externalID"];
  }
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__postUrl_isset)
  {
    [encoder encodeObject: __postUrl forKey: @"postUrl"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__links_isset)
  {
    [encoder encodeObject: __links forKey: @"links"];
  }
  if (__medias_isset)
  {
    [encoder encodeObject: __medias forKey: @"medias"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__hashtags_isset)
  {
    [encoder encodeObject: __hashtags forKey: @"hashtags"];
  }
  if (__properties_isset)
  {
    [encoder encodeObject: __properties forKey: @"properties"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
  if (__latestReplyTime_isset)
  {
    [encoder encodeInt64: __latestReplyTime forKey: @"latestReplyTime"];
  }
  if (__numReplies_isset)
  {
    [encoder encodeInt32: __numReplies forKey: @"numReplies"];
  }
  if (__numRepliesFromSelf_isset)
  {
    [encoder encodeInt32: __numRepliesFromSelf forKey: @"numRepliesFromSelf"];
  }
  if (__flagged_isset)
  {
    [encoder encodeBool: __flagged forKey: @"flagged"];
  }
  if (__read_isset)
  {
    [encoder encodeBool: __read forKey: @"read"];
  }
  if (__upvoted_isset)
  {
    [encoder encodeBool: __upvoted forKey: @"upvoted"];
  }
  if (__deletable_isset)
  {
    [encoder encodeBool: __deletable forKey: @"deletable"];
  }
  if (__basicSourceInfo_isset)
  {
    [encoder encodeObject: __basicSourceInfo forKey: @"basicSourceInfo"];
  }
  if (__allowedActions_isset)
  {
    [encoder encodeObject: __allowedActions forKey: @"allowedActions"];
  }
}

- (void) dealloc
{
  [__id release_stub];
  [__externalID release_stub];
  [__source release_stub];
  [__postUrl release_stub];
  [__user release_stub];
  [__text release_stub];
  [__links release_stub];
  [__medias release_stub];
  [__tags release_stub];
  [__hashtags release_stub];
  [__properties release_stub];
  [__basicSourceInfo release_stub];
  [__allowedActions release_stub];
  [super dealloc_stub];
}

- (NSString *) id {
  return [[__id retain_stub] autorelease_stub];
}

- (void) setId: (NSString *) id {
  [id retain_stub];
  [__id release_stub];
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  [__id release_stub];
  __id = nil;
  __id_isset = NO;
}

- (NSString *) externalID {
  return [[__externalID retain_stub] autorelease_stub];
}

- (void) setExternalID: (NSString *) externalID {
  [externalID retain_stub];
  [__externalID release_stub];
  __externalID = externalID;
  __externalID_isset = YES;
}

- (BOOL) externalIDIsSet {
  return __externalID_isset;
}

- (void) unsetExternalID {
  [__externalID release_stub];
  __externalID = nil;
  __externalID_isset = NO;
}

- (NSString *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (NSString *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (NSString *) postUrl {
  return [[__postUrl retain_stub] autorelease_stub];
}

- (void) setPostUrl: (NSString *) postUrl {
  [postUrl retain_stub];
  [__postUrl release_stub];
  __postUrl = postUrl;
  __postUrl_isset = YES;
}

- (BOOL) postUrlIsSet {
  return __postUrl_isset;
}

- (void) unsetPostUrl {
  [__postUrl release_stub];
  __postUrl = nil;
  __postUrl_isset = NO;
}

- (PostUser *) user {
  return [[__user retain_stub] autorelease_stub];
}

- (void) setUser: (PostUser *) user {
  [user retain_stub];
  [__user release_stub];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release_stub];
  __user = nil;
  __user_isset = NO;
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (NSMutableArray *) links {
  return [[__links retain_stub] autorelease_stub];
}

- (void) setLinks: (NSMutableArray *) links {
  [links retain_stub];
  [__links release_stub];
  __links = links;
  __links_isset = YES;
}

- (BOOL) linksIsSet {
  return __links_isset;
}

- (void) unsetLinks {
  [__links release_stub];
  __links = nil;
  __links_isset = NO;
}

- (NSMutableArray *) medias {
  return [[__medias retain_stub] autorelease_stub];
}

- (void) setMedias: (NSMutableArray *) medias {
  [medias retain_stub];
  [__medias release_stub];
  __medias = medias;
  __medias_isset = YES;
}

- (BOOL) mediasIsSet {
  return __medias_isset;
}

- (void) unsetMedias {
  [__medias release_stub];
  __medias = nil;
  __medias_isset = NO;
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (NSMutableArray *) hashtags {
  return [[__hashtags retain_stub] autorelease_stub];
}

- (void) setHashtags: (NSMutableArray *) hashtags {
  [hashtags retain_stub];
  [__hashtags release_stub];
  __hashtags = hashtags;
  __hashtags_isset = YES;
}

- (BOOL) hashtagsIsSet {
  return __hashtags_isset;
}

- (void) unsetHashtags {
  [__hashtags release_stub];
  __hashtags = nil;
  __hashtags_isset = NO;
}

- (NSMutableDictionary *) properties {
  return [[__properties retain_stub] autorelease_stub];
}

- (void) setProperties: (NSMutableDictionary *) properties {
  [properties retain_stub];
  [__properties release_stub];
  __properties = properties;
  __properties_isset = YES;
}

- (BOOL) propertiesIsSet {
  return __properties_isset;
}

- (void) unsetProperties {
  [__properties release_stub];
  __properties = nil;
  __properties_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (int64_t) latestReplyTime {
  return __latestReplyTime;
}

- (void) setLatestReplyTime: (int64_t) latestReplyTime {
  __latestReplyTime = latestReplyTime;
  __latestReplyTime_isset = YES;
}

- (BOOL) latestReplyTimeIsSet {
  return __latestReplyTime_isset;
}

- (void) unsetLatestReplyTime {
  __latestReplyTime_isset = NO;
}

- (int32_t) numReplies {
  return __numReplies;
}

- (void) setNumReplies: (int32_t) numReplies {
  __numReplies = numReplies;
  __numReplies_isset = YES;
}

- (BOOL) numRepliesIsSet {
  return __numReplies_isset;
}

- (void) unsetNumReplies {
  __numReplies_isset = NO;
}

- (int32_t) numRepliesFromSelf {
  return __numRepliesFromSelf;
}

- (void) setNumRepliesFromSelf: (int32_t) numRepliesFromSelf {
  __numRepliesFromSelf = numRepliesFromSelf;
  __numRepliesFromSelf_isset = YES;
}

- (BOOL) numRepliesFromSelfIsSet {
  return __numRepliesFromSelf_isset;
}

- (void) unsetNumRepliesFromSelf {
  __numRepliesFromSelf_isset = NO;
}

- (BOOL) flagged {
  return __flagged;
}

- (void) setFlagged: (BOOL) flagged {
  __flagged = flagged;
  __flagged_isset = YES;
}

- (BOOL) flaggedIsSet {
  return __flagged_isset;
}

- (void) unsetFlagged {
  __flagged_isset = NO;
}

- (BOOL) read {
  return __read;
}

- (void) setRead: (BOOL) read {
  __read = read;
  __read_isset = YES;
}

- (BOOL) readIsSet {
  return __read_isset;
}

- (void) unsetRead {
  __read_isset = NO;
}

- (BOOL) upvoted {
  return __upvoted;
}

- (void) setUpvoted: (BOOL) upvoted {
  __upvoted = upvoted;
  __upvoted_isset = YES;
}

- (BOOL) upvotedIsSet {
  return __upvoted_isset;
}

- (void) unsetUpvoted {
  __upvoted_isset = NO;
}

- (BOOL) deletable {
  return __deletable;
}

- (void) setDeletable: (BOOL) deletable {
  __deletable = deletable;
  __deletable_isset = YES;
}

- (BOOL) deletableIsSet {
  return __deletable_isset;
}

- (void) unsetDeletable {
  __deletable_isset = NO;
}

- (Source *) basicSourceInfo {
  return [[__basicSourceInfo retain_stub] autorelease_stub];
}

- (void) setBasicSourceInfo: (Source *) basicSourceInfo {
  [basicSourceInfo retain_stub];
  [__basicSourceInfo release_stub];
  __basicSourceInfo = basicSourceInfo;
  __basicSourceInfo_isset = YES;
}

- (BOOL) basicSourceInfoIsSet {
  return __basicSourceInfo_isset;
}

- (void) unsetBasicSourceInfo {
  [__basicSourceInfo release_stub];
  __basicSourceInfo = nil;
  __basicSourceInfo_isset = NO;
}

- (NSMutableArray *) allowedActions {
  return [[__allowedActions retain_stub] autorelease_stub];
}

- (void) setAllowedActions: (NSMutableArray *) allowedActions {
  [allowedActions retain_stub];
  [__allowedActions release_stub];
  __allowedActions = allowedActions;
  __allowedActions_isset = YES;
}

- (BOOL) allowedActionsIsSet {
  return __allowedActions_isset;
}

- (void) unsetAllowedActions {
  [__allowedActions release_stub];
  __allowedActions = nil;
  __allowedActions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExternalID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPostUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          PostUser *fieldValue = [[PostUser alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size53;
          [inProtocol readListBeginReturningElementType: NULL size: &_size53];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size53];
          int _i54;
          for (_i54 = 0; _i54 < _size53; ++_i54)
          {
            MonitorLink *_elem55 = [[MonitorLink alloc] init];
            [_elem55 read: inProtocol];
            [fieldValue addObject: _elem55];
            [_elem55 release_stub];
          }
          [inProtocol readListEnd];
          [self setLinks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size56;
          [inProtocol readListBeginReturningElementType: NULL size: &_size56];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size56];
          int _i57;
          for (_i57 = 0; _i57 < _size56; ++_i57)
          {
            Media *_elem58 = [[Media alloc] init];
            [_elem58 read: inProtocol];
            [fieldValue addObject: _elem58];
            [_elem58 release_stub];
          }
          [inProtocol readListEnd];
          [self setMedias: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size59;
          [inProtocol readListBeginReturningElementType: NULL size: &_size59];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size59];
          int _i60;
          for (_i60 = 0; _i60 < _size59; ++_i60)
          {
            SocialTag *_elem61 = [[SocialTag alloc] init];
            [_elem61 read: inProtocol];
            [fieldValue addObject: _elem61];
            [_elem61 release_stub];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size62;
          [inProtocol readListBeginReturningElementType: NULL size: &_size62];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size62];
          int _i63;
          for (_i63 = 0; _i63 < _size62; ++_i63)
          {
            Hashtag *_elem64 = [[Hashtag alloc] init];
            [_elem64 read: inProtocol];
            [fieldValue addObject: _elem64];
            [_elem64 release_stub];
          }
          [inProtocol readListEnd];
          [self setHashtags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_MAP) {
          int _size65;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size65];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NSString * _key67 = [inProtocol readString];
            int32_t _val68 = [inProtocol readI32];
            [fieldValue setObject: [NSNumber numberWithLong: _val68] forKey: _key67];
          }
          [inProtocol readMapEnd];
          [self setProperties: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLatestReplyTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumReplies: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumRepliesFromSelf: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFlagged: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRead: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUpvoted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDeletable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRUCT) {
          Source *fieldValue = [[Source alloc] init];
          [fieldValue read: inProtocol];
          [self setBasicSourceInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_LIST) {
          int _size69;
          [inProtocol readListBeginReturningElementType: NULL size: &_size69];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size69];
          int _i70;
          for (_i70 = 0; _i70 < _size69; ++_i70)
          {
            NSString * _elem71 = [inProtocol readString];
            [fieldValue addObject: _elem71];
          }
          [inProtocol readListEnd];
          [self setAllowedActions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MonitorPost"];
  if (__id_isset) {
    if (__id != nil) {
      [outProtocol writeFieldBeginWithName: @"id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__externalID_isset) {
    if (__externalID != nil) {
      [outProtocol writeFieldBeginWithName: @"externalID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __externalID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __source];
      [outProtocol writeFieldEnd];
    }
  }
  if (__postUrl_isset) {
    if (__postUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"postUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __postUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 5];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__links_isset) {
    if (__links != nil) {
      [outProtocol writeFieldBeginWithName: @"links" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__links count]];
        int i73;
        for (i73 = 0; i73 < [__links count]; i73++)
        {
          [[__links objectAtIndex: i73] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__medias_isset) {
    if (__medias != nil) {
      [outProtocol writeFieldBeginWithName: @"medias" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__medias count]];
        int i75;
        for (i75 = 0; i75 < [__medias count]; i75++)
        {
          [[__medias objectAtIndex: i75] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__tags count]];
        int i77;
        for (i77 = 0; i77 < [__tags count]; i77++)
        {
          [[__tags objectAtIndex: i77] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__hashtags_isset) {
    if (__hashtags != nil) {
      [outProtocol writeFieldBeginWithName: @"hashtags" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hashtags count]];
        int i79;
        for (i79 = 0; i79 < [__hashtags count]; i79++)
        {
          [[__hashtags objectAtIndex: i79] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__properties_isset) {
    if (__properties != nil) {
      [outProtocol writeFieldBeginWithName: @"properties" type: TType_MAP fieldID: 11];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_I32 size: [__properties count]];
        NSEnumerator * _iter80 = [__properties keyEnumerator];
        id key81;
        while ((key81 = [_iter80 nextObject]))
        {
          [outProtocol writeString: key81];
          [outProtocol writeI32: [[__properties objectForKey: key81] longValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  if (__latestReplyTime_isset) {
    [outProtocol writeFieldBeginWithName: @"latestReplyTime" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __latestReplyTime];
    [outProtocol writeFieldEnd];
  }
  if (__numReplies_isset) {
    [outProtocol writeFieldBeginWithName: @"numReplies" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __numReplies];
    [outProtocol writeFieldEnd];
  }
  if (__numRepliesFromSelf_isset) {
    [outProtocol writeFieldBeginWithName: @"numRepliesFromSelf" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __numRepliesFromSelf];
    [outProtocol writeFieldEnd];
  }
  if (__flagged_isset) {
    [outProtocol writeFieldBeginWithName: @"flagged" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __flagged];
    [outProtocol writeFieldEnd];
  }
  if (__read_isset) {
    [outProtocol writeFieldBeginWithName: @"read" type: TType_BOOL fieldID: 18];
    [outProtocol writeBool: __read];
    [outProtocol writeFieldEnd];
  }
  if (__upvoted_isset) {
    [outProtocol writeFieldBeginWithName: @"upvoted" type: TType_BOOL fieldID: 19];
    [outProtocol writeBool: __upvoted];
    [outProtocol writeFieldEnd];
  }
  if (__deletable_isset) {
    [outProtocol writeFieldBeginWithName: @"deletable" type: TType_BOOL fieldID: 20];
    [outProtocol writeBool: __deletable];
    [outProtocol writeFieldEnd];
  }
  if (__basicSourceInfo_isset) {
    if (__basicSourceInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"basicSourceInfo" type: TType_STRUCT fieldID: 21];
      [__basicSourceInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__allowedActions_isset) {
    if (__allowedActions != nil) {
      [outProtocol writeFieldBeginWithName: @"allowedActions" type: TType_LIST fieldID: 22];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__allowedActions count]];
        int i83;
        for (i83 = 0; i83 < [__allowedActions count]; i83++)
        {
          [outProtocol writeString: [__allowedActions objectAtIndex: i83]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MonitorPost("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"\"%@\"", __id];
  [ms appendString: @",externalID:"];
  [ms appendFormat: @"\"%@\"", __externalID];
  [ms appendString: @",source:"];
  [ms appendFormat: @"\"%@\"", __source];
  [ms appendString: @",postUrl:"];
  [ms appendFormat: @"\"%@\"", __postUrl];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @",text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",links:"];
  [ms appendFormat: @"%@", __links];
  [ms appendString: @",medias:"];
  [ms appendFormat: @"%@", __medias];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",hashtags:"];
  [ms appendFormat: @"%@", __hashtags];
  [ms appendString: @",properties:"];
  [ms appendFormat: @"%@", __properties];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @",latestReplyTime:"];
  [ms appendFormat: @"%qi", __latestReplyTime];
  [ms appendString: @",numReplies:"];
  [ms appendFormat: @"%i", __numReplies];
  [ms appendString: @",numRepliesFromSelf:"];
  [ms appendFormat: @"%i", __numRepliesFromSelf];
  [ms appendString: @",flagged:"];
  [ms appendFormat: @"%i", __flagged];
  [ms appendString: @",read:"];
  [ms appendFormat: @"%i", __read];
  [ms appendString: @",upvoted:"];
  [ms appendFormat: @"%i", __upvoted];
  [ms appendString: @",deletable:"];
  [ms appendFormat: @"%i", __deletable];
  [ms appendString: @",basicSourceInfo:"];
  [ms appendFormat: @"%@", __basicSourceInfo];
  [ms appendString: @",allowedActions:"];
  [ms appendFormat: @"%@", __allowedActions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FeedResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response count: (int64_t) count items: (NSMutableArray *) items
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __count = count;
  __count_isset = YES;
  __items = [items retain_stub];
  __items_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt64ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"items"])
  {
    __items = [[decoder decodeObjectForKey: @"items"] retain_stub];
    __items_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__count_isset)
  {
    [encoder encodeInt64: __count forKey: @"count"];
  }
  if (__items_isset)
  {
    [encoder encodeObject: __items forKey: @"items"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__items release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (int64_t) count {
  return __count;
}

- (void) setCount: (int64_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) items {
  return [[__items retain_stub] autorelease_stub];
}

- (void) setItems: (NSMutableArray *) items {
  [items retain_stub];
  [__items release_stub];
  __items = items;
  __items_isset = YES;
}

- (BOOL) itemsIsSet {
  return __items_isset;
}

- (void) unsetItems {
  [__items release_stub];
  __items = nil;
  __items_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size84;
          [inProtocol readListBeginReturningElementType: NULL size: &_size84];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size84];
          int _i85;
          for (_i85 = 0; _i85 < _size84; ++_i85)
          {
            Review *_elem86 = [[Review alloc] init];
            [_elem86 read: inProtocol];
            [fieldValue addObject: _elem86];
            [_elem86 release_stub];
          }
          [inProtocol readListEnd];
          [self setItems: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeedResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __count];
    [outProtocol writeFieldEnd];
  }
  if (__items_isset) {
    if (__items != nil) {
      [outProtocol writeFieldBeginWithName: @"items" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__items count]];
        int i88;
        for (i88 = 0; i88 < [__items count]; i88++)
        {
          [[__items objectAtIndex: i88] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FeedResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%qi", __count];
  [ms appendString: @",items:"];
  [ms appendFormat: @"%@", __items];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PermissionsResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response config: (UserConfig *) config
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __config = [config retain_stub];
  __config_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"config"])
  {
    __config = [[decoder decodeObjectForKey: @"config"] retain_stub];
    __config_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__config_isset)
  {
    [encoder encodeObject: __config forKey: @"config"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__config release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (UserConfig *) config {
  return [[__config retain_stub] autorelease_stub];
}

- (void) setConfig: (UserConfig *) config {
  [config retain_stub];
  [__config release_stub];
  __config = config;
  __config_isset = YES;
}

- (BOOL) configIsSet {
  return __config_isset;
}

- (void) unsetConfig {
  [__config release_stub];
  __config = nil;
  __config_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserConfig *fieldValue = [[UserConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setConfig: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PermissionsResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__config_isset) {
    if (__config != nil) {
      [outProtocol writeFieldBeginWithName: @"config" type: TType_STRUCT fieldID: 2];
      [__config write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PermissionsResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",config:"];
  [ms appendFormat: @"%@", __config];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SaveConfigResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response userSettings: (NSMutableArray *) userSettings
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __userSettings = [userSettings retain_stub];
  __userSettings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"userSettings"])
  {
    __userSettings = [[decoder decodeObjectForKey: @"userSettings"] retain_stub];
    __userSettings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__userSettings_isset)
  {
    [encoder encodeObject: __userSettings forKey: @"userSettings"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__userSettings release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (NSMutableArray *) userSettings {
  return [[__userSettings retain_stub] autorelease_stub];
}

- (void) setUserSettings: (NSMutableArray *) userSettings {
  [userSettings retain_stub];
  [__userSettings release_stub];
  __userSettings = userSettings;
  __userSettings_isset = YES;
}

- (BOOL) userSettingsIsSet {
  return __userSettings_isset;
}

- (void) unsetUserSettings {
  [__userSettings release_stub];
  __userSettings = nil;
  __userSettings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size89;
          [inProtocol readListBeginReturningElementType: NULL size: &_size89];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size89];
          int _i90;
          for (_i90 = 0; _i90 < _size89; ++_i90)
          {
            UserPreference *_elem91 = [[UserPreference alloc] init];
            [_elem91 read: inProtocol];
            [fieldValue addObject: _elem91];
            [_elem91 release_stub];
          }
          [inProtocol readListEnd];
          [self setUserSettings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveConfigResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userSettings_isset) {
    if (__userSettings != nil) {
      [outProtocol writeFieldBeginWithName: @"userSettings" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userSettings count]];
        int i93;
        for (i93 = 0; i93 < [__userSettings count]; i93++)
        {
          [[__userSettings objectAtIndex: i93] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SaveConfigResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",userSettings:"];
  [ms appendFormat: @"%@", __userSettings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReferenceDataResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response cachedData: (ReferenceData *) cachedData ttl: (int64_t) ttl
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __cachedData = [cachedData retain_stub];
  __cachedData_isset = YES;
  __ttl = ttl;
  __ttl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"cachedData"])
  {
    __cachedData = [[decoder decodeObjectForKey: @"cachedData"] retain_stub];
    __cachedData_isset = YES;
  }
  if ([decoder containsValueForKey: @"ttl"])
  {
    __ttl = [decoder decodeInt64ForKey: @"ttl"];
    __ttl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__cachedData_isset)
  {
    [encoder encodeObject: __cachedData forKey: @"cachedData"];
  }
  if (__ttl_isset)
  {
    [encoder encodeInt64: __ttl forKey: @"ttl"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__cachedData release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (ReferenceData *) cachedData {
  return [[__cachedData retain_stub] autorelease_stub];
}

- (void) setCachedData: (ReferenceData *) cachedData {
  [cachedData retain_stub];
  [__cachedData release_stub];
  __cachedData = cachedData;
  __cachedData_isset = YES;
}

- (BOOL) cachedDataIsSet {
  return __cachedData_isset;
}

- (void) unsetCachedData {
  [__cachedData release_stub];
  __cachedData = nil;
  __cachedData_isset = NO;
}

- (int64_t) ttl {
  return __ttl;
}

- (void) setTtl: (int64_t) ttl {
  __ttl = ttl;
  __ttl_isset = YES;
}

- (BOOL) ttlIsSet {
  return __ttl_isset;
}

- (void) unsetTtl {
  __ttl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          ReferenceData *fieldValue = [[ReferenceData alloc] init];
          [fieldValue read: inProtocol];
          [self setCachedData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTtl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReferenceDataResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cachedData_isset) {
    if (__cachedData != nil) {
      [outProtocol writeFieldBeginWithName: @"cachedData" type: TType_STRUCT fieldID: 2];
      [__cachedData write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ttl_isset) {
    [outProtocol writeFieldBeginWithName: @"ttl" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __ttl];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReferenceDataResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",cachedData:"];
  [ms appendFormat: @"%@", __cachedData];
  [ms appendString: @",ttl:"];
  [ms appendFormat: @"%qi", __ttl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RatingResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response ratingID: (NSString *) ratingID
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __ratingID = [ratingID retain_stub];
  __ratingID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"ratingID"])
  {
    __ratingID = [[decoder decodeObjectForKey: @"ratingID"] retain_stub];
    __ratingID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__ratingID_isset)
  {
    [encoder encodeObject: __ratingID forKey: @"ratingID"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__ratingID release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (NSString *) ratingID {
  return [[__ratingID retain_stub] autorelease_stub];
}

- (void) setRatingID: (NSString *) ratingID {
  [ratingID retain_stub];
  [__ratingID release_stub];
  __ratingID = ratingID;
  __ratingID_isset = YES;
}

- (BOOL) ratingIDIsSet {
  return __ratingID_isset;
}

- (void) unsetRatingID {
  [__ratingID release_stub];
  __ratingID = nil;
  __ratingID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRatingID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RatingResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ratingID_isset) {
    if (__ratingID != nil) {
      [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __ratingID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RatingResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",ratingID:"];
  [ms appendFormat: @"\"%@\"", __ratingID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SummaryResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response aggregates: (NSMutableArray *) aggregates
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __aggregates = [aggregates retain_stub];
  __aggregates_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"aggregates"])
  {
    __aggregates = [[decoder decodeObjectForKey: @"aggregates"] retain_stub];
    __aggregates_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__aggregates_isset)
  {
    [encoder encodeObject: __aggregates forKey: @"aggregates"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__aggregates release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (NSMutableArray *) aggregates {
  return [[__aggregates retain_stub] autorelease_stub];
}

- (void) setAggregates: (NSMutableArray *) aggregates {
  [aggregates retain_stub];
  [__aggregates release_stub];
  __aggregates = aggregates;
  __aggregates_isset = YES;
}

- (BOOL) aggregatesIsSet {
  return __aggregates_isset;
}

- (void) unsetAggregates {
  [__aggregates release_stub];
  __aggregates = nil;
  __aggregates_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size94;
          [inProtocol readListBeginReturningElementType: NULL size: &_size94];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size94];
          int _i95;
          for (_i95 = 0; _i95 < _size94; ++_i95)
          {
            SummaryCell *_elem96 = [[SummaryCell alloc] init];
            [_elem96 read: inProtocol];
            [fieldValue addObject: _elem96];
            [_elem96 release_stub];
          }
          [inProtocol readListEnd];
          [self setAggregates: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SummaryResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__aggregates_isset) {
    if (__aggregates != nil) {
      [outProtocol writeFieldBeginWithName: @"aggregates" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__aggregates count]];
        int i98;
        for (i98 = 0; i98 < [__aggregates count]; i98++)
        {
          [[__aggregates objectAtIndex: i98] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SummaryResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",aggregates:"];
  [ms appendFormat: @"%@", __aggregates];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialFeedResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResponse: (Response *) response socialPosts: (NSMutableArray *) socialPosts
{
  self = [super init];
  __response = [response retain_stub];
  __response_isset = YES;
  __socialPosts = [socialPosts retain_stub];
  __socialPosts_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"response"])
  {
    __response = [[decoder decodeObjectForKey: @"response"] retain_stub];
    __response_isset = YES;
  }
  if ([decoder containsValueForKey: @"socialPosts"])
  {
    __socialPosts = [[decoder decodeObjectForKey: @"socialPosts"] retain_stub];
    __socialPosts_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__response_isset)
  {
    [encoder encodeObject: __response forKey: @"response"];
  }
  if (__socialPosts_isset)
  {
    [encoder encodeObject: __socialPosts forKey: @"socialPosts"];
  }
}

- (void) dealloc
{
  [__response release_stub];
  [__socialPosts release_stub];
  [super dealloc_stub];
}

- (Response *) response {
  return [[__response retain_stub] autorelease_stub];
}

- (void) setResponse: (Response *) response {
  [response retain_stub];
  [__response release_stub];
  __response = response;
  __response_isset = YES;
}

- (BOOL) responseIsSet {
  return __response_isset;
}

- (void) unsetResponse {
  [__response release_stub];
  __response = nil;
  __response_isset = NO;
}

- (NSMutableArray *) socialPosts {
  return [[__socialPosts retain_stub] autorelease_stub];
}

- (void) setSocialPosts: (NSMutableArray *) socialPosts {
  [socialPosts retain_stub];
  [__socialPosts release_stub];
  __socialPosts = socialPosts;
  __socialPosts_isset = YES;
}

- (BOOL) socialPostsIsSet {
  return __socialPosts_isset;
}

- (void) unsetSocialPosts {
  [__socialPosts release_stub];
  __socialPosts = nil;
  __socialPosts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setResponse: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size99;
          [inProtocol readListBeginReturningElementType: NULL size: &_size99];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size99];
          int _i100;
          for (_i100 = 0; _i100 < _size99; ++_i100)
          {
            MonitorPost *_elem101 = [[MonitorPost alloc] init];
            [_elem101 read: inProtocol];
            [fieldValue addObject: _elem101];
            [_elem101 release_stub];
          }
          [inProtocol readListEnd];
          [self setSocialPosts: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialFeedResponse"];
  if (__response_isset) {
    if (__response != nil) {
      [outProtocol writeFieldBeginWithName: @"response" type: TType_STRUCT fieldID: 1];
      [__response write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__socialPosts_isset) {
    if (__socialPosts != nil) {
      [outProtocol writeFieldBeginWithName: @"socialPosts" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__socialPosts count]];
        int i103;
        for (i103 = 0; i103 < [__socialPosts count]; i103++)
        {
          [[__socialPosts objectAtIndex: i103] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialFeedResponse("];
  [ms appendString: @"response:"];
  [ms appendFormat: @"%@", __response];
  [ms appendString: @",socialPosts:"];
  [ms appendFormat: @"%@", __socialPosts];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

static NSString * SUMMARY_OVERALL_SCORE = @"summary.overallscore.score";
static NSString * SUMMARY_AVGRATING_SOURCE = @"summary.avgrating.source";
static NSString * SUMMARY_NOREVIEWS_SOURCE = @"summary.numreviews.source";
static NSString * SUMMARY_SOCIALCOUNTS_SOURCE = @"summary.socialcounts.source";
static NSString * SUMMARY_OVERALL_SCORE_VALUE = @"summary.overallscore.value";
static NSString * SUMMARY_OVERALL_SCORE_WEIGHTEDRATING = @"summary.overallscore.weightedrating";
static NSString * SUMMARY_OVERALL_SCORE_VISIBILITY = @"summary.overallscore.visibility";
static NSString * SUMMARY_OVERALL_SCORE_SPREAD = @"summary.overallscore.spread";
static NSString * SUMMARY_OVERALL_SCORE_LENGTH = @"summary.overallscore.length";
static NSString * SUMMARY_OVERALL_SCORE_TIME = @"summary.overallscore.time";
static NSString * SUMMARY_OVERALL_SCORE_VOLUME = @"summary.overallscore.volume";
static NSString * SUMMARY_NOREVIEWS_SOURCELOGO = @"summary.avgrating.sourcelogopath";
static NSString * SUMMARY_NOREVIEWS_SOURCENAME = @"summary.avgrating.sourcename";
static NSString * SUMMARY_SOURCE_LOGO_URL = @"summary.source.logourl";
static NSString * SUMMARY_SOURCE_NAME = @"summary.source.name";

@implementation MobileConstants
+ (void) initialize {
}
+ (NSString *) SUMMARY_OVERALL_SCORE{
  return SUMMARY_OVERALL_SCORE;
}
+ (NSString *) SUMMARY_AVGRATING_SOURCE{
  return SUMMARY_AVGRATING_SOURCE;
}
+ (NSString *) SUMMARY_NOREVIEWS_SOURCE{
  return SUMMARY_NOREVIEWS_SOURCE;
}
+ (NSString *) SUMMARY_SOCIALCOUNTS_SOURCE{
  return SUMMARY_SOCIALCOUNTS_SOURCE;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_VALUE{
  return SUMMARY_OVERALL_SCORE_VALUE;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_WEIGHTEDRATING{
  return SUMMARY_OVERALL_SCORE_WEIGHTEDRATING;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_VISIBILITY{
  return SUMMARY_OVERALL_SCORE_VISIBILITY;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_SPREAD{
  return SUMMARY_OVERALL_SCORE_SPREAD;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_LENGTH{
  return SUMMARY_OVERALL_SCORE_LENGTH;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_TIME{
  return SUMMARY_OVERALL_SCORE_TIME;
}
+ (NSString *) SUMMARY_OVERALL_SCORE_VOLUME{
  return SUMMARY_OVERALL_SCORE_VOLUME;
}
+ (NSString *) SUMMARY_NOREVIEWS_SOURCELOGO{
  return SUMMARY_NOREVIEWS_SOURCELOGO;
}
+ (NSString *) SUMMARY_NOREVIEWS_SOURCENAME{
  return SUMMARY_NOREVIEWS_SOURCENAME;
}
+ (NSString *) SUMMARY_SOURCE_LOGO_URL{
  return SUMMARY_SOURCE_LOGO_URL;
}
+ (NSString *) SUMMARY_SOURCE_NAME{
  return SUMMARY_SOURCE_NAME;
}
@end

@interface getReviewsFeed_args : NSObject <NSCoding> {
  int64_t __uptoTime;
  int32_t __start;
  int32_t __pageCount;
  SearchFilter * __searchCriteria;

  BOOL __uptoTime_isset;
  BOOL __start_isset;
  BOOL __pageCount_isset;
  BOOL __searchCriteria_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=uptoTime, setter=setUptoTime:) int64_t uptoTime;
@property (nonatomic, getter=start, setter=setStart:) int32_t start;
@property (nonatomic, getter=pageCount, setter=setPageCount:) int32_t pageCount;
@property (nonatomic, retain, getter=searchCriteria, setter=setSearchCriteria:) SearchFilter * searchCriteria;
#endif

- (id) init;
- (id) initWithUptoTime: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) uptoTime;
- (void) setUptoTime: (int64_t) uptoTime;
#endif
- (BOOL) uptoTimeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) start;
- (void) setStart: (int32_t) start;
#endif
- (BOOL) startIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageCount;
- (void) setPageCount: (int32_t) pageCount;
#endif
- (BOOL) pageCountIsSet;

#if !__has_feature(objc_arc)
- (SearchFilter *) searchCriteria;
- (void) setSearchCriteria: (SearchFilter *) searchCriteria;
#endif
- (BOOL) searchCriteriaIsSet;

@end

@implementation getReviewsFeed_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUptoTime: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  self = [super init];
  __uptoTime = uptoTime;
  __uptoTime_isset = YES;
  __start = start;
  __start_isset = YES;
  __pageCount = pageCount;
  __pageCount_isset = YES;
  __searchCriteria = [searchCriteria retain_stub];
  __searchCriteria_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uptoTime"])
  {
    __uptoTime = [decoder decodeInt64ForKey: @"uptoTime"];
    __uptoTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"start"])
  {
    __start = [decoder decodeInt32ForKey: @"start"];
    __start_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageCount"])
  {
    __pageCount = [decoder decodeInt32ForKey: @"pageCount"];
    __pageCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchCriteria"])
  {
    __searchCriteria = [[decoder decodeObjectForKey: @"searchCriteria"] retain_stub];
    __searchCriteria_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uptoTime_isset)
  {
    [encoder encodeInt64: __uptoTime forKey: @"uptoTime"];
  }
  if (__start_isset)
  {
    [encoder encodeInt32: __start forKey: @"start"];
  }
  if (__pageCount_isset)
  {
    [encoder encodeInt32: __pageCount forKey: @"pageCount"];
  }
  if (__searchCriteria_isset)
  {
    [encoder encodeObject: __searchCriteria forKey: @"searchCriteria"];
  }
}

- (void) dealloc
{
  [__searchCriteria release_stub];
  [super dealloc_stub];
}

- (int64_t) uptoTime {
  return __uptoTime;
}

- (void) setUptoTime: (int64_t) uptoTime {
  __uptoTime = uptoTime;
  __uptoTime_isset = YES;
}

- (BOOL) uptoTimeIsSet {
  return __uptoTime_isset;
}

- (void) unsetUptoTime {
  __uptoTime_isset = NO;
}

- (int32_t) start {
  return __start;
}

- (void) setStart: (int32_t) start {
  __start = start;
  __start_isset = YES;
}

- (BOOL) startIsSet {
  return __start_isset;
}

- (void) unsetStart {
  __start_isset = NO;
}

- (int32_t) pageCount {
  return __pageCount;
}

- (void) setPageCount: (int32_t) pageCount {
  __pageCount = pageCount;
  __pageCount_isset = YES;
}

- (BOOL) pageCountIsSet {
  return __pageCount_isset;
}

- (void) unsetPageCount {
  __pageCount_isset = NO;
}

- (SearchFilter *) searchCriteria {
  return [[__searchCriteria retain_stub] autorelease_stub];
}

- (void) setSearchCriteria: (SearchFilter *) searchCriteria {
  [searchCriteria retain_stub];
  [__searchCriteria release_stub];
  __searchCriteria = searchCriteria;
  __searchCriteria_isset = YES;
}

- (BOOL) searchCriteriaIsSet {
  return __searchCriteria_isset;
}

- (void) unsetSearchCriteria {
  [__searchCriteria release_stub];
  __searchCriteria = nil;
  __searchCriteria_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUptoTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          SearchFilter *fieldValue = [[SearchFilter alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchCriteria: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getReviewsFeed_args"];
  if (__uptoTime_isset) {
    [outProtocol writeFieldBeginWithName: @"uptoTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __uptoTime];
    [outProtocol writeFieldEnd];
  }
  if (__start_isset) {
    [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __start];
    [outProtocol writeFieldEnd];
  }
  if (__pageCount_isset) {
    [outProtocol writeFieldBeginWithName: @"pageCount" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageCount];
    [outProtocol writeFieldEnd];
  }
  if (__searchCriteria_isset) {
    if (__searchCriteria != nil) {
      [outProtocol writeFieldBeginWithName: @"searchCriteria" type: TType_STRUCT fieldID: 4];
      [__searchCriteria write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getReviewsFeed_args("];
  [ms appendString: @"uptoTime:"];
  [ms appendFormat: @"%qi", __uptoTime];
  [ms appendString: @",start:"];
  [ms appendFormat: @"%i", __start];
  [ms appendString: @",pageCount:"];
  [ms appendFormat: @"%i", __pageCount];
  [ms appendString: @",searchCriteria:"];
  [ms appendFormat: @"%@", __searchCriteria];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetReviewsFeed_result : NSObject <NSCoding> {
  FeedResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) FeedResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (FeedResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (FeedResponse *) success;
- (void) setSuccess: (FeedResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetReviewsFeed_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (FeedResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (FeedResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (FeedResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          FeedResponse *fieldValue = [[FeedResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReviewsFeed_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetReviewsFeed_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSocialFeed_args : NSObject <NSCoding> {
  int64_t __uptoTime;
  int32_t __start;
  int32_t __pageCount;
  SearchFilter * __searchCriteria;

  BOOL __uptoTime_isset;
  BOOL __start_isset;
  BOOL __pageCount_isset;
  BOOL __searchCriteria_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=uptoTime, setter=setUptoTime:) int64_t uptoTime;
@property (nonatomic, getter=start, setter=setStart:) int32_t start;
@property (nonatomic, getter=pageCount, setter=setPageCount:) int32_t pageCount;
@property (nonatomic, retain, getter=searchCriteria, setter=setSearchCriteria:) SearchFilter * searchCriteria;
#endif

- (id) init;
- (id) initWithUptoTime: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) uptoTime;
- (void) setUptoTime: (int64_t) uptoTime;
#endif
- (BOOL) uptoTimeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) start;
- (void) setStart: (int32_t) start;
#endif
- (BOOL) startIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageCount;
- (void) setPageCount: (int32_t) pageCount;
#endif
- (BOOL) pageCountIsSet;

#if !__has_feature(objc_arc)
- (SearchFilter *) searchCriteria;
- (void) setSearchCriteria: (SearchFilter *) searchCriteria;
#endif
- (BOOL) searchCriteriaIsSet;

@end

@implementation getSocialFeed_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUptoTime: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  self = [super init];
  __uptoTime = uptoTime;
  __uptoTime_isset = YES;
  __start = start;
  __start_isset = YES;
  __pageCount = pageCount;
  __pageCount_isset = YES;
  __searchCriteria = [searchCriteria retain_stub];
  __searchCriteria_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uptoTime"])
  {
    __uptoTime = [decoder decodeInt64ForKey: @"uptoTime"];
    __uptoTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"start"])
  {
    __start = [decoder decodeInt32ForKey: @"start"];
    __start_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageCount"])
  {
    __pageCount = [decoder decodeInt32ForKey: @"pageCount"];
    __pageCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchCriteria"])
  {
    __searchCriteria = [[decoder decodeObjectForKey: @"searchCriteria"] retain_stub];
    __searchCriteria_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uptoTime_isset)
  {
    [encoder encodeInt64: __uptoTime forKey: @"uptoTime"];
  }
  if (__start_isset)
  {
    [encoder encodeInt32: __start forKey: @"start"];
  }
  if (__pageCount_isset)
  {
    [encoder encodeInt32: __pageCount forKey: @"pageCount"];
  }
  if (__searchCriteria_isset)
  {
    [encoder encodeObject: __searchCriteria forKey: @"searchCriteria"];
  }
}

- (void) dealloc
{
  [__searchCriteria release_stub];
  [super dealloc_stub];
}

- (int64_t) uptoTime {
  return __uptoTime;
}

- (void) setUptoTime: (int64_t) uptoTime {
  __uptoTime = uptoTime;
  __uptoTime_isset = YES;
}

- (BOOL) uptoTimeIsSet {
  return __uptoTime_isset;
}

- (void) unsetUptoTime {
  __uptoTime_isset = NO;
}

- (int32_t) start {
  return __start;
}

- (void) setStart: (int32_t) start {
  __start = start;
  __start_isset = YES;
}

- (BOOL) startIsSet {
  return __start_isset;
}

- (void) unsetStart {
  __start_isset = NO;
}

- (int32_t) pageCount {
  return __pageCount;
}

- (void) setPageCount: (int32_t) pageCount {
  __pageCount = pageCount;
  __pageCount_isset = YES;
}

- (BOOL) pageCountIsSet {
  return __pageCount_isset;
}

- (void) unsetPageCount {
  __pageCount_isset = NO;
}

- (SearchFilter *) searchCriteria {
  return [[__searchCriteria retain_stub] autorelease_stub];
}

- (void) setSearchCriteria: (SearchFilter *) searchCriteria {
  [searchCriteria retain_stub];
  [__searchCriteria release_stub];
  __searchCriteria = searchCriteria;
  __searchCriteria_isset = YES;
}

- (BOOL) searchCriteriaIsSet {
  return __searchCriteria_isset;
}

- (void) unsetSearchCriteria {
  [__searchCriteria release_stub];
  __searchCriteria = nil;
  __searchCriteria_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUptoTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          SearchFilter *fieldValue = [[SearchFilter alloc] init];
          [fieldValue read: inProtocol];
          [self setSearchCriteria: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSocialFeed_args"];
  if (__uptoTime_isset) {
    [outProtocol writeFieldBeginWithName: @"uptoTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __uptoTime];
    [outProtocol writeFieldEnd];
  }
  if (__start_isset) {
    [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __start];
    [outProtocol writeFieldEnd];
  }
  if (__pageCount_isset) {
    [outProtocol writeFieldBeginWithName: @"pageCount" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageCount];
    [outProtocol writeFieldEnd];
  }
  if (__searchCriteria_isset) {
    if (__searchCriteria != nil) {
      [outProtocol writeFieldBeginWithName: @"searchCriteria" type: TType_STRUCT fieldID: 4];
      [__searchCriteria write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSocialFeed_args("];
  [ms appendString: @"uptoTime:"];
  [ms appendFormat: @"%qi", __uptoTime];
  [ms appendString: @",start:"];
  [ms appendFormat: @"%i", __start];
  [ms appendString: @",pageCount:"];
  [ms appendFormat: @"%i", __pageCount];
  [ms appendString: @",searchCriteria:"];
  [ms appendFormat: @"%@", __searchCriteria];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSocialFeed_result : NSObject <NSCoding> {
  SocialFeedResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SocialFeedResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (SocialFeedResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SocialFeedResponse *) success;
- (void) setSuccess: (SocialFeedResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetSocialFeed_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SocialFeedResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (SocialFeedResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SocialFeedResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SocialFeedResponse *fieldValue = [[SocialFeedResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSocialFeed_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSocialFeed_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getReferenceData_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getReferenceData_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getReferenceData_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getReferenceData_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetReferenceData_result : NSObject <NSCoding> {
  ReferenceDataResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ReferenceDataResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (ReferenceDataResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ReferenceDataResponse *) success;
- (void) setSuccess: (ReferenceDataResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetReferenceData_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ReferenceDataResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ReferenceDataResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ReferenceDataResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ReferenceDataResponse *fieldValue = [[ReferenceDataResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReferenceData_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetReferenceData_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getUserConfig_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getUserConfig_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getUserConfig_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getUserConfig_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetUserConfig_result : NSObject <NSCoding> {
  PermissionsResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) PermissionsResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (PermissionsResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (PermissionsResponse *) success;
- (void) setSuccess: (PermissionsResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetUserConfig_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (PermissionsResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (PermissionsResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (PermissionsResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          PermissionsResponse *fieldValue = [[PermissionsResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserConfig_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserConfig_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface saveUserConfig_args : NSObject <NSCoding> {
  NSMutableArray * __userSettings;

  BOOL __userSettings_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=userSettings, setter=setUserSettings:) NSMutableArray * userSettings;
#endif

- (id) init;
- (id) initWithUserSettings: (NSMutableArray *) userSettings;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) userSettings;
- (void) setUserSettings: (NSMutableArray *) userSettings;
#endif
- (BOOL) userSettingsIsSet;

@end

@implementation saveUserConfig_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUserSettings: (NSMutableArray *) userSettings
{
  self = [super init];
  __userSettings = [userSettings retain_stub];
  __userSettings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"userSettings"])
  {
    __userSettings = [[decoder decodeObjectForKey: @"userSettings"] retain_stub];
    __userSettings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__userSettings_isset)
  {
    [encoder encodeObject: __userSettings forKey: @"userSettings"];
  }
}

- (void) dealloc
{
  [__userSettings release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) userSettings {
  return [[__userSettings retain_stub] autorelease_stub];
}

- (void) setUserSettings: (NSMutableArray *) userSettings {
  [userSettings retain_stub];
  [__userSettings release_stub];
  __userSettings = userSettings;
  __userSettings_isset = YES;
}

- (BOOL) userSettingsIsSet {
  return __userSettings_isset;
}

- (void) unsetUserSettings {
  [__userSettings release_stub];
  __userSettings = nil;
  __userSettings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size104;
          [inProtocol readListBeginReturningElementType: NULL size: &_size104];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size104];
          int _i105;
          for (_i105 = 0; _i105 < _size104; ++_i105)
          {
            UserPreference *_elem106 = [[UserPreference alloc] init];
            [_elem106 read: inProtocol];
            [fieldValue addObject: _elem106];
            [_elem106 release_stub];
          }
          [inProtocol readListEnd];
          [self setUserSettings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveUserConfig_args"];
  if (__userSettings_isset) {
    if (__userSettings != nil) {
      [outProtocol writeFieldBeginWithName: @"userSettings" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__userSettings count]];
        int i108;
        for (i108 = 0; i108 < [__userSettings count]; i108++)
        {
          [[__userSettings objectAtIndex: i108] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"saveUserConfig_args("];
  [ms appendString: @"userSettings:"];
  [ms appendFormat: @"%@", __userSettings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SaveUserConfig_result : NSObject <NSCoding> {
  SaveConfigResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SaveConfigResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (SaveConfigResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SaveConfigResponse *) success;
- (void) setSuccess: (SaveConfigResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SaveUserConfig_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SaveConfigResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (SaveConfigResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SaveConfigResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SaveConfigResponse *fieldValue = [[SaveConfigResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SaveUserConfig_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SaveUserConfig_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface publishRating_args : NSObject <NSCoding> {
  NSString * __ratingID;
  BOOL __isUnpublish;

  BOOL __ratingID_isset;
  BOOL __isUnpublish_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ratingID, setter=setRatingID:) NSString * ratingID;
@property (nonatomic, getter=isUnpublish, setter=setIsUnpublish:) BOOL isUnpublish;
#endif

- (id) init;
- (id) initWithRatingID: (NSString *) ratingID isUnpublish: (BOOL) isUnpublish;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) ratingID;
- (void) setRatingID: (NSString *) ratingID;
#endif
- (BOOL) ratingIDIsSet;

#if !__has_feature(objc_arc)
- (BOOL) isUnpublish;
- (void) setIsUnpublish: (BOOL) isUnpublish;
#endif
- (BOOL) isUnpublishIsSet;

@end

@implementation publishRating_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRatingID: (NSString *) ratingID isUnpublish: (BOOL) isUnpublish
{
  self = [super init];
  __ratingID = [ratingID retain_stub];
  __ratingID_isset = YES;
  __isUnpublish = isUnpublish;
  __isUnpublish_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingID"])
  {
    __ratingID = [[decoder decodeObjectForKey: @"ratingID"] retain_stub];
    __ratingID_isset = YES;
  }
  if ([decoder containsValueForKey: @"isUnpublish"])
  {
    __isUnpublish = [decoder decodeBoolForKey: @"isUnpublish"];
    __isUnpublish_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingID_isset)
  {
    [encoder encodeObject: __ratingID forKey: @"ratingID"];
  }
  if (__isUnpublish_isset)
  {
    [encoder encodeBool: __isUnpublish forKey: @"isUnpublish"];
  }
}

- (void) dealloc
{
  [__ratingID release_stub];
  [super dealloc_stub];
}

- (NSString *) ratingID {
  return [[__ratingID retain_stub] autorelease_stub];
}

- (void) setRatingID: (NSString *) ratingID {
  [ratingID retain_stub];
  [__ratingID release_stub];
  __ratingID = ratingID;
  __ratingID_isset = YES;
}

- (BOOL) ratingIDIsSet {
  return __ratingID_isset;
}

- (void) unsetRatingID {
  [__ratingID release_stub];
  __ratingID = nil;
  __ratingID_isset = NO;
}

- (BOOL) isUnpublish {
  return __isUnpublish;
}

- (void) setIsUnpublish: (BOOL) isUnpublish {
  __isUnpublish = isUnpublish;
  __isUnpublish_isset = YES;
}

- (BOOL) isUnpublishIsSet {
  return __isUnpublish_isset;
}

- (void) unsetIsUnpublish {
  __isUnpublish_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRatingID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsUnpublish: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"publishRating_args"];
  if (__ratingID_isset) {
    if (__ratingID != nil) {
      [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ratingID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isUnpublish_isset) {
    [outProtocol writeFieldBeginWithName: @"isUnpublish" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __isUnpublish];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"publishRating_args("];
  [ms appendString: @"ratingID:"];
  [ms appendFormat: @"\"%@\"", __ratingID];
  [ms appendString: @",isUnpublish:"];
  [ms appendFormat: @"%i", __isUnpublish];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PublishRating_result : NSObject <NSCoding> {
  RatingResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RatingResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (RatingResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (RatingResponse *) success;
- (void) setSuccess: (RatingResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation PublishRating_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RatingResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RatingResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RatingResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RatingResponse *fieldValue = [[RatingResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PublishRating_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PublishRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface deleteRating_args : NSObject <NSCoding> {
  NSString * __ratingID;

  BOOL __ratingID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ratingID, setter=setRatingID:) NSString * ratingID;
#endif

- (id) init;
- (id) initWithRatingID: (NSString *) ratingID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) ratingID;
- (void) setRatingID: (NSString *) ratingID;
#endif
- (BOOL) ratingIDIsSet;

@end

@implementation deleteRating_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRatingID: (NSString *) ratingID
{
  self = [super init];
  __ratingID = [ratingID retain_stub];
  __ratingID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingID"])
  {
    __ratingID = [[decoder decodeObjectForKey: @"ratingID"] retain_stub];
    __ratingID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingID_isset)
  {
    [encoder encodeObject: __ratingID forKey: @"ratingID"];
  }
}

- (void) dealloc
{
  [__ratingID release_stub];
  [super dealloc_stub];
}

- (NSString *) ratingID {
  return [[__ratingID retain_stub] autorelease_stub];
}

- (void) setRatingID: (NSString *) ratingID {
  [ratingID retain_stub];
  [__ratingID release_stub];
  __ratingID = ratingID;
  __ratingID_isset = YES;
}

- (BOOL) ratingIDIsSet {
  return __ratingID_isset;
}

- (void) unsetRatingID {
  [__ratingID release_stub];
  __ratingID = nil;
  __ratingID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRatingID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"deleteRating_args"];
  if (__ratingID_isset) {
    if (__ratingID != nil) {
      [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ratingID];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"deleteRating_args("];
  [ms appendString: @"ratingID:"];
  [ms appendFormat: @"\"%@\"", __ratingID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteRating_result : NSObject <NSCoding> {
  RatingResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RatingResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (RatingResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (RatingResponse *) success;
- (void) setSuccess: (RatingResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteRating_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RatingResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RatingResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RatingResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RatingResponse *fieldValue = [[RatingResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteRating_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface replyToRating_args : NSObject <NSCoding> {
  NSString * __ratingID;
  NSString * __recepientEmail;
  NSString * __message;
  BOOL __isForward;

  BOOL __ratingID_isset;
  BOOL __recepientEmail_isset;
  BOOL __message_isset;
  BOOL __isForward_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ratingID, setter=setRatingID:) NSString * ratingID;
@property (nonatomic, retain, getter=recepientEmail, setter=setRecepientEmail:) NSString * recepientEmail;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
@property (nonatomic, getter=isForward, setter=setIsForward:) BOOL isForward;
#endif

- (id) init;
- (id) initWithRatingID: (NSString *) ratingID recepientEmail: (NSString *) recepientEmail message: (NSString *) message isForward: (BOOL) isForward;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) ratingID;
- (void) setRatingID: (NSString *) ratingID;
#endif
- (BOOL) ratingIDIsSet;

#if !__has_feature(objc_arc)
- (NSString *) recepientEmail;
- (void) setRecepientEmail: (NSString *) recepientEmail;
#endif
- (BOOL) recepientEmailIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

#if !__has_feature(objc_arc)
- (BOOL) isForward;
- (void) setIsForward: (BOOL) isForward;
#endif
- (BOOL) isForwardIsSet;

@end

@implementation replyToRating_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRatingID: (NSString *) ratingID recepientEmail: (NSString *) recepientEmail message: (NSString *) message isForward: (BOOL) isForward
{
  self = [super init];
  __ratingID = [ratingID retain_stub];
  __ratingID_isset = YES;
  __recepientEmail = [recepientEmail retain_stub];
  __recepientEmail_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __isForward = isForward;
  __isForward_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ratingID"])
  {
    __ratingID = [[decoder decodeObjectForKey: @"ratingID"] retain_stub];
    __ratingID_isset = YES;
  }
  if ([decoder containsValueForKey: @"recepientEmail"])
  {
    __recepientEmail = [[decoder decodeObjectForKey: @"recepientEmail"] retain_stub];
    __recepientEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"isForward"])
  {
    __isForward = [decoder decodeBoolForKey: @"isForward"];
    __isForward_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ratingID_isset)
  {
    [encoder encodeObject: __ratingID forKey: @"ratingID"];
  }
  if (__recepientEmail_isset)
  {
    [encoder encodeObject: __recepientEmail forKey: @"recepientEmail"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__isForward_isset)
  {
    [encoder encodeBool: __isForward forKey: @"isForward"];
  }
}

- (void) dealloc
{
  [__ratingID release_stub];
  [__recepientEmail release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) ratingID {
  return [[__ratingID retain_stub] autorelease_stub];
}

- (void) setRatingID: (NSString *) ratingID {
  [ratingID retain_stub];
  [__ratingID release_stub];
  __ratingID = ratingID;
  __ratingID_isset = YES;
}

- (BOOL) ratingIDIsSet {
  return __ratingID_isset;
}

- (void) unsetRatingID {
  [__ratingID release_stub];
  __ratingID = nil;
  __ratingID_isset = NO;
}

- (NSString *) recepientEmail {
  return [[__recepientEmail retain_stub] autorelease_stub];
}

- (void) setRecepientEmail: (NSString *) recepientEmail {
  [recepientEmail retain_stub];
  [__recepientEmail release_stub];
  __recepientEmail = recepientEmail;
  __recepientEmail_isset = YES;
}

- (BOOL) recepientEmailIsSet {
  return __recepientEmail_isset;
}

- (void) unsetRecepientEmail {
  [__recepientEmail release_stub];
  __recepientEmail = nil;
  __recepientEmail_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (BOOL) isForward {
  return __isForward;
}

- (void) setIsForward: (BOOL) isForward {
  __isForward = isForward;
  __isForward_isset = YES;
}

- (BOOL) isForwardIsSet {
  return __isForward_isset;
}

- (void) unsetIsForward {
  __isForward_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRatingID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecepientEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsForward: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"replyToRating_args"];
  if (__ratingID_isset) {
    if (__ratingID != nil) {
      [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __ratingID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recepientEmail_isset) {
    if (__recepientEmail != nil) {
      [outProtocol writeFieldBeginWithName: @"recepientEmail" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __recepientEmail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isForward_isset) {
    [outProtocol writeFieldBeginWithName: @"isForward" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isForward];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"replyToRating_args("];
  [ms appendString: @"ratingID:"];
  [ms appendFormat: @"\"%@\"", __ratingID];
  [ms appendString: @",recepientEmail:"];
  [ms appendFormat: @"\"%@\"", __recepientEmail];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",isForward:"];
  [ms appendFormat: @"%i", __isForward];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ReplyToRating_result : NSObject <NSCoding> {
  RatingResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RatingResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (RatingResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (RatingResponse *) success;
- (void) setSuccess: (RatingResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ReplyToRating_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RatingResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RatingResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RatingResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RatingResponse *fieldValue = [[RatingResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReplyToRating_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReplyToRating_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getSummary_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getSummary_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getSummary_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getSummary_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetSummary_result : NSObject <NSCoding> {
  SummaryResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SummaryResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (SummaryResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SummaryResponse *) success;
- (void) setSuccess: (SummaryResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetSummary_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SummaryResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (SummaryResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SummaryResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SummaryResponse *fieldValue = [[SummaryResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetSummary_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetSummary_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <NSCoding> {
  Response * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Response * success;
#endif

- (id) init;
- (id) initWithSuccess: (Response *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Response *) success;
- (void) setSuccess: (Response *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Logout_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Response *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Response *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Response *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Response *fieldValue = [[Response alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MobileClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getReviewsFeed: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  [outProtocol writeMessageBeginWithName: @"getReviewsFeed" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getReviewsFeed_args"];
  [outProtocol writeFieldBeginWithName: @"uptoTime" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: uptoTime];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: start];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageCount" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: pageCount];
  [outProtocol writeFieldEnd];
  if (searchCriteria != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchCriteria" type: TType_STRUCT fieldID: 4];
    [searchCriteria write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (FeedResponse *) recv_getReviewsFeed
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetReviewsFeed_result * result = [[[GetReviewsFeed_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getReviewsFeed failed: unknown result"];
}

- (FeedResponse *) getReviewsFeed: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  [self send_getReviewsFeed : uptoTime start: start pageCount: pageCount searchCriteria: searchCriteria];
  return [self recv_getReviewsFeed];
}

- (void) send_getSocialFeed: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  [outProtocol writeMessageBeginWithName: @"getSocialFeed" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSocialFeed_args"];
  [outProtocol writeFieldBeginWithName: @"uptoTime" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: uptoTime];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: start];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageCount" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: pageCount];
  [outProtocol writeFieldEnd];
  if (searchCriteria != nil)  {
    [outProtocol writeFieldBeginWithName: @"searchCriteria" type: TType_STRUCT fieldID: 4];
    [searchCriteria write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SocialFeedResponse *) recv_getSocialFeed
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSocialFeed_result * result = [[[GetSocialFeed_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSocialFeed failed: unknown result"];
}

- (SocialFeedResponse *) getSocialFeed: (int64_t) uptoTime start: (int32_t) start pageCount: (int32_t) pageCount searchCriteria: (SearchFilter *) searchCriteria
{
  [self send_getSocialFeed : uptoTime start: start pageCount: pageCount searchCriteria: searchCriteria];
  return [self recv_getSocialFeed];
}

- (void) send_getReferenceData
{
  [outProtocol writeMessageBeginWithName: @"getReferenceData" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getReferenceData_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ReferenceDataResponse *) recv_getReferenceData
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetReferenceData_result * result = [[[GetReferenceData_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getReferenceData failed: unknown result"];
}

- (ReferenceDataResponse *) getReferenceData
{
  [self send_getReferenceData];
  return [self recv_getReferenceData];
}

- (void) send_getUserConfig
{
  [outProtocol writeMessageBeginWithName: @"getUserConfig" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getUserConfig_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (PermissionsResponse *) recv_getUserConfig
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetUserConfig_result * result = [[[GetUserConfig_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getUserConfig failed: unknown result"];
}

- (PermissionsResponse *) getUserConfig
{
  [self send_getUserConfig];
  return [self recv_getUserConfig];
}

- (void) send_saveUserConfig: (NSMutableArray *) userSettings
{
  [outProtocol writeMessageBeginWithName: @"saveUserConfig" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveUserConfig_args"];
  if (userSettings != nil)  {
    [outProtocol writeFieldBeginWithName: @"userSettings" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [userSettings count]];
      int i110;
      for (i110 = 0; i110 < [userSettings count]; i110++)
      {
        [[userSettings objectAtIndex: i110] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SaveConfigResponse *) recv_saveUserConfig
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SaveUserConfig_result * result = [[[SaveUserConfig_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"saveUserConfig failed: unknown result"];
}

- (SaveConfigResponse *) saveUserConfig: (NSMutableArray *) userSettings
{
  [self send_saveUserConfig : userSettings];
  return [self recv_saveUserConfig];
}

- (void) send_publishRating: (NSString *) ratingID isUnpublish: (BOOL) isUnpublish
{
  [outProtocol writeMessageBeginWithName: @"publishRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"publishRating_args"];
  if (ratingID != nil)  {
    [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
    [outProtocol writeString: ratingID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"isUnpublish" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: isUnpublish];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RatingResponse *) recv_publishRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PublishRating_result * result = [[[PublishRating_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"publishRating failed: unknown result"];
}

- (RatingResponse *) publishRating: (NSString *) ratingID isUnpublish: (BOOL) isUnpublish
{
  [self send_publishRating : ratingID isUnpublish: isUnpublish];
  return [self recv_publishRating];
}

- (void) send_deleteRating: (NSString *) ratingID
{
  [outProtocol writeMessageBeginWithName: @"deleteRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"deleteRating_args"];
  if (ratingID != nil)  {
    [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
    [outProtocol writeString: ratingID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RatingResponse *) recv_deleteRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DeleteRating_result * result = [[[DeleteRating_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"deleteRating failed: unknown result"];
}

- (RatingResponse *) deleteRating: (NSString *) ratingID
{
  [self send_deleteRating : ratingID];
  return [self recv_deleteRating];
}

- (void) send_replyToRating: (NSString *) ratingID recepientEmail: (NSString *) recepientEmail message: (NSString *) message isForward: (BOOL) isForward
{
  [outProtocol writeMessageBeginWithName: @"replyToRating" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"replyToRating_args"];
  if (ratingID != nil)  {
    [outProtocol writeFieldBeginWithName: @"ratingID" type: TType_STRING fieldID: 1];
    [outProtocol writeString: ratingID];
    [outProtocol writeFieldEnd];
  }
  if (recepientEmail != nil)  {
    [outProtocol writeFieldBeginWithName: @"recepientEmail" type: TType_STRING fieldID: 2];
    [outProtocol writeString: recepientEmail];
    [outProtocol writeFieldEnd];
  }
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
    [outProtocol writeString: message];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"isForward" type: TType_BOOL fieldID: 4];
  [outProtocol writeBool: isForward];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RatingResponse *) recv_replyToRating
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ReplyToRating_result * result = [[[ReplyToRating_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"replyToRating failed: unknown result"];
}

- (RatingResponse *) replyToRating: (NSString *) ratingID recepientEmail: (NSString *) recepientEmail message: (NSString *) message isForward: (BOOL) isForward
{
  [self send_replyToRating : ratingID recepientEmail: recepientEmail message: message isForward: isForward];
  return [self recv_replyToRating];
}

- (void) send_getSummary
{
  [outProtocol writeMessageBeginWithName: @"getSummary" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getSummary_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SummaryResponse *) recv_getSummary
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetSummary_result * result = [[[GetSummary_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getSummary failed: unknown result"];
}

- (SummaryResponse *) getSummary
{
  [self send_getSummary];
  return [self recv_getSummary];
}

- (void) send_logout
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Response *) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"logout failed: unknown result"];
}

- (Response *) logout
{
  [self send_logout];
  return [self recv_logout];
}

@end

@implementation MobileProcessor

- (id) initWithMobile: (id <Mobile>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getReviewsFeed_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getReviewsFeed"];
  }
  {
    SEL s = @selector(process_getSocialFeed_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSocialFeed"];
  }
  {
    SEL s = @selector(process_getReferenceData_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getReferenceData"];
  }
  {
    SEL s = @selector(process_getUserConfig_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getUserConfig"];
  }
  {
    SEL s = @selector(process_saveUserConfig_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"saveUserConfig"];
  }
  {
    SEL s = @selector(process_publishRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"publishRating"];
  }
  {
    SEL s = @selector(process_deleteRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"deleteRating"];
  }
  {
    SEL s = @selector(process_replyToRating_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"replyToRating"];
  }
  {
    SEL s = @selector(process_getSummary_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getSummary"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  return self;
}

- (id<Mobile>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getReviewsFeed_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getReviewsFeed_args * args = [[getReviewsFeed_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetReviewsFeed_result * result = [[GetReviewsFeed_result alloc] init];
  [result setSuccess: [mService getReviewsFeed: [args uptoTime] start: [args start] pageCount: [args pageCount] searchCriteria: [args searchCriteria]]];
  [outProtocol writeMessageBeginWithName: @"getReviewsFeed"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getSocialFeed_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSocialFeed_args * args = [[getSocialFeed_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSocialFeed_result * result = [[GetSocialFeed_result alloc] init];
  [result setSuccess: [mService getSocialFeed: [args uptoTime] start: [args start] pageCount: [args pageCount] searchCriteria: [args searchCriteria]]];
  [outProtocol writeMessageBeginWithName: @"getSocialFeed"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getReferenceData_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getReferenceData_args * args = [[getReferenceData_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetReferenceData_result * result = [[GetReferenceData_result alloc] init];
  [result setSuccess: [mService getReferenceData]];
  [outProtocol writeMessageBeginWithName: @"getReferenceData"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getUserConfig_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getUserConfig_args * args = [[getUserConfig_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetUserConfig_result * result = [[GetUserConfig_result alloc] init];
  [result setSuccess: [mService getUserConfig]];
  [outProtocol writeMessageBeginWithName: @"getUserConfig"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_saveUserConfig_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  saveUserConfig_args * args = [[saveUserConfig_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SaveUserConfig_result * result = [[SaveUserConfig_result alloc] init];
  [result setSuccess: [mService saveUserConfig: [args userSettings]]];
  [outProtocol writeMessageBeginWithName: @"saveUserConfig"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_publishRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  publishRating_args * args = [[publishRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PublishRating_result * result = [[PublishRating_result alloc] init];
  [result setSuccess: [mService publishRating: [args ratingID] isUnpublish: [args isUnpublish]]];
  [outProtocol writeMessageBeginWithName: @"publishRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_deleteRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  deleteRating_args * args = [[deleteRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  DeleteRating_result * result = [[DeleteRating_result alloc] init];
  [result setSuccess: [mService deleteRating: [args ratingID]]];
  [outProtocol writeMessageBeginWithName: @"deleteRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_replyToRating_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  replyToRating_args * args = [[replyToRating_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ReplyToRating_result * result = [[ReplyToRating_result alloc] init];
  [result setSuccess: [mService replyToRating: [args ratingID] recepientEmail: [args recepientEmail] message: [args message] isForward: [args isForward]]];
  [outProtocol writeMessageBeginWithName: @"replyToRating"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getSummary_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getSummary_args * args = [[getSummary_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetSummary_result * result = [[GetSummary_result alloc] init];
  [result setSuccess: [mService getSummary]];
  [outProtocol writeMessageBeginWithName: @"getSummary"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [result setSuccess: [mService logout]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

